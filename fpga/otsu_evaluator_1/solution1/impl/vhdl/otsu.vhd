-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity otsu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    best_threshold : OUT STD_LOGIC_VECTOR (7 downto 0);
    best_threshold_ap_vld : OUT STD_LOGIC;
    updateThreshold_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of otsu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "otsu,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=1934,HLS_SYN_LUT=2500,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal INPUT_STREAM_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_STREAM_V_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_STREAM_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_STREAM_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_data_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_keep_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_keep_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_strb_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_strb_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_user_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_user_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_last_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_last_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_id_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_id_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_dest_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_STREAM_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_V_dest_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_keep_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_strb_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_id_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_dest_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal width_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal height_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal values_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal values_ce0 : STD_LOGIC;
    signal values_we0 : STD_LOGIC;
    signal values_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal values_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scores_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scores_ce0 : STD_LOGIC;
    signal scores_we0 : STD_LOGIC;
    signal scores_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal scores_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_13_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_data_V_reg_883 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_keep_V_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_count_load_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_count_load_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal values_addr_1_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal scoreIter_3_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal scoreIter_3_reg_955 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_cast_fu_570_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_cast_reg_965 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_1_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal threshold_1_cast4_ca_fu_589_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal threshold_1_cast4_ca_reg_981 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_14_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal scoreIter_4_fu_608_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal scoreIter_4_reg_997 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_619_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal count_pixels_under_t_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_pixels_under_t_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_under_threshold_1_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal scoreIter_2_fu_639_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal scoreIter_2_reg_1027 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond1_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal count_pixels_over_th_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_pixels_over_th_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_over_threshold_1_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_33_fu_718_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_33_reg_1060 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal tmp_35_fu_727_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_35_reg_1065 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_36_cast_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_cast_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp1_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_cast_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_cast_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_36_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal count_2_fu_790_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal count_2_reg_1108 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op300_write_state56 : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal tmp_22_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal record_id_2_record_i_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal record_2_record_fu_864_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_272 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal scoreIter_reg_295 : STD_LOGIC_VECTOR (8 downto 0);
    signal threshold_1_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal scoreIter_1_reg_319 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_under_threshold_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_under_th_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal scoreIter_2_in_reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_over_threshold_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_over_thr_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_computedScore1_phi_fu_391_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal computedScore1_reg_387 : STD_LOGIC_VECTOR (13 downto 0);
    signal record_id_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal record_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal count1_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal width_count_new_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state58 : BOOLEAN;
    signal p_s_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateThreshold_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_7_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_560_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_578_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_578_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_623_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_623_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal count_pixels_under_t_fu_628_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_689_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal count_pixels_over_th_fu_695_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_674_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal meanUnderThreshold_fu_706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_cast_fu_714_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal meanOverThreshold_fu_710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_cast_fu_723_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_735_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_fu_744_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_34_fu_750_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_36_fu_754_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal record_1_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal record_id_1_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_674_ap_start : STD_LOGIC;
    signal grp_fu_674_ap_done : STD_LOGIC;
    signal grp_fu_680_ap_start : STD_LOGIC;
    signal grp_fu_680_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_12_fu_578_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_689_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_1232 : BOOLEAN;
    signal ap_condition_1237 : BOOLEAN;

    component otsu_udiv_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component otsu_values IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component otsu_scores IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    values_U : component otsu_values
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_address0,
        ce0 => values_ce0,
        we0 => values_we0,
        d0 => values_d0,
        q0 => values_q0);

    scores_U : component otsu_scores
    generic map (
        DataWidth => 14,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => scores_address0,
        ce0 => scores_ce0,
        we0 => scores_we0,
        d0 => scores_d0,
        q0 => scores_q0);

    otsu_udiv_32ns_32bkb_U1 : component otsu_udiv_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_674_ap_start,
        done => grp_fu_674_ap_done,
        din0 => sum_under_threshold_reg_330,
        din1 => probability_under_th_reg_342,
        ce => ap_const_logic_1,
        dout => grp_fu_674_p2);

    otsu_udiv_32ns_32bkb_U2 : component otsu_udiv_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_680_ap_start,
        done => grp_fu_680_ap_done,
        din0 => sum_over_threshold_reg_363,
        din1 => probability_over_thr_reg_375,
        ce => ap_const_logic_1,
        dout => grp_fu_680_p2);





    INPUT_STREAM_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_vld_out))) then 
                                        INPUT_STREAM_V_data_V_0_sel_rd <= not(INPUT_STREAM_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_vld_in))) then 
                                        INPUT_STREAM_V_data_V_0_sel_wr <= not(INPUT_STREAM_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_ack_out)))) then 
                    INPUT_STREAM_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_vld_in)))) then 
                    INPUT_STREAM_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_data_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_V_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_V_data_V_0_vld_in)))) then 
                    INPUT_STREAM_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_vld_out))) then 
                                        INPUT_STREAM_V_dest_V_0_sel_rd <= not(INPUT_STREAM_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_vld_in))) then 
                                        INPUT_STREAM_V_dest_V_0_sel_wr <= not(INPUT_STREAM_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_dest_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_dest_V_0_state)))) then 
                    INPUT_STREAM_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_dest_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_dest_V_0_state)))) then 
                    INPUT_STREAM_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_dest_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_dest_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_dest_V_0_state)))) then 
                    INPUT_STREAM_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_vld_out))) then 
                                        INPUT_STREAM_V_id_V_0_sel_rd <= not(INPUT_STREAM_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_vld_in))) then 
                                        INPUT_STREAM_V_id_V_0_sel_wr <= not(INPUT_STREAM_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_id_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_id_V_0_state)))) then 
                    INPUT_STREAM_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_id_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_id_V_0_state)))) then 
                    INPUT_STREAM_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_id_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_id_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_id_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_id_V_0_state)))) then 
                    INPUT_STREAM_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_vld_out))) then 
                                        INPUT_STREAM_V_keep_V_0_sel_rd <= not(INPUT_STREAM_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_vld_in))) then 
                                        INPUT_STREAM_V_keep_V_0_sel_wr <= not(INPUT_STREAM_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_keep_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_keep_V_0_state)))) then 
                    INPUT_STREAM_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_keep_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_keep_V_0_state)))) then 
                    INPUT_STREAM_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_keep_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_keep_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_keep_V_0_state)))) then 
                    INPUT_STREAM_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_vld_out))) then 
                                        INPUT_STREAM_V_last_V_0_sel_rd <= not(INPUT_STREAM_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_vld_in))) then 
                                        INPUT_STREAM_V_last_V_0_sel_wr <= not(INPUT_STREAM_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_last_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_last_V_0_state)))) then 
                    INPUT_STREAM_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_last_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_last_V_0_state)))) then 
                    INPUT_STREAM_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_last_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_last_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_last_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_last_V_0_state)))) then 
                    INPUT_STREAM_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_vld_out))) then 
                                        INPUT_STREAM_V_strb_V_0_sel_rd <= not(INPUT_STREAM_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_vld_in))) then 
                                        INPUT_STREAM_V_strb_V_0_sel_wr <= not(INPUT_STREAM_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_strb_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_strb_V_0_state)))) then 
                    INPUT_STREAM_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_strb_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_strb_V_0_state)))) then 
                    INPUT_STREAM_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_strb_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_strb_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_strb_V_0_state)))) then 
                    INPUT_STREAM_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_vld_out))) then 
                                        INPUT_STREAM_V_user_V_0_sel_rd <= not(INPUT_STREAM_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_vld_in))) then 
                                        INPUT_STREAM_V_user_V_0_sel_wr <= not(INPUT_STREAM_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_user_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_lv2_3 = INPUT_STREAM_V_user_V_0_state)))) then 
                    INPUT_STREAM_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_user_V_0_state)) or ((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_vld_in) and (ap_const_lv2_3 = INPUT_STREAM_V_user_V_0_state)))) then 
                    INPUT_STREAM_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_V_user_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_V_user_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_ack_out) and (ap_const_lv2_1 = INPUT_STREAM_V_user_V_0_state)) or ((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_vld_in) and (ap_const_lv2_2 = INPUT_STREAM_V_user_V_0_state)))) then 
                    INPUT_STREAM_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_data_V_1_sel_rd <= not(OUTPUT_STREAM_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_data_V_1_sel_wr <= not(OUTPUT_STREAM_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_data_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_data_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_data_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_data_V_1_state)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_dest_V_1_sel_rd <= not(OUTPUT_STREAM_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_dest_V_1_sel_wr <= not(OUTPUT_STREAM_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_dest_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_dest_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_dest_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_dest_V_1_state)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_id_V_1_sel_rd <= not(OUTPUT_STREAM_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_id_V_1_sel_wr <= not(OUTPUT_STREAM_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_id_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_id_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_id_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_id_V_1_state)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_keep_V_1_sel_rd <= not(OUTPUT_STREAM_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_keep_V_1_sel_wr <= not(OUTPUT_STREAM_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_keep_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_keep_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_keep_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_keep_V_1_state)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_last_V_1_sel_rd <= not(OUTPUT_STREAM_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_last_V_1_sel_wr <= not(OUTPUT_STREAM_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_last_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_last_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_last_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_last_V_1_state)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_strb_V_1_sel_rd <= not(OUTPUT_STREAM_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_strb_V_1_sel_wr <= not(OUTPUT_STREAM_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_strb_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_strb_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_strb_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_strb_V_1_state)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_user_V_1_sel_rd <= not(OUTPUT_STREAM_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_user_V_1_sel_wr <= not(OUTPUT_STREAM_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_user_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_user_V_1_state)) or ((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_lv2_1 = OUTPUT_STREAM_V_user_V_1_state)) or ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_lv2_2 = OUTPUT_STREAM_V_user_V_1_state)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    updateThreshold_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                updateThreshold_V_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (or_cond_reg_948 = ap_const_lv1_1) and (tmp_13_fu_784_p2 = ap_const_lv1_1))) then 
                    updateThreshold_V_preg <= ap_const_lv1_1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_537_p2 = ap_const_lv1_0))) then 
                    updateThreshold_V_preg <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    computedScore1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (or_cond1_fu_668_p2 = ap_const_lv1_1) and (exitcond1_fu_645_p2 = ap_const_lv1_1))) then 
                computedScore1_reg_387 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (or_cond1_reg_1041 = ap_const_lv1_0))) then 
                computedScore1_reg_387 <= tmp_37_fu_758_p2(31 downto 18);
            end if; 
        end if;
    end process;

    count1_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_1))) then 
                count1_reg_423 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                count1_reg_423 <= count_2_reg_1108;
            end if; 
        end if;
    end process;

    count_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_2_fu_492_p2 = ap_const_lv1_1))) then 
                count_reg_272 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0))) then 
                count_reg_272 <= count_1_fu_504_p2;
            end if; 
        end if;
    end process;

    probability_over_thr_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                probability_over_thr_reg_375 <= count_pixels_over_th_reg_1050;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_15_fu_603_p2 = ap_const_lv1_1))) then 
                probability_over_thr_reg_375 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    probability_under_th_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_0))) then 
                probability_under_th_reg_342 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                probability_under_th_reg_342 <= count_pixels_under_t_reg_1017;
            end if; 
        end if;
    end process;

    record_id_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_1))) then 
                record_id_reg_399 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                record_id_reg_399 <= record_id_2_record_i_fu_856_p3;
            end if; 
        end if;
    end process;

    record_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_1))) then 
                record_reg_411 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                record_reg_411 <= record_2_record_fu_864_p3;
            end if; 
        end if;
    end process;

    scoreIter_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_0))) then 
                scoreIter_1_reg_319 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                scoreIter_1_reg_319 <= scoreIter_4_reg_997;
            end if; 
        end if;
    end process;

    scoreIter_2_in_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                scoreIter_2_in_reg_354 <= scoreIter_2_reg_1027;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_15_fu_603_p2 = ap_const_lv1_1))) then 
                scoreIter_2_in_reg_354 <= tmp_19_fu_619_p1;
            end if; 
        end if;
    end process;

    scoreIter_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                scoreIter_reg_295 <= scoreIter_3_reg_955;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_537_p2 = ap_const_lv1_1))) then 
                scoreIter_reg_295 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    sum_over_threshold_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_over_threshold_reg_363 <= sum_over_threshold_1_fu_701_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_15_fu_603_p2 = ap_const_lv1_1))) then 
                sum_over_threshold_reg_363 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_reg_283 <= sum_1_fu_584_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_537_p2 = ap_const_lv1_1))) then 
                sum_reg_283 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_under_threshold_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_0))) then 
                sum_under_threshold_reg_330 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sum_under_threshold_reg_330 <= sum_under_threshold_1_fu_634_p2;
            end if; 
        end if;
    end process;

    threshold_1_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                threshold_1_reg_307 <= tmp_39_fu_778_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_543_p2 = ap_const_lv1_1))) then 
                threshold_1_reg_307 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    width_count_new_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then
                if ((ap_const_boolean_1 = ap_condition_1237)) then 
                    width_count_new_reg_435 <= tmp_22_fu_806_p2;
                elsif ((ap_const_boolean_1 = ap_condition_1232)) then 
                    width_count_new_reg_435 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_data_V_0_load_A)) then
                INPUT_STREAM_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_data_V_0_load_B)) then
                INPUT_STREAM_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_load_A)) then
                INPUT_STREAM_V_dest_V_0_payload_A <= INPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_load_B)) then
                INPUT_STREAM_V_dest_V_0_payload_B <= INPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_load_A)) then
                INPUT_STREAM_V_id_V_0_payload_A <= INPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_load_B)) then
                INPUT_STREAM_V_id_V_0_payload_B <= INPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_load_A)) then
                INPUT_STREAM_V_keep_V_0_payload_A <= INPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_load_B)) then
                INPUT_STREAM_V_keep_V_0_payload_B <= INPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_load_A)) then
                INPUT_STREAM_V_last_V_0_payload_A <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_load_B)) then
                INPUT_STREAM_V_last_V_0_payload_B <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_load_A)) then
                INPUT_STREAM_V_strb_V_0_payload_A <= INPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_load_B)) then
                INPUT_STREAM_V_strb_V_0_payload_B <= INPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_load_A)) then
                INPUT_STREAM_V_user_V_0_payload_A <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_load_B)) then
                INPUT_STREAM_V_user_V_0_payload_B <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_load_A)) then
                OUTPUT_STREAM_V_data_V_1_payload_A <= tmp_data_V_reg_883;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_load_B)) then
                OUTPUT_STREAM_V_data_V_1_payload_B <= tmp_data_V_reg_883;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_load_A)) then
                OUTPUT_STREAM_V_dest_V_1_payload_A <= tmp_dest_V_reg_914;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_load_B)) then
                OUTPUT_STREAM_V_dest_V_1_payload_B <= tmp_dest_V_reg_914;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_load_A)) then
                OUTPUT_STREAM_V_id_V_1_payload_A <= tmp_id_V_reg_909;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_load_B)) then
                OUTPUT_STREAM_V_id_V_1_payload_B <= tmp_id_V_reg_909;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_load_A)) then
                OUTPUT_STREAM_V_keep_V_1_payload_A <= tmp_keep_V_reg_889;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_load_B)) then
                OUTPUT_STREAM_V_keep_V_1_payload_B <= tmp_keep_V_reg_889;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_load_A)) then
                OUTPUT_STREAM_V_last_V_1_payload_A <= tmp_last_V_reg_904;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_load_B)) then
                OUTPUT_STREAM_V_last_V_1_payload_B <= tmp_last_V_reg_904;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_load_A)) then
                OUTPUT_STREAM_V_strb_V_1_payload_A <= tmp_strb_V_reg_894;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_load_B)) then
                OUTPUT_STREAM_V_strb_V_1_payload_B <= tmp_strb_V_reg_894;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_load_A)) then
                OUTPUT_STREAM_V_user_V_1_payload_A <= tmp_user_V_reg_899;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_load_B)) then
                OUTPUT_STREAM_V_user_V_1_payload_B <= tmp_user_V_reg_899;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io) and (or_cond_reg_948 = ap_const_lv1_1))) then
                count_2_reg_1108 <= count_2_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                count_pixels_over_th_reg_1050 <= count_pixels_over_th_fu_695_p2;
                tmp_29_reg_1045 <= tmp_29_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                count_pixels_under_t_reg_1017 <= count_pixels_under_t_fu_628_p2;
                tmp_21_reg_1012 <= tmp_21_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io) and (((tmp_23_fu_811_p2 = ap_const_lv1_1) and (or_cond_reg_948 = ap_const_lv1_0)) or ((tmp_13_fu_784_p2 = ap_const_lv1_1) and (tmp_23_fu_811_p2 = ap_const_lv1_1))))) then
                height_count <= p_s_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_count_load_reg_925 <= height_count;
                tmp_2_reg_931 <= tmp_2_fu_492_p2;
                tmp_data_V_reg_883 <= INPUT_STREAM_V_data_V_0_data_out;
                tmp_dest_V_reg_914 <= INPUT_STREAM_V_dest_V_0_data_out;
                tmp_id_V_reg_909 <= INPUT_STREAM_V_id_V_0_data_out;
                tmp_keep_V_reg_889 <= INPUT_STREAM_V_keep_V_0_data_out;
                tmp_last_V_reg_904 <= INPUT_STREAM_V_last_V_0_data_out;
                tmp_strb_V_reg_894 <= INPUT_STREAM_V_strb_V_0_data_out;
                tmp_user_V_reg_899 <= INPUT_STREAM_V_user_V_0_data_out;
                width_count_load_reg_919 <= width_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_645_p2 = ap_const_lv1_1))) then
                or_cond1_reg_1041 <= or_cond1_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_cond_reg_948 <= or_cond_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_446 <= values_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                scoreIter_2_reg_1027 <= scoreIter_2_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                scoreIter_3_reg_955 <= scoreIter_3_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                scoreIter_4_reg_997 <= scoreIter_4_fu_608_p2;
                    tmp_14_reg_989(8 downto 0) <= tmp_14_fu_599_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    threshold_1_cast4_ca_reg_981(7 downto 0) <= threshold_1_cast4_ca_fu_589_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp1_reg_1075 <= tmp1_fu_735_p2;
                tmp2_reg_1085 <= tmp2_fu_744_p2;
                tmp_36_cast_reg_1070 <= tmp_36_cast_fu_732_p1;
                tmp_40_cast_reg_1080 <= tmp_40_cast_fu_741_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_543_p2 = ap_const_lv1_1))) then
                    tmp_10_cast_reg_965(13 downto 0) <= tmp_10_cast_fu_570_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_12_reg_971 <= tmp_12_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_33_reg_1060 <= tmp_33_fu_718_p2;
                tmp_35_reg_1065 <= tmp_35_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_34_reg_1090 <= tmp_34_fu_750_p2;
                tmp_36_reg_1095 <= tmp_36_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_3_fu_498_p2 = ap_const_lv1_1) or (tmp_2_reg_931 = ap_const_lv1_0)))) then
                values_addr_1_reg_943 <= tmp_6_fu_516_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                width_count <= width_count_new_reg_435;
            end if;
        end if;
    end process;
    tmp_10_cast_reg_965(16 downto 14) <= "000";
    threshold_1_cast4_ca_reg_981(8) <= '0';
    tmp_14_reg_989(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out, OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_data_V_1_state, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_state, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_state, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_state, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_state, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_state, OUTPUT_STREAM_V_dest_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_state, ap_CS_fsm_state56, tmp_13_fu_784_p2, or_cond_reg_948, ap_CS_fsm_state58, tmp_2_reg_931, ap_CS_fsm_state2, tmp_3_fu_498_p2, or_cond_fu_537_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_s_fu_543_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_15_fu_603_p2, ap_CS_fsm_state14, exitcond1_fu_645_p2, or_cond1_fu_668_p2, ap_block_state56_io, exitcond_fu_593_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_3_fu_498_p2 = ap_const_lv1_1) or (tmp_2_reg_931 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_543_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_593_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_15_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (or_cond1_fu_668_p2 = ap_const_lv1_1) and (exitcond1_fu_645_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_645_p2 = ap_const_lv1_1) and (or_cond1_fu_668_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io) and ((tmp_13_fu_784_p2 = ap_const_lv1_1) or (or_cond_reg_948 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io) and (or_cond_reg_948 = ap_const_lv1_1) and (tmp_13_fu_784_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state58 => 
                if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in))) and (OUTPUT_STREAM_V_dest_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_id_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_strb_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_keep_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_state)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_V_data_V_0_state(0);
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_STREAM_TREADY <= INPUT_STREAM_V_dest_V_0_state(1);
    INPUT_STREAM_V_data_V_0_ack_in <= INPUT_STREAM_V_data_V_0_state(1);

    INPUT_STREAM_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_data_V_0_data_out_assign_proc : process(INPUT_STREAM_V_data_V_0_payload_A, INPUT_STREAM_V_data_V_0_payload_B, INPUT_STREAM_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_data_V_0_sel)) then 
            INPUT_STREAM_V_data_V_0_data_out <= INPUT_STREAM_V_data_V_0_payload_B;
        else 
            INPUT_STREAM_V_data_V_0_data_out <= INPUT_STREAM_V_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_data_V_0_load_A <= (not(INPUT_STREAM_V_data_V_0_sel_wr) and INPUT_STREAM_V_data_V_0_state_cmp_full);
    INPUT_STREAM_V_data_V_0_load_B <= (INPUT_STREAM_V_data_V_0_state_cmp_full and INPUT_STREAM_V_data_V_0_sel_wr);
    INPUT_STREAM_V_data_V_0_sel <= INPUT_STREAM_V_data_V_0_sel_rd;
    INPUT_STREAM_V_data_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_data_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_data_V_0_vld_out <= INPUT_STREAM_V_data_V_0_state(0);
    INPUT_STREAM_V_dest_V_0_ack_in <= INPUT_STREAM_V_dest_V_0_state(1);

    INPUT_STREAM_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_dest_V_0_data_out_assign_proc : process(INPUT_STREAM_V_dest_V_0_payload_A, INPUT_STREAM_V_dest_V_0_payload_B, INPUT_STREAM_V_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_dest_V_0_sel)) then 
            INPUT_STREAM_V_dest_V_0_data_out <= INPUT_STREAM_V_dest_V_0_payload_B;
        else 
            INPUT_STREAM_V_dest_V_0_data_out <= INPUT_STREAM_V_dest_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_dest_V_0_load_A <= (not(INPUT_STREAM_V_dest_V_0_sel_wr) and INPUT_STREAM_V_dest_V_0_state_cmp_full);
    INPUT_STREAM_V_dest_V_0_load_B <= (INPUT_STREAM_V_dest_V_0_state_cmp_full and INPUT_STREAM_V_dest_V_0_sel_wr);
    INPUT_STREAM_V_dest_V_0_sel <= INPUT_STREAM_V_dest_V_0_sel_rd;
    INPUT_STREAM_V_dest_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_dest_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_dest_V_0_vld_out <= INPUT_STREAM_V_dest_V_0_state(0);
    INPUT_STREAM_V_id_V_0_ack_in <= INPUT_STREAM_V_id_V_0_state(1);

    INPUT_STREAM_V_id_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_id_V_0_data_out_assign_proc : process(INPUT_STREAM_V_id_V_0_payload_A, INPUT_STREAM_V_id_V_0_payload_B, INPUT_STREAM_V_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_id_V_0_sel)) then 
            INPUT_STREAM_V_id_V_0_data_out <= INPUT_STREAM_V_id_V_0_payload_B;
        else 
            INPUT_STREAM_V_id_V_0_data_out <= INPUT_STREAM_V_id_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_id_V_0_load_A <= (not(INPUT_STREAM_V_id_V_0_sel_wr) and INPUT_STREAM_V_id_V_0_state_cmp_full);
    INPUT_STREAM_V_id_V_0_load_B <= (INPUT_STREAM_V_id_V_0_state_cmp_full and INPUT_STREAM_V_id_V_0_sel_wr);
    INPUT_STREAM_V_id_V_0_sel <= INPUT_STREAM_V_id_V_0_sel_rd;
    INPUT_STREAM_V_id_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_id_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_id_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_id_V_0_vld_out <= INPUT_STREAM_V_id_V_0_state(0);
    INPUT_STREAM_V_keep_V_0_ack_in <= INPUT_STREAM_V_keep_V_0_state(1);

    INPUT_STREAM_V_keep_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_keep_V_0_data_out_assign_proc : process(INPUT_STREAM_V_keep_V_0_payload_A, INPUT_STREAM_V_keep_V_0_payload_B, INPUT_STREAM_V_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_keep_V_0_sel)) then 
            INPUT_STREAM_V_keep_V_0_data_out <= INPUT_STREAM_V_keep_V_0_payload_B;
        else 
            INPUT_STREAM_V_keep_V_0_data_out <= INPUT_STREAM_V_keep_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_keep_V_0_load_A <= (not(INPUT_STREAM_V_keep_V_0_sel_wr) and INPUT_STREAM_V_keep_V_0_state_cmp_full);
    INPUT_STREAM_V_keep_V_0_load_B <= (INPUT_STREAM_V_keep_V_0_state_cmp_full and INPUT_STREAM_V_keep_V_0_sel_wr);
    INPUT_STREAM_V_keep_V_0_sel <= INPUT_STREAM_V_keep_V_0_sel_rd;
    INPUT_STREAM_V_keep_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_keep_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_keep_V_0_vld_out <= INPUT_STREAM_V_keep_V_0_state(0);
    INPUT_STREAM_V_last_V_0_ack_in <= INPUT_STREAM_V_last_V_0_state(1);

    INPUT_STREAM_V_last_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_last_V_0_data_out_assign_proc : process(INPUT_STREAM_V_last_V_0_payload_A, INPUT_STREAM_V_last_V_0_payload_B, INPUT_STREAM_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_last_V_0_sel)) then 
            INPUT_STREAM_V_last_V_0_data_out <= INPUT_STREAM_V_last_V_0_payload_B;
        else 
            INPUT_STREAM_V_last_V_0_data_out <= INPUT_STREAM_V_last_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_last_V_0_load_A <= (not(INPUT_STREAM_V_last_V_0_sel_wr) and INPUT_STREAM_V_last_V_0_state_cmp_full);
    INPUT_STREAM_V_last_V_0_load_B <= (INPUT_STREAM_V_last_V_0_state_cmp_full and INPUT_STREAM_V_last_V_0_sel_wr);
    INPUT_STREAM_V_last_V_0_sel <= INPUT_STREAM_V_last_V_0_sel_rd;
    INPUT_STREAM_V_last_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_last_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_last_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_last_V_0_vld_out <= INPUT_STREAM_V_last_V_0_state(0);
    INPUT_STREAM_V_strb_V_0_ack_in <= INPUT_STREAM_V_strb_V_0_state(1);

    INPUT_STREAM_V_strb_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_strb_V_0_data_out_assign_proc : process(INPUT_STREAM_V_strb_V_0_payload_A, INPUT_STREAM_V_strb_V_0_payload_B, INPUT_STREAM_V_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_strb_V_0_sel)) then 
            INPUT_STREAM_V_strb_V_0_data_out <= INPUT_STREAM_V_strb_V_0_payload_B;
        else 
            INPUT_STREAM_V_strb_V_0_data_out <= INPUT_STREAM_V_strb_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_strb_V_0_load_A <= (not(INPUT_STREAM_V_strb_V_0_sel_wr) and INPUT_STREAM_V_strb_V_0_state_cmp_full);
    INPUT_STREAM_V_strb_V_0_load_B <= (INPUT_STREAM_V_strb_V_0_state_cmp_full and INPUT_STREAM_V_strb_V_0_sel_wr);
    INPUT_STREAM_V_strb_V_0_sel <= INPUT_STREAM_V_strb_V_0_sel_rd;
    INPUT_STREAM_V_strb_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_strb_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_strb_V_0_vld_out <= INPUT_STREAM_V_strb_V_0_state(0);
    INPUT_STREAM_V_user_V_0_ack_in <= INPUT_STREAM_V_user_V_0_state(1);

    INPUT_STREAM_V_user_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, INPUT_STREAM_V_data_V_0_vld_out)
    begin
        if ((not(((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_V_user_V_0_data_out_assign_proc : process(INPUT_STREAM_V_user_V_0_payload_A, INPUT_STREAM_V_user_V_0_payload_B, INPUT_STREAM_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_V_user_V_0_sel)) then 
            INPUT_STREAM_V_user_V_0_data_out <= INPUT_STREAM_V_user_V_0_payload_B;
        else 
            INPUT_STREAM_V_user_V_0_data_out <= INPUT_STREAM_V_user_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_V_user_V_0_load_A <= (not(INPUT_STREAM_V_user_V_0_sel_wr) and INPUT_STREAM_V_user_V_0_state_cmp_full);
    INPUT_STREAM_V_user_V_0_load_B <= (INPUT_STREAM_V_user_V_0_state_cmp_full and INPUT_STREAM_V_user_V_0_sel_wr);
    INPUT_STREAM_V_user_V_0_sel <= INPUT_STREAM_V_user_V_0_sel_rd;
    INPUT_STREAM_V_user_V_0_state_cmp_full <= '0' when (INPUT_STREAM_V_user_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_V_user_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_V_user_V_0_vld_out <= INPUT_STREAM_V_user_V_0_state(0);
    OUTPUT_STREAM_TDATA <= OUTPUT_STREAM_V_data_V_1_data_out;

    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(OUTPUT_STREAM_V_data_V_1_state, ap_CS_fsm_state56, tmp_13_fu_784_p2, or_cond_reg_948, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or ((ap_const_logic_1 = ap_CS_fsm_state56) and ((tmp_13_fu_784_p2 = ap_const_lv1_1) or (or_cond_reg_948 = ap_const_lv1_0))))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_V_data_V_1_state(1);
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDEST <= OUTPUT_STREAM_V_dest_V_1_data_out;
    OUTPUT_STREAM_TID <= OUTPUT_STREAM_V_id_V_1_data_out;
    OUTPUT_STREAM_TKEEP <= OUTPUT_STREAM_V_keep_V_1_data_out;
    OUTPUT_STREAM_TLAST <= OUTPUT_STREAM_V_last_V_1_data_out;
    OUTPUT_STREAM_TSTRB <= OUTPUT_STREAM_V_strb_V_1_data_out;
    OUTPUT_STREAM_TUSER <= OUTPUT_STREAM_V_user_V_1_data_out;
    OUTPUT_STREAM_TVALID <= OUTPUT_STREAM_V_dest_V_1_state(0);
    OUTPUT_STREAM_V_data_V_1_ack_in <= OUTPUT_STREAM_V_data_V_1_state(1);
    OUTPUT_STREAM_V_data_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_data_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_data_V_1_payload_A, OUTPUT_STREAM_V_data_V_1_payload_B, OUTPUT_STREAM_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_sel)) then 
            OUTPUT_STREAM_V_data_V_1_data_out <= OUTPUT_STREAM_V_data_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_data_V_1_data_out <= OUTPUT_STREAM_V_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_data_V_1_load_A <= (not(OUTPUT_STREAM_V_data_V_1_sel_wr) and OUTPUT_STREAM_V_data_V_1_state_cmp_full);
    OUTPUT_STREAM_V_data_V_1_load_B <= (OUTPUT_STREAM_V_data_V_1_state_cmp_full and OUTPUT_STREAM_V_data_V_1_sel_wr);
    OUTPUT_STREAM_V_data_V_1_sel <= OUTPUT_STREAM_V_data_V_1_sel_rd;
    OUTPUT_STREAM_V_data_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_data_V_1_vld_out <= OUTPUT_STREAM_V_data_V_1_state(0);
    OUTPUT_STREAM_V_dest_V_1_ack_in <= OUTPUT_STREAM_V_dest_V_1_state(1);
    OUTPUT_STREAM_V_dest_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_dest_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_dest_V_1_payload_A, OUTPUT_STREAM_V_dest_V_1_payload_B, OUTPUT_STREAM_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_sel)) then 
            OUTPUT_STREAM_V_dest_V_1_data_out <= OUTPUT_STREAM_V_dest_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_dest_V_1_data_out <= OUTPUT_STREAM_V_dest_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_dest_V_1_load_A <= (not(OUTPUT_STREAM_V_dest_V_1_sel_wr) and OUTPUT_STREAM_V_dest_V_1_state_cmp_full);
    OUTPUT_STREAM_V_dest_V_1_load_B <= (OUTPUT_STREAM_V_dest_V_1_state_cmp_full and OUTPUT_STREAM_V_dest_V_1_sel_wr);
    OUTPUT_STREAM_V_dest_V_1_sel <= OUTPUT_STREAM_V_dest_V_1_sel_rd;
    OUTPUT_STREAM_V_dest_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_dest_V_1_vld_out <= OUTPUT_STREAM_V_dest_V_1_state(0);
    OUTPUT_STREAM_V_id_V_1_ack_in <= OUTPUT_STREAM_V_id_V_1_state(1);
    OUTPUT_STREAM_V_id_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_id_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_id_V_1_payload_A, OUTPUT_STREAM_V_id_V_1_payload_B, OUTPUT_STREAM_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_sel)) then 
            OUTPUT_STREAM_V_id_V_1_data_out <= OUTPUT_STREAM_V_id_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_id_V_1_data_out <= OUTPUT_STREAM_V_id_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_id_V_1_load_A <= (not(OUTPUT_STREAM_V_id_V_1_sel_wr) and OUTPUT_STREAM_V_id_V_1_state_cmp_full);
    OUTPUT_STREAM_V_id_V_1_load_B <= (OUTPUT_STREAM_V_id_V_1_state_cmp_full and OUTPUT_STREAM_V_id_V_1_sel_wr);
    OUTPUT_STREAM_V_id_V_1_sel <= OUTPUT_STREAM_V_id_V_1_sel_rd;
    OUTPUT_STREAM_V_id_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_id_V_1_vld_out <= OUTPUT_STREAM_V_id_V_1_state(0);
    OUTPUT_STREAM_V_keep_V_1_ack_in <= OUTPUT_STREAM_V_keep_V_1_state(1);
    OUTPUT_STREAM_V_keep_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_keep_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_keep_V_1_payload_A, OUTPUT_STREAM_V_keep_V_1_payload_B, OUTPUT_STREAM_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_sel)) then 
            OUTPUT_STREAM_V_keep_V_1_data_out <= OUTPUT_STREAM_V_keep_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_keep_V_1_data_out <= OUTPUT_STREAM_V_keep_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_keep_V_1_load_A <= (not(OUTPUT_STREAM_V_keep_V_1_sel_wr) and OUTPUT_STREAM_V_keep_V_1_state_cmp_full);
    OUTPUT_STREAM_V_keep_V_1_load_B <= (OUTPUT_STREAM_V_keep_V_1_state_cmp_full and OUTPUT_STREAM_V_keep_V_1_sel_wr);
    OUTPUT_STREAM_V_keep_V_1_sel <= OUTPUT_STREAM_V_keep_V_1_sel_rd;
    OUTPUT_STREAM_V_keep_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_keep_V_1_vld_out <= OUTPUT_STREAM_V_keep_V_1_state(0);
    OUTPUT_STREAM_V_last_V_1_ack_in <= OUTPUT_STREAM_V_last_V_1_state(1);
    OUTPUT_STREAM_V_last_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_last_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_last_V_1_payload_A, OUTPUT_STREAM_V_last_V_1_payload_B, OUTPUT_STREAM_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_sel)) then 
            OUTPUT_STREAM_V_last_V_1_data_out <= OUTPUT_STREAM_V_last_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_last_V_1_data_out <= OUTPUT_STREAM_V_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_last_V_1_load_A <= (not(OUTPUT_STREAM_V_last_V_1_sel_wr) and OUTPUT_STREAM_V_last_V_1_state_cmp_full);
    OUTPUT_STREAM_V_last_V_1_load_B <= (OUTPUT_STREAM_V_last_V_1_state_cmp_full and OUTPUT_STREAM_V_last_V_1_sel_wr);
    OUTPUT_STREAM_V_last_V_1_sel <= OUTPUT_STREAM_V_last_V_1_sel_rd;
    OUTPUT_STREAM_V_last_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_last_V_1_vld_out <= OUTPUT_STREAM_V_last_V_1_state(0);
    OUTPUT_STREAM_V_strb_V_1_ack_in <= OUTPUT_STREAM_V_strb_V_1_state(1);
    OUTPUT_STREAM_V_strb_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_strb_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_strb_V_1_payload_A, OUTPUT_STREAM_V_strb_V_1_payload_B, OUTPUT_STREAM_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_sel)) then 
            OUTPUT_STREAM_V_strb_V_1_data_out <= OUTPUT_STREAM_V_strb_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_strb_V_1_data_out <= OUTPUT_STREAM_V_strb_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_strb_V_1_load_A <= (not(OUTPUT_STREAM_V_strb_V_1_sel_wr) and OUTPUT_STREAM_V_strb_V_1_state_cmp_full);
    OUTPUT_STREAM_V_strb_V_1_load_B <= (OUTPUT_STREAM_V_strb_V_1_state_cmp_full and OUTPUT_STREAM_V_strb_V_1_sel_wr);
    OUTPUT_STREAM_V_strb_V_1_sel <= OUTPUT_STREAM_V_strb_V_1_sel_rd;
    OUTPUT_STREAM_V_strb_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_strb_V_1_vld_out <= OUTPUT_STREAM_V_strb_V_1_state(0);
    OUTPUT_STREAM_V_user_V_1_ack_in <= OUTPUT_STREAM_V_user_V_1_state(1);
    OUTPUT_STREAM_V_user_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_user_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_user_V_1_payload_A, OUTPUT_STREAM_V_user_V_1_payload_B, OUTPUT_STREAM_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_sel)) then 
            OUTPUT_STREAM_V_user_V_1_data_out <= OUTPUT_STREAM_V_user_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_user_V_1_data_out <= OUTPUT_STREAM_V_user_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_user_V_1_load_A <= (not(OUTPUT_STREAM_V_user_V_1_sel_wr) and OUTPUT_STREAM_V_user_V_1_state_cmp_full);
    OUTPUT_STREAM_V_user_V_1_load_B <= (OUTPUT_STREAM_V_user_V_1_state_cmp_full and OUTPUT_STREAM_V_user_V_1_sel_wr);
    OUTPUT_STREAM_V_user_V_1_sel <= OUTPUT_STREAM_V_user_V_1_sel_rd;
    OUTPUT_STREAM_V_user_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state56, ap_predicate_op300_write_state56, ap_block_state56_io)
    begin
        if (((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io))) then 
            OUTPUT_STREAM_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_user_V_1_vld_out <= OUTPUT_STREAM_V_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, INPUT_STREAM_V_data_V_0_vld_out)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = INPUT_STREAM_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state56_io_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, ap_predicate_op300_write_state56)
    begin
                ap_block_state56_io <= ((ap_predicate_op300_write_state56 = ap_const_boolean_1) and (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in));
    end process;


    ap_block_state58_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_ack_in)
    begin
                ap_block_state58 <= ((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in));
    end process;


    ap_condition_1232_assign_proc : process(tmp_13_fu_784_p2, or_cond_reg_948, tmp_23_fu_811_p2)
    begin
                ap_condition_1232 <= (((tmp_23_fu_811_p2 = ap_const_lv1_1) and (or_cond_reg_948 = ap_const_lv1_0)) or ((tmp_13_fu_784_p2 = ap_const_lv1_1) and (tmp_23_fu_811_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1237_assign_proc : process(tmp_13_fu_784_p2, or_cond_reg_948, tmp_23_fu_811_p2)
    begin
                ap_condition_1237 <= (((or_cond_reg_948 = ap_const_lv1_0) and (tmp_23_fu_811_p2 = ap_const_lv1_0)) or ((tmp_13_fu_784_p2 = ap_const_lv1_1) and (tmp_23_fu_811_p2 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_data_V_1_state, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_state, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_state, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_state, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_state, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_state, OUTPUT_STREAM_V_dest_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_state, ap_CS_fsm_state58)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in))) and (OUTPUT_STREAM_V_dest_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_id_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_strb_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_keep_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_computedScore1_phi_fu_391_p4_assign_proc : process(or_cond1_reg_1041, ap_CS_fsm_state55, computedScore1_reg_387, tmp_37_fu_758_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (or_cond1_reg_1041 = ap_const_lv1_0))) then 
            ap_phi_mux_computedScore1_phi_fu_391_p4 <= tmp_37_fu_758_p2(31 downto 18);
        else 
            ap_phi_mux_computedScore1_phi_fu_391_p4 <= computedScore1_reg_387;
        end if; 
    end process;


    ap_predicate_op300_write_state56_assign_proc : process(tmp_13_fu_784_p2, or_cond_reg_948)
    begin
                ap_predicate_op300_write_state56 <= ((tmp_13_fu_784_p2 = ap_const_lv1_1) or (or_cond_reg_948 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_data_V_1_state, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_state, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_state, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_state, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_state, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_state, OUTPUT_STREAM_V_dest_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_state, ap_CS_fsm_state58)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in))) and (OUTPUT_STREAM_V_dest_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_id_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_last_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_user_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_strb_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_keep_V_1_state(0) = ap_const_logic_0) and (OUTPUT_STREAM_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    best_threshold <= record_id_reg_399(8 - 1 downto 0);

    best_threshold_ap_vld_assign_proc : process(ap_CS_fsm_state56, tmp_13_fu_784_p2, or_cond_reg_948, ap_block_state56_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io) and (or_cond_reg_948 = ap_const_lv1_1) and (tmp_13_fu_784_p2 = ap_const_lv1_1))) then 
            best_threshold_ap_vld <= ap_const_logic_1;
        else 
            best_threshold_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_504_p2 <= std_logic_vector(unsigned(count_reg_272) + unsigned(ap_const_lv9_1));
    count_2_fu_790_p2 <= std_logic_vector(unsigned(count1_reg_423) + unsigned(ap_const_lv9_1));
    count_pixels_over_th_fu_695_p0 <= reg_446;
    count_pixels_over_th_fu_695_p2 <= std_logic_vector(signed(count_pixels_over_th_fu_695_p0) + signed(probability_over_thr_reg_375));
    count_pixels_under_t_fu_628_p0 <= reg_446;
    count_pixels_under_t_fu_628_p2 <= std_logic_vector(signed(count_pixels_under_t_fu_628_p0) + signed(probability_under_th_reg_342));
    exitcond1_fu_645_p2 <= "1" when (scoreIter_2_in_reg_354 = ap_const_lv16_FF) else "0";
    exitcond_fu_593_p2 <= "1" when (threshold_1_reg_307 = ap_const_lv8_FF) else "0";

    grp_fu_674_ap_start_assign_proc : process(ap_CS_fsm_state14, exitcond1_fu_645_p2, or_cond1_fu_668_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_645_p2 = ap_const_lv1_1) and (or_cond1_fu_668_p2 = ap_const_lv1_0))) then 
            grp_fu_674_ap_start <= ap_const_logic_1;
        else 
            grp_fu_674_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_680_ap_start_assign_proc : process(ap_CS_fsm_state14, exitcond1_fu_645_p2, or_cond1_fu_668_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_645_p2 = ap_const_lv1_1) and (or_cond1_fu_668_p2 = ap_const_lv1_0))) then 
            grp_fu_680_ap_start <= ap_const_logic_1;
        else 
            grp_fu_680_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    meanOverThreshold_fu_710_p1 <= grp_fu_680_p2(16 - 1 downto 0);
    meanUnderThreshold_fu_706_p1 <= grp_fu_674_p2(16 - 1 downto 0);
    or_cond1_fu_668_p2 <= (tmp_30_fu_662_p2 or tmp_26_fu_656_p2);
    or_cond_fu_537_p2 <= (tmp_9_fu_532_p2 and tmp_8_fu_527_p2);
    p_s_fu_828_p3 <= 
        ap_const_lv32_0 when (tmp_25_fu_822_p2(0) = '1') else 
        tmp_24_fu_817_p2;
    record_1_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scores_q0),32));
    record_2_record_fu_864_p3 <= 
        record_1_fu_842_p1 when (tmp_18_fu_846_p2(0) = '1') else 
        record_reg_411;
    record_id_1_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count1_reg_423),32));
    record_id_2_record_i_fu_856_p3 <= 
        record_id_1_fu_852_p1 when (tmp_18_fu_846_p2(0) = '1') else 
        record_id_reg_399;
    scoreIter_2_fu_639_p2 <= std_logic_vector(unsigned(scoreIter_2_in_reg_354) + unsigned(ap_const_lv16_1));
    scoreIter_3_fu_549_p2 <= std_logic_vector(unsigned(scoreIter_reg_295) + unsigned(ap_const_lv9_1));
    scoreIter_4_fu_608_p2 <= std_logic_vector(unsigned(scoreIter_1_reg_319) + unsigned(ap_const_lv9_1));

    scores_address0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state55, tmp_4_fu_510_p1, tmp_38_fu_773_p1, tmp_17_fu_796_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            scores_address0 <= tmp_17_fu_796_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            scores_address0 <= tmp_38_fu_773_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scores_address0 <= tmp_4_fu_510_p1(8 - 1 downto 0);
        else 
            scores_address0 <= "XXXXXXXX";
        end if; 
    end process;


    scores_ce0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state2, ap_CS_fsm_state55, ap_block_state56_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_boolean_0 = ap_block_state56_io)))) then 
            scores_ce0 <= ap_const_logic_1;
        else 
            scores_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scores_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, ap_phi_mux_computedScore1_phi_fu_391_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            scores_d0 <= ap_phi_mux_computedScore1_phi_fu_391_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scores_d0 <= ap_const_lv14_0;
        else 
            scores_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    scores_we0_assign_proc : process(tmp_2_reg_931, ap_CS_fsm_state2, tmp_3_fu_498_p2, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0)))) then 
            scores_we0 <= ap_const_logic_1;
        else 
            scores_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_fu_584_p2 <= std_logic_vector(unsigned(tmp_12_reg_971) + unsigned(sum_reg_283));
    sum_over_threshold_1_fu_701_p2 <= std_logic_vector(unsigned(tmp_29_reg_1045) + unsigned(sum_over_threshold_reg_363));
    sum_under_threshold_1_fu_634_p2 <= std_logic_vector(unsigned(tmp_21_reg_1012) + unsigned(sum_under_threshold_reg_330));
    threshold_1_cast4_ca_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_1_reg_307),9));
    tmp1_fu_735_p0 <= tmp_33_reg_1060;
    tmp1_fu_735_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp1_fu_735_p0) * signed(probability_under_th_reg_342))), 32));
    tmp2_fu_744_p0 <= tmp_35_reg_1065;
    tmp2_fu_744_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_fu_744_p0) * signed(probability_over_thr_reg_375))), 32));
    tmp_10_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_560_p4),17));
    tmp_10_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_reg_295),64));
    tmp_12_fu_578_p0 <= reg_446;
    tmp_12_fu_578_p1 <= tmp_12_fu_578_p10(9 - 1 downto 0);
    tmp_12_fu_578_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_reg_295),32));
    tmp_12_fu_578_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_fu_578_p0) * signed('0' &tmp_12_fu_578_p1))), 32));
    tmp_13_fu_784_p2 <= "1" when (count1_reg_423 = ap_const_lv9_100) else "0";
    tmp_14_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_1_reg_319),32));
    tmp_15_fu_603_p2 <= "1" when (unsigned(scoreIter_1_reg_319) > unsigned(threshold_1_cast4_ca_reg_981)) else "0";
    tmp_17_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count1_reg_423),64));
    tmp_18_fu_846_p2 <= "1" when (unsigned(record_1_fu_842_p1) > unsigned(record_reg_411)) else "0";
    tmp_19_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_1_reg_307),16));
    tmp_1_fu_486_p2 <= (width_count or height_count);
    tmp_20_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_1_reg_319),64));
    tmp_21_fu_623_p0 <= reg_446;
    tmp_21_fu_623_p1 <= tmp_14_reg_989(9 - 1 downto 0);
    tmp_21_fu_623_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_21_fu_623_p0) * signed('0' &tmp_21_fu_623_p1))), 32));
    tmp_22_fu_806_p2 <= std_logic_vector(unsigned(width_count_load_reg_919) + unsigned(ap_const_lv32_1));
    tmp_23_fu_811_p2 <= "1" when (tmp_22_fu_806_p2 = ap_const_lv32_200) else "0";
    tmp_24_fu_817_p2 <= std_logic_vector(unsigned(height_count_load_reg_925) + unsigned(ap_const_lv32_1));
    tmp_25_fu_822_p2 <= "1" when (tmp_24_fu_817_p2 = ap_const_lv32_200) else "0";
    tmp_26_fu_656_p2 <= "1" when (probability_over_thr_reg_375 = ap_const_lv32_0) else "0";
    tmp_27_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_2_fu_639_p2),64));
    tmp_29_fu_689_p0 <= reg_446;
    tmp_29_fu_689_p1 <= tmp_29_fu_689_p10(16 - 1 downto 0);
    tmp_29_fu_689_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scoreIter_2_reg_1027),32));
    tmp_29_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_29_fu_689_p0) * signed('0' &tmp_29_fu_689_p1))), 32));
    tmp_2_fu_492_p2 <= "1" when (tmp_1_fu_486_p2 = ap_const_lv32_0) else "0";
    tmp_30_fu_662_p2 <= "1" when (probability_under_th_reg_342 = ap_const_lv32_0) else "0";
    tmp_33_fu_718_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_714_p1) - unsigned(tmp_10_cast_reg_965));
    tmp_34_fu_750_p0 <= tmp_36_cast_reg_1070(17 - 1 downto 0);
    tmp_34_fu_750_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_34_fu_750_p0) * signed(tmp1_reg_1075))), 32));
    tmp_35_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(meanUnderThreshold_fu_706_p1),17));
    tmp_35_fu_727_p2 <= std_logic_vector(unsigned(tmp_39_cast_fu_723_p1) - unsigned(tmp_10_cast_reg_965));
        tmp_36_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_1060),32));

    tmp_36_fu_754_p0 <= tmp_40_cast_reg_1080(17 - 1 downto 0);
    tmp_36_fu_754_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_36_fu_754_p0) * signed(tmp2_reg_1085))), 32));
    tmp_37_fu_758_p2 <= std_logic_vector(unsigned(tmp_34_reg_1090) + unsigned(tmp_36_reg_1095));
    tmp_38_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_1_reg_307),64));
    tmp_39_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(meanOverThreshold_fu_710_p1),17));
    tmp_39_fu_778_p2 <= std_logic_vector(unsigned(threshold_1_reg_307) + unsigned(ap_const_lv8_1));
    tmp_3_fu_498_p2 <= "1" when (count_reg_272 = ap_const_lv9_100) else "0";
        tmp_40_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_reg_1065),32));

    tmp_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_reg_272),64));
    tmp_5_fu_560_p4 <= sum_reg_283(31 downto 18);
    tmp_6_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_V_reg_883),64));
    tmp_7_fu_520_p2 <= std_logic_vector(unsigned(reg_446) + unsigned(ap_const_lv32_1));
    tmp_8_fu_527_p2 <= "1" when (width_count_load_reg_919 = ap_const_lv32_1FF) else "0";
    tmp_9_fu_532_p2 <= "1" when (height_count_load_reg_925 = ap_const_lv32_1FF) else "0";
    tmp_s_fu_543_p2 <= "1" when (scoreIter_reg_295 = ap_const_lv9_100) else "0";

    updateThreshold_V_assign_proc : process(ap_CS_fsm_state56, tmp_13_fu_784_p2, or_cond_reg_948, or_cond_fu_537_p2, ap_CS_fsm_state4, updateThreshold_V_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (or_cond_reg_948 = ap_const_lv1_1) and (tmp_13_fu_784_p2 = ap_const_lv1_1))) then 
            updateThreshold_V <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_537_p2 = ap_const_lv1_0))) then 
            updateThreshold_V <= ap_const_lv1_0;
        else 
            updateThreshold_V <= updateThreshold_V_preg;
        end if; 
    end process;


    values_address0_assign_proc : process(tmp_2_reg_931, ap_CS_fsm_state2, values_addr_1_reg_943, tmp_3_fu_498_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14, tmp_4_fu_510_p1, tmp_6_fu_516_p1, tmp_10_fu_555_p1, tmp_20_fu_614_p1, tmp_27_fu_651_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            values_address0 <= tmp_27_fu_651_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            values_address0 <= tmp_20_fu_614_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            values_address0 <= tmp_10_fu_555_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            values_address0 <= values_addr_1_reg_943;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_3_fu_498_p2 = ap_const_lv1_1) or (tmp_2_reg_931 = ap_const_lv1_0)))) then 
            values_address0 <= tmp_6_fu_516_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0))) then 
            values_address0 <= tmp_4_fu_510_p1(8 - 1 downto 0);
        else 
            values_address0 <= "XXXXXXXX";
        end if; 
    end process;


    values_ce0_assign_proc : process(tmp_2_reg_931, ap_CS_fsm_state2, tmp_3_fu_498_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_3_fu_498_p2 = ap_const_lv1_1) or (tmp_2_reg_931 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0)))) then 
            values_ce0 <= ap_const_logic_1;
        else 
            values_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_d0_assign_proc : process(tmp_2_reg_931, ap_CS_fsm_state2, tmp_3_fu_498_p2, ap_CS_fsm_state4, tmp_7_fu_520_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            values_d0 <= tmp_7_fu_520_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0))) then 
            values_d0 <= ap_const_lv32_0;
        else 
            values_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values_we0_assign_proc : process(tmp_2_reg_931, ap_CS_fsm_state2, tmp_3_fu_498_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_reg_931 = ap_const_lv1_1) and (tmp_3_fu_498_p2 = ap_const_lv1_0)))) then 
            values_we0 <= ap_const_logic_1;
        else 
            values_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
