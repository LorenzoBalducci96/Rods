// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="otsu,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=1934,HLS_SYN_LUT=2500,HLS_VERSION=2018_3}" *)

module otsu (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST,
        INPUT_STREAM_TID,
        INPUT_STREAM_TDEST,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST,
        best_threshold,
        best_threshold_ap_vld,
        updateThreshold_V
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_state2 = 58'd2;
parameter    ap_ST_fsm_state3 = 58'd4;
parameter    ap_ST_fsm_state4 = 58'd8;
parameter    ap_ST_fsm_state5 = 58'd16;
parameter    ap_ST_fsm_state6 = 58'd32;
parameter    ap_ST_fsm_state7 = 58'd64;
parameter    ap_ST_fsm_state8 = 58'd128;
parameter    ap_ST_fsm_state9 = 58'd256;
parameter    ap_ST_fsm_state10 = 58'd512;
parameter    ap_ST_fsm_state11 = 58'd1024;
parameter    ap_ST_fsm_state12 = 58'd2048;
parameter    ap_ST_fsm_state13 = 58'd4096;
parameter    ap_ST_fsm_state14 = 58'd8192;
parameter    ap_ST_fsm_state15 = 58'd16384;
parameter    ap_ST_fsm_state16 = 58'd32768;
parameter    ap_ST_fsm_state17 = 58'd65536;
parameter    ap_ST_fsm_state18 = 58'd131072;
parameter    ap_ST_fsm_state19 = 58'd262144;
parameter    ap_ST_fsm_state20 = 58'd524288;
parameter    ap_ST_fsm_state21 = 58'd1048576;
parameter    ap_ST_fsm_state22 = 58'd2097152;
parameter    ap_ST_fsm_state23 = 58'd4194304;
parameter    ap_ST_fsm_state24 = 58'd8388608;
parameter    ap_ST_fsm_state25 = 58'd16777216;
parameter    ap_ST_fsm_state26 = 58'd33554432;
parameter    ap_ST_fsm_state27 = 58'd67108864;
parameter    ap_ST_fsm_state28 = 58'd134217728;
parameter    ap_ST_fsm_state29 = 58'd268435456;
parameter    ap_ST_fsm_state30 = 58'd536870912;
parameter    ap_ST_fsm_state31 = 58'd1073741824;
parameter    ap_ST_fsm_state32 = 58'd2147483648;
parameter    ap_ST_fsm_state33 = 58'd4294967296;
parameter    ap_ST_fsm_state34 = 58'd8589934592;
parameter    ap_ST_fsm_state35 = 58'd17179869184;
parameter    ap_ST_fsm_state36 = 58'd34359738368;
parameter    ap_ST_fsm_state37 = 58'd68719476736;
parameter    ap_ST_fsm_state38 = 58'd137438953472;
parameter    ap_ST_fsm_state39 = 58'd274877906944;
parameter    ap_ST_fsm_state40 = 58'd549755813888;
parameter    ap_ST_fsm_state41 = 58'd1099511627776;
parameter    ap_ST_fsm_state42 = 58'd2199023255552;
parameter    ap_ST_fsm_state43 = 58'd4398046511104;
parameter    ap_ST_fsm_state44 = 58'd8796093022208;
parameter    ap_ST_fsm_state45 = 58'd17592186044416;
parameter    ap_ST_fsm_state46 = 58'd35184372088832;
parameter    ap_ST_fsm_state47 = 58'd70368744177664;
parameter    ap_ST_fsm_state48 = 58'd140737488355328;
parameter    ap_ST_fsm_state49 = 58'd281474976710656;
parameter    ap_ST_fsm_state50 = 58'd562949953421312;
parameter    ap_ST_fsm_state51 = 58'd1125899906842624;
parameter    ap_ST_fsm_state52 = 58'd2251799813685248;
parameter    ap_ST_fsm_state53 = 58'd4503599627370496;
parameter    ap_ST_fsm_state54 = 58'd9007199254740992;
parameter    ap_ST_fsm_state55 = 58'd18014398509481984;
parameter    ap_ST_fsm_state56 = 58'd36028797018963968;
parameter    ap_ST_fsm_state57 = 58'd72057594037927936;
parameter    ap_ST_fsm_state58 = 58'd144115188075855872;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] INPUT_STREAM_TDATA;
input   INPUT_STREAM_TVALID;
output   INPUT_STREAM_TREADY;
input  [0:0] INPUT_STREAM_TKEEP;
input  [0:0] INPUT_STREAM_TSTRB;
input  [0:0] INPUT_STREAM_TUSER;
input  [0:0] INPUT_STREAM_TLAST;
input  [0:0] INPUT_STREAM_TID;
input  [0:0] INPUT_STREAM_TDEST;
output  [7:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [0:0] OUTPUT_STREAM_TKEEP;
output  [0:0] OUTPUT_STREAM_TSTRB;
output  [0:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [0:0] OUTPUT_STREAM_TID;
output  [0:0] OUTPUT_STREAM_TDEST;
output  [7:0] best_threshold;
output   best_threshold_ap_vld;
output  [0:0] updateThreshold_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg best_threshold_ap_vld;
reg[0:0] updateThreshold_V;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] INPUT_STREAM_V_data_V_0_data_out;
wire    INPUT_STREAM_V_data_V_0_vld_in;
wire    INPUT_STREAM_V_data_V_0_vld_out;
wire    INPUT_STREAM_V_data_V_0_ack_in;
reg    INPUT_STREAM_V_data_V_0_ack_out;
reg   [7:0] INPUT_STREAM_V_data_V_0_payload_A;
reg   [7:0] INPUT_STREAM_V_data_V_0_payload_B;
reg    INPUT_STREAM_V_data_V_0_sel_rd;
reg    INPUT_STREAM_V_data_V_0_sel_wr;
wire    INPUT_STREAM_V_data_V_0_sel;
wire    INPUT_STREAM_V_data_V_0_load_A;
wire    INPUT_STREAM_V_data_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_data_V_0_state;
wire    INPUT_STREAM_V_data_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_keep_V_0_data_out;
wire    INPUT_STREAM_V_keep_V_0_vld_in;
wire    INPUT_STREAM_V_keep_V_0_vld_out;
wire    INPUT_STREAM_V_keep_V_0_ack_in;
reg    INPUT_STREAM_V_keep_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_keep_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_keep_V_0_payload_B;
reg    INPUT_STREAM_V_keep_V_0_sel_rd;
reg    INPUT_STREAM_V_keep_V_0_sel_wr;
wire    INPUT_STREAM_V_keep_V_0_sel;
wire    INPUT_STREAM_V_keep_V_0_load_A;
wire    INPUT_STREAM_V_keep_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_keep_V_0_state;
wire    INPUT_STREAM_V_keep_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_strb_V_0_data_out;
wire    INPUT_STREAM_V_strb_V_0_vld_in;
wire    INPUT_STREAM_V_strb_V_0_vld_out;
wire    INPUT_STREAM_V_strb_V_0_ack_in;
reg    INPUT_STREAM_V_strb_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_strb_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_strb_V_0_payload_B;
reg    INPUT_STREAM_V_strb_V_0_sel_rd;
reg    INPUT_STREAM_V_strb_V_0_sel_wr;
wire    INPUT_STREAM_V_strb_V_0_sel;
wire    INPUT_STREAM_V_strb_V_0_load_A;
wire    INPUT_STREAM_V_strb_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_strb_V_0_state;
wire    INPUT_STREAM_V_strb_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_user_V_0_data_out;
wire    INPUT_STREAM_V_user_V_0_vld_in;
wire    INPUT_STREAM_V_user_V_0_vld_out;
wire    INPUT_STREAM_V_user_V_0_ack_in;
reg    INPUT_STREAM_V_user_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_user_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_user_V_0_payload_B;
reg    INPUT_STREAM_V_user_V_0_sel_rd;
reg    INPUT_STREAM_V_user_V_0_sel_wr;
wire    INPUT_STREAM_V_user_V_0_sel;
wire    INPUT_STREAM_V_user_V_0_load_A;
wire    INPUT_STREAM_V_user_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_user_V_0_state;
wire    INPUT_STREAM_V_user_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_last_V_0_data_out;
wire    INPUT_STREAM_V_last_V_0_vld_in;
wire    INPUT_STREAM_V_last_V_0_vld_out;
wire    INPUT_STREAM_V_last_V_0_ack_in;
reg    INPUT_STREAM_V_last_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_B;
reg    INPUT_STREAM_V_last_V_0_sel_rd;
reg    INPUT_STREAM_V_last_V_0_sel_wr;
wire    INPUT_STREAM_V_last_V_0_sel;
wire    INPUT_STREAM_V_last_V_0_load_A;
wire    INPUT_STREAM_V_last_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_last_V_0_state;
wire    INPUT_STREAM_V_last_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_id_V_0_data_out;
wire    INPUT_STREAM_V_id_V_0_vld_in;
wire    INPUT_STREAM_V_id_V_0_vld_out;
wire    INPUT_STREAM_V_id_V_0_ack_in;
reg    INPUT_STREAM_V_id_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_id_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_id_V_0_payload_B;
reg    INPUT_STREAM_V_id_V_0_sel_rd;
reg    INPUT_STREAM_V_id_V_0_sel_wr;
wire    INPUT_STREAM_V_id_V_0_sel;
wire    INPUT_STREAM_V_id_V_0_load_A;
wire    INPUT_STREAM_V_id_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_id_V_0_state;
wire    INPUT_STREAM_V_id_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_dest_V_0_data_out;
wire    INPUT_STREAM_V_dest_V_0_vld_in;
wire    INPUT_STREAM_V_dest_V_0_vld_out;
wire    INPUT_STREAM_V_dest_V_0_ack_in;
reg    INPUT_STREAM_V_dest_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_dest_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_dest_V_0_payload_B;
reg    INPUT_STREAM_V_dest_V_0_sel_rd;
reg    INPUT_STREAM_V_dest_V_0_sel_wr;
wire    INPUT_STREAM_V_dest_V_0_sel;
wire    INPUT_STREAM_V_dest_V_0_load_A;
wire    INPUT_STREAM_V_dest_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_dest_V_0_state;
wire    INPUT_STREAM_V_dest_V_0_state_cmp_full;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_data_out;
reg    OUTPUT_STREAM_V_data_V_1_vld_in;
wire    OUTPUT_STREAM_V_data_V_1_vld_out;
wire    OUTPUT_STREAM_V_data_V_1_ack_in;
wire    OUTPUT_STREAM_V_data_V_1_ack_out;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_payload_A;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_payload_B;
reg    OUTPUT_STREAM_V_data_V_1_sel_rd;
reg    OUTPUT_STREAM_V_data_V_1_sel_wr;
wire    OUTPUT_STREAM_V_data_V_1_sel;
wire    OUTPUT_STREAM_V_data_V_1_load_A;
wire    OUTPUT_STREAM_V_data_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_data_V_1_state;
wire    OUTPUT_STREAM_V_data_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_data_out;
reg    OUTPUT_STREAM_V_keep_V_1_vld_in;
wire    OUTPUT_STREAM_V_keep_V_1_vld_out;
wire    OUTPUT_STREAM_V_keep_V_1_ack_in;
wire    OUTPUT_STREAM_V_keep_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_payload_B;
reg    OUTPUT_STREAM_V_keep_V_1_sel_rd;
reg    OUTPUT_STREAM_V_keep_V_1_sel_wr;
wire    OUTPUT_STREAM_V_keep_V_1_sel;
wire    OUTPUT_STREAM_V_keep_V_1_load_A;
wire    OUTPUT_STREAM_V_keep_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_keep_V_1_state;
wire    OUTPUT_STREAM_V_keep_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_data_out;
reg    OUTPUT_STREAM_V_strb_V_1_vld_in;
wire    OUTPUT_STREAM_V_strb_V_1_vld_out;
wire    OUTPUT_STREAM_V_strb_V_1_ack_in;
wire    OUTPUT_STREAM_V_strb_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_payload_B;
reg    OUTPUT_STREAM_V_strb_V_1_sel_rd;
reg    OUTPUT_STREAM_V_strb_V_1_sel_wr;
wire    OUTPUT_STREAM_V_strb_V_1_sel;
wire    OUTPUT_STREAM_V_strb_V_1_load_A;
wire    OUTPUT_STREAM_V_strb_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_strb_V_1_state;
wire    OUTPUT_STREAM_V_strb_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_data_out;
reg    OUTPUT_STREAM_V_user_V_1_vld_in;
wire    OUTPUT_STREAM_V_user_V_1_vld_out;
wire    OUTPUT_STREAM_V_user_V_1_ack_in;
wire    OUTPUT_STREAM_V_user_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_B;
reg    OUTPUT_STREAM_V_user_V_1_sel_rd;
reg    OUTPUT_STREAM_V_user_V_1_sel_wr;
wire    OUTPUT_STREAM_V_user_V_1_sel;
wire    OUTPUT_STREAM_V_user_V_1_load_A;
wire    OUTPUT_STREAM_V_user_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_state;
wire    OUTPUT_STREAM_V_user_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_data_out;
reg    OUTPUT_STREAM_V_last_V_1_vld_in;
wire    OUTPUT_STREAM_V_last_V_1_vld_out;
wire    OUTPUT_STREAM_V_last_V_1_ack_in;
wire    OUTPUT_STREAM_V_last_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_B;
reg    OUTPUT_STREAM_V_last_V_1_sel_rd;
reg    OUTPUT_STREAM_V_last_V_1_sel_wr;
wire    OUTPUT_STREAM_V_last_V_1_sel;
wire    OUTPUT_STREAM_V_last_V_1_load_A;
wire    OUTPUT_STREAM_V_last_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_last_V_1_state;
wire    OUTPUT_STREAM_V_last_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_data_out;
reg    OUTPUT_STREAM_V_id_V_1_vld_in;
wire    OUTPUT_STREAM_V_id_V_1_vld_out;
wire    OUTPUT_STREAM_V_id_V_1_ack_in;
wire    OUTPUT_STREAM_V_id_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_B;
reg    OUTPUT_STREAM_V_id_V_1_sel_rd;
reg    OUTPUT_STREAM_V_id_V_1_sel_wr;
wire    OUTPUT_STREAM_V_id_V_1_sel;
wire    OUTPUT_STREAM_V_id_V_1_load_A;
wire    OUTPUT_STREAM_V_id_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_id_V_1_state;
wire    OUTPUT_STREAM_V_id_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_data_out;
reg    OUTPUT_STREAM_V_dest_V_1_vld_in;
wire    OUTPUT_STREAM_V_dest_V_1_vld_out;
wire    OUTPUT_STREAM_V_dest_V_1_ack_in;
wire    OUTPUT_STREAM_V_dest_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_B;
reg    OUTPUT_STREAM_V_dest_V_1_sel_rd;
reg    OUTPUT_STREAM_V_dest_V_1_sel_wr;
wire    OUTPUT_STREAM_V_dest_V_1_sel;
wire    OUTPUT_STREAM_V_dest_V_1_load_A;
wire    OUTPUT_STREAM_V_dest_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_dest_V_1_state;
wire    OUTPUT_STREAM_V_dest_V_1_state_cmp_full;
reg   [31:0] width_count;
reg   [31:0] height_count;
reg   [7:0] values_address0;
reg    values_ce0;
reg    values_we0;
reg   [31:0] values_d0;
wire   [31:0] values_q0;
reg   [7:0] scores_address0;
reg    scores_ce0;
reg    scores_we0;
reg   [13:0] scores_d0;
wire   [13:0] scores_q0;
reg    INPUT_STREAM_TDATA_blk_n;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state56;
wire   [0:0] tmp_13_fu_784_p2;
reg   [0:0] or_cond_reg_948;
wire    ap_CS_fsm_state58;
reg   [31:0] reg_446;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
reg   [7:0] tmp_data_V_reg_883;
reg    ap_block_state1;
reg   [0:0] tmp_keep_V_reg_889;
reg   [0:0] tmp_strb_V_reg_894;
reg   [0:0] tmp_user_V_reg_899;
reg   [0:0] tmp_last_V_reg_904;
reg   [0:0] tmp_id_V_reg_909;
reg   [0:0] tmp_dest_V_reg_914;
reg   [31:0] width_count_load_reg_919;
reg   [31:0] height_count_load_reg_925;
wire   [0:0] tmp_2_fu_492_p2;
reg   [0:0] tmp_2_reg_931;
wire   [8:0] count_1_fu_504_p2;
wire    ap_CS_fsm_state2;
reg   [7:0] values_addr_1_reg_943;
wire   [0:0] tmp_3_fu_498_p2;
wire   [0:0] or_cond_fu_537_p2;
wire    ap_CS_fsm_state4;
wire   [8:0] scoreIter_3_fu_549_p2;
reg   [8:0] scoreIter_3_reg_955;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_s_fu_543_p2;
wire   [16:0] tmp_10_cast_fu_570_p1;
reg   [16:0] tmp_10_cast_reg_965;
wire   [31:0] tmp_12_fu_578_p2;
reg   [31:0] tmp_12_reg_971;
wire    ap_CS_fsm_state7;
wire   [31:0] sum_1_fu_584_p2;
wire    ap_CS_fsm_state8;
wire   [8:0] threshold_1_cast4_ca_fu_589_p1;
reg   [8:0] threshold_1_cast4_ca_reg_981;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_14_fu_599_p1;
reg   [31:0] tmp_14_reg_989;
wire    ap_CS_fsm_state10;
wire   [8:0] scoreIter_4_fu_608_p2;
reg   [8:0] scoreIter_4_reg_997;
wire   [0:0] tmp_15_fu_603_p2;
wire   [15:0] tmp_19_fu_619_p1;
wire   [31:0] tmp_21_fu_623_p2;
reg   [31:0] tmp_21_reg_1012;
wire    ap_CS_fsm_state12;
wire   [31:0] count_pixels_under_t_fu_628_p2;
reg   [31:0] count_pixels_under_t_reg_1017;
wire   [31:0] sum_under_threshold_1_fu_634_p2;
wire    ap_CS_fsm_state13;
wire   [15:0] scoreIter_2_fu_639_p2;
reg   [15:0] scoreIter_2_reg_1027;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond1_fu_645_p2;
wire   [0:0] or_cond1_fu_668_p2;
reg   [0:0] or_cond1_reg_1041;
wire   [31:0] tmp_29_fu_689_p2;
reg   [31:0] tmp_29_reg_1045;
wire    ap_CS_fsm_state16;
wire   [31:0] count_pixels_over_th_fu_695_p2;
reg   [31:0] count_pixels_over_th_reg_1050;
wire   [31:0] sum_over_threshold_1_fu_701_p2;
wire    ap_CS_fsm_state17;
wire   [16:0] tmp_33_fu_718_p2;
reg   [16:0] tmp_33_reg_1060;
wire    ap_CS_fsm_state52;
wire   [16:0] tmp_35_fu_727_p2;
reg   [16:0] tmp_35_reg_1065;
wire  signed [31:0] tmp_36_cast_fu_732_p1;
reg  signed [31:0] tmp_36_cast_reg_1070;
wire    ap_CS_fsm_state53;
wire  signed [31:0] tmp1_fu_735_p2;
reg  signed [31:0] tmp1_reg_1075;
wire  signed [31:0] tmp_40_cast_fu_741_p1;
reg  signed [31:0] tmp_40_cast_reg_1080;
wire  signed [31:0] tmp2_fu_744_p2;
reg  signed [31:0] tmp2_reg_1085;
wire   [31:0] tmp_34_fu_750_p2;
reg   [31:0] tmp_34_reg_1090;
wire    ap_CS_fsm_state54;
wire   [31:0] tmp_36_fu_754_p2;
reg   [31:0] tmp_36_reg_1095;
wire   [7:0] tmp_39_fu_778_p2;
wire    ap_CS_fsm_state55;
wire   [8:0] count_2_fu_790_p2;
reg   [8:0] count_2_reg_1108;
reg    ap_predicate_op300_write_state56;
reg    ap_block_state56_io;
wire   [31:0] tmp_22_fu_806_p2;
wire   [31:0] record_id_2_record_i_fu_856_p3;
wire    ap_CS_fsm_state57;
wire   [31:0] record_2_record_fu_864_p3;
reg   [8:0] count_reg_272;
reg   [31:0] sum_reg_283;
reg   [8:0] scoreIter_reg_295;
reg   [7:0] threshold_1_reg_307;
reg   [8:0] scoreIter_1_reg_319;
wire   [0:0] exitcond_fu_593_p2;
reg   [31:0] sum_under_threshold_reg_330;
reg  signed [31:0] probability_under_th_reg_342;
reg   [15:0] scoreIter_2_in_reg_354;
reg   [31:0] sum_over_threshold_reg_363;
reg  signed [31:0] probability_over_thr_reg_375;
reg   [13:0] ap_phi_mux_computedScore1_phi_fu_391_p4;
reg   [13:0] computedScore1_reg_387;
reg   [31:0] record_id_reg_399;
reg   [31:0] record_reg_411;
reg   [8:0] count1_reg_423;
reg   [31:0] width_count_new_reg_435;
wire   [0:0] tmp_23_fu_811_p2;
wire   [63:0] tmp_4_fu_510_p1;
wire   [63:0] tmp_6_fu_516_p1;
wire   [63:0] tmp_10_fu_555_p1;
wire   [63:0] tmp_20_fu_614_p1;
wire   [63:0] tmp_27_fu_651_p1;
wire   [63:0] tmp_38_fu_773_p1;
wire   [63:0] tmp_17_fu_796_p1;
reg    ap_block_state58;
wire   [31:0] p_s_fu_828_p3;
reg   [0:0] updateThreshold_V_preg;
wire   [31:0] tmp_7_fu_520_p2;
wire   [31:0] tmp_1_fu_486_p2;
wire   [0:0] tmp_8_fu_527_p2;
wire   [0:0] tmp_9_fu_532_p2;
wire   [13:0] tmp_5_fu_560_p4;
wire  signed [31:0] tmp_12_fu_578_p0;
wire   [8:0] tmp_12_fu_578_p1;
wire  signed [31:0] tmp_21_fu_623_p0;
wire   [8:0] tmp_21_fu_623_p1;
wire  signed [31:0] count_pixels_under_t_fu_628_p0;
wire   [0:0] tmp_26_fu_656_p2;
wire   [0:0] tmp_30_fu_662_p2;
wire  signed [31:0] tmp_29_fu_689_p0;
wire   [15:0] tmp_29_fu_689_p1;
wire  signed [31:0] count_pixels_over_th_fu_695_p0;
wire   [15:0] grp_fu_674_p2;
wire   [15:0] grp_fu_680_p2;
wire   [15:0] meanUnderThreshold_fu_706_p1;
wire   [16:0] tmp_35_cast_fu_714_p1;
wire   [15:0] meanOverThreshold_fu_710_p1;
wire   [16:0] tmp_39_cast_fu_723_p1;
wire  signed [16:0] tmp1_fu_735_p0;
wire  signed [16:0] tmp2_fu_744_p0;
wire  signed [16:0] tmp_34_fu_750_p0;
wire  signed [16:0] tmp_36_fu_754_p0;
wire   [31:0] tmp_37_fu_758_p2;
wire   [31:0] tmp_24_fu_817_p2;
wire   [0:0] tmp_25_fu_822_p2;
wire   [31:0] record_1_fu_842_p1;
wire   [0:0] tmp_18_fu_846_p2;
wire   [31:0] record_id_1_fu_852_p1;
reg    grp_fu_674_ap_start;
wire    grp_fu_674_ap_done;
reg    grp_fu_680_ap_start;
wire    grp_fu_680_ap_done;
reg   [57:0] ap_NS_fsm;
wire   [31:0] tmp_12_fu_578_p10;
wire   [31:0] tmp_29_fu_689_p10;
reg    ap_condition_1232;
reg    ap_condition_1237;

// power-on initialization
initial begin
#0 ap_CS_fsm = 58'd1;
#0 INPUT_STREAM_V_data_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_data_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_data_V_0_state = 2'd0;
#0 INPUT_STREAM_V_keep_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_state = 2'd0;
#0 INPUT_STREAM_V_strb_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_state = 2'd0;
#0 INPUT_STREAM_V_user_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_user_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_user_V_0_state = 2'd0;
#0 INPUT_STREAM_V_last_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_last_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_last_V_0_state = 2'd0;
#0 INPUT_STREAM_V_id_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_id_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_id_V_0_state = 2'd0;
#0 INPUT_STREAM_V_dest_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_state = 2'd0;
#0 OUTPUT_STREAM_V_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_state = 2'd0;
#0 width_count = 32'd0;
#0 height_count = 32'd0;
#0 updateThreshold_V_preg = 1'd0;
end

otsu_values #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
values_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(values_address0),
    .ce0(values_ce0),
    .we0(values_we0),
    .d0(values_d0),
    .q0(values_q0)
);

otsu_scores #(
    .DataWidth( 14 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
scores_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(scores_address0),
    .ce0(scores_ce0),
    .we0(scores_we0),
    .d0(scores_d0),
    .q0(scores_q0)
);

otsu_udiv_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
otsu_udiv_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_674_ap_start),
    .done(grp_fu_674_ap_done),
    .din0(sum_under_threshold_reg_330),
    .din1(probability_under_th_reg_342),
    .ce(1'b1),
    .dout(grp_fu_674_p2)
);

otsu_udiv_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
otsu_udiv_32ns_32bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_680_ap_start),
    .done(grp_fu_680_ap_done),
    .din0(sum_over_threshold_reg_363),
    .din1(probability_over_thr_reg_375),
    .ce(1'b1),
    .dout(grp_fu_680_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_out))) begin
            INPUT_STREAM_V_data_V_0_sel_rd <= ~INPUT_STREAM_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in))) begin
            INPUT_STREAM_V_data_V_0_sel_wr <= ~INPUT_STREAM_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_data_V_0_state)) | ((2'd1 == INPUT_STREAM_V_data_V_0_state) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_data_V_0_state) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_out))) begin
            INPUT_STREAM_V_dest_V_0_sel_rd <= ~INPUT_STREAM_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in))) begin
            INPUT_STREAM_V_dest_V_0_sel_wr <= ~INPUT_STREAM_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b1 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_out))) begin
            INPUT_STREAM_V_id_V_0_sel_rd <= ~INPUT_STREAM_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in))) begin
            INPUT_STREAM_V_id_V_0_sel_wr <= ~INPUT_STREAM_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_id_V_0_state)) | ((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_id_V_0_state)) | ((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_id_V_0_state)) | ((1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_id_V_0_state)) | ((1'b1 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_out))) begin
            INPUT_STREAM_V_keep_V_0_sel_rd <= ~INPUT_STREAM_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in))) begin
            INPUT_STREAM_V_keep_V_0_sel_wr <= ~INPUT_STREAM_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b1 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_out))) begin
            INPUT_STREAM_V_last_V_0_sel_rd <= ~INPUT_STREAM_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in))) begin
            INPUT_STREAM_V_last_V_0_sel_wr <= ~INPUT_STREAM_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_last_V_0_state)) | ((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_last_V_0_state)) | ((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_last_V_0_state)) | ((1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_last_V_0_state)) | ((1'b1 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_out))) begin
            INPUT_STREAM_V_strb_V_0_sel_rd <= ~INPUT_STREAM_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in))) begin
            INPUT_STREAM_V_strb_V_0_sel_wr <= ~INPUT_STREAM_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b1 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_out))) begin
            INPUT_STREAM_V_user_V_0_sel_rd <= ~INPUT_STREAM_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in))) begin
            INPUT_STREAM_V_user_V_0_sel_wr <= ~INPUT_STREAM_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_user_V_0_state)) | ((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_user_V_0_state)) | ((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_user_V_0_state)) | ((1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_user_V_0_state)) | ((1'b1 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_out))) begin
            OUTPUT_STREAM_V_data_V_1_sel_rd <= ~OUTPUT_STREAM_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in))) begin
            OUTPUT_STREAM_V_data_V_1_sel_wr <= ~OUTPUT_STREAM_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_out))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_rd <= ~OUTPUT_STREAM_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_wr <= ~OUTPUT_STREAM_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_out))) begin
            OUTPUT_STREAM_V_id_V_1_sel_rd <= ~OUTPUT_STREAM_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in))) begin
            OUTPUT_STREAM_V_id_V_1_sel_wr <= ~OUTPUT_STREAM_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_out))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_rd <= ~OUTPUT_STREAM_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_wr <= ~OUTPUT_STREAM_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_out))) begin
            OUTPUT_STREAM_V_last_V_1_sel_rd <= ~OUTPUT_STREAM_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in))) begin
            OUTPUT_STREAM_V_last_V_1_sel_wr <= ~OUTPUT_STREAM_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_out))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_rd <= ~OUTPUT_STREAM_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_wr <= ~OUTPUT_STREAM_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_out))) begin
            OUTPUT_STREAM_V_user_V_1_sel_rd <= ~OUTPUT_STREAM_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in))) begin
            OUTPUT_STREAM_V_user_V_1_sel_wr <= ~OUTPUT_STREAM_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        updateThreshold_V_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state56) & (or_cond_reg_948 == 1'd1) & (tmp_13_fu_784_p2 == 1'd1))) begin
            updateThreshold_V_preg <= 1'd1;
        end else if (((1'b1 == ap_CS_fsm_state4) & (or_cond_fu_537_p2 == 1'd0))) begin
            updateThreshold_V_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (or_cond1_fu_668_p2 == 1'd1) & (exitcond1_fu_645_p2 == 1'd1))) begin
        computedScore1_reg_387 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state55) & (or_cond1_reg_1041 == 1'd0))) begin
        computedScore1_reg_387 <= {{tmp_37_fu_758_p2[31:18]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd1))) begin
        count1_reg_423 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        count1_reg_423 <= count_2_reg_1108;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (tmp_2_fu_492_p2 == 1'd1))) begin
        count_reg_272 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0))) begin
        count_reg_272 <= count_1_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        probability_over_thr_reg_375 <= count_pixels_over_th_reg_1050;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_15_fu_603_p2 == 1'd1))) begin
        probability_over_thr_reg_375 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd0))) begin
        probability_under_th_reg_342 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        probability_under_th_reg_342 <= count_pixels_under_t_reg_1017;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd1))) begin
        record_id_reg_399 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        record_id_reg_399 <= record_id_2_record_i_fu_856_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd1))) begin
        record_reg_411 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        record_reg_411 <= record_2_record_fu_864_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd0))) begin
        scoreIter_1_reg_319 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        scoreIter_1_reg_319 <= scoreIter_4_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        scoreIter_2_in_reg_354 <= scoreIter_2_reg_1027;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_15_fu_603_p2 == 1'd1))) begin
        scoreIter_2_in_reg_354 <= tmp_19_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        scoreIter_reg_295 <= scoreIter_3_reg_955;
    end else if (((1'b1 == ap_CS_fsm_state4) & (or_cond_fu_537_p2 == 1'd1))) begin
        scoreIter_reg_295 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_over_threshold_reg_363 <= sum_over_threshold_1_fu_701_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_15_fu_603_p2 == 1'd1))) begin
        sum_over_threshold_reg_363 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_reg_283 <= sum_1_fu_584_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (or_cond_fu_537_p2 == 1'd1))) begin
        sum_reg_283 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd0))) begin
        sum_under_threshold_reg_330 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_under_threshold_reg_330 <= sum_under_threshold_1_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        threshold_1_reg_307 <= tmp_39_fu_778_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_543_p2 == 1'd1))) begin
        threshold_1_reg_307 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        if ((1'b1 == ap_condition_1237)) begin
            width_count_new_reg_435 <= tmp_22_fu_806_p2;
        end else if ((1'b1 == ap_condition_1232)) begin
            width_count_new_reg_435 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_A)) begin
        INPUT_STREAM_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_B)) begin
        INPUT_STREAM_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_A)) begin
        INPUT_STREAM_V_dest_V_0_payload_A <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_B)) begin
        INPUT_STREAM_V_dest_V_0_payload_B <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_A)) begin
        INPUT_STREAM_V_id_V_0_payload_A <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_B)) begin
        INPUT_STREAM_V_id_V_0_payload_B <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_A)) begin
        INPUT_STREAM_V_keep_V_0_payload_A <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_B)) begin
        INPUT_STREAM_V_keep_V_0_payload_B <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_A)) begin
        INPUT_STREAM_V_last_V_0_payload_A <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_B)) begin
        INPUT_STREAM_V_last_V_0_payload_B <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_A)) begin
        INPUT_STREAM_V_strb_V_0_payload_A <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_B)) begin
        INPUT_STREAM_V_strb_V_0_payload_B <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_A)) begin
        INPUT_STREAM_V_user_V_0_payload_A <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_B)) begin
        INPUT_STREAM_V_user_V_0_payload_B <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_A)) begin
        OUTPUT_STREAM_V_data_V_1_payload_A <= tmp_data_V_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_B)) begin
        OUTPUT_STREAM_V_data_V_1_payload_B <= tmp_data_V_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_A)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_A <= tmp_dest_V_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_B)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_B <= tmp_dest_V_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_A)) begin
        OUTPUT_STREAM_V_id_V_1_payload_A <= tmp_id_V_reg_909;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_B)) begin
        OUTPUT_STREAM_V_id_V_1_payload_B <= tmp_id_V_reg_909;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_A)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_A <= tmp_keep_V_reg_889;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_B)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_B <= tmp_keep_V_reg_889;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_A)) begin
        OUTPUT_STREAM_V_last_V_1_payload_A <= tmp_last_V_reg_904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_B)) begin
        OUTPUT_STREAM_V_last_V_1_payload_B <= tmp_last_V_reg_904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_A)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_A <= tmp_strb_V_reg_894;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_B)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_B <= tmp_strb_V_reg_894;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_A)) begin
        OUTPUT_STREAM_V_user_V_1_payload_A <= tmp_user_V_reg_899;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_B)) begin
        OUTPUT_STREAM_V_user_V_1_payload_B <= tmp_user_V_reg_899;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io) & (or_cond_reg_948 == 1'd1))) begin
        count_2_reg_1108 <= count_2_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        count_pixels_over_th_reg_1050 <= count_pixels_over_th_fu_695_p2;
        tmp_29_reg_1045 <= tmp_29_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        count_pixels_under_t_reg_1017 <= count_pixels_under_t_fu_628_p2;
        tmp_21_reg_1012 <= tmp_21_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io) & (((tmp_23_fu_811_p2 == 1'd1) & (or_cond_reg_948 == 1'd0)) | ((tmp_13_fu_784_p2 == 1'd1) & (tmp_23_fu_811_p2 == 1'd1))))) begin
        height_count <= p_s_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_count_load_reg_925 <= height_count;
        tmp_2_reg_931 <= tmp_2_fu_492_p2;
        tmp_data_V_reg_883 <= INPUT_STREAM_V_data_V_0_data_out;
        tmp_dest_V_reg_914 <= INPUT_STREAM_V_dest_V_0_data_out;
        tmp_id_V_reg_909 <= INPUT_STREAM_V_id_V_0_data_out;
        tmp_keep_V_reg_889 <= INPUT_STREAM_V_keep_V_0_data_out;
        tmp_last_V_reg_904 <= INPUT_STREAM_V_last_V_0_data_out;
        tmp_strb_V_reg_894 <= INPUT_STREAM_V_strb_V_0_data_out;
        tmp_user_V_reg_899 <= INPUT_STREAM_V_user_V_0_data_out;
        width_count_load_reg_919 <= width_count;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_645_p2 == 1'd1))) begin
        or_cond1_reg_1041 <= or_cond1_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_cond_reg_948 <= or_cond_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_446 <= values_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        scoreIter_2_reg_1027 <= scoreIter_2_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        scoreIter_3_reg_955 <= scoreIter_3_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        scoreIter_4_reg_997 <= scoreIter_4_fu_608_p2;
        tmp_14_reg_989[8 : 0] <= tmp_14_fu_599_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        threshold_1_cast4_ca_reg_981[7 : 0] <= threshold_1_cast4_ca_fu_589_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp1_reg_1075 <= tmp1_fu_735_p2;
        tmp2_reg_1085 <= tmp2_fu_744_p2;
        tmp_36_cast_reg_1070 <= tmp_36_cast_fu_732_p1;
        tmp_40_cast_reg_1080 <= tmp_40_cast_fu_741_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_543_p2 == 1'd1))) begin
        tmp_10_cast_reg_965[13 : 0] <= tmp_10_cast_fu_570_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_12_reg_971 <= tmp_12_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_33_reg_1060 <= tmp_33_fu_718_p2;
        tmp_35_reg_1065 <= tmp_35_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_34_reg_1090 <= tmp_34_fu_750_p2;
        tmp_36_reg_1095 <= tmp_36_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_3_fu_498_p2 == 1'd1) | (tmp_2_reg_931 == 1'd0)))) begin
        values_addr_1_reg_943 <= tmp_6_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state58))) begin
        width_count <= width_count_new_reg_435;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state[1'd0];
    end else begin
        INPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_sel)) begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_sel)) begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_sel)) begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_sel)) begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_sel)) begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_sel)) begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_sel)) begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((1'b1 == ap_CS_fsm_state56) & ((tmp_13_fu_784_p2 == 1'd1) | (or_cond_reg_948 == 1'd0))))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state[1'd1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_sel)) begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_sel)) begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_sel)) begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_sel)) begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_sel)) begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_sel)) begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_sel)) begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op300_write_state56 == 1'b1) & (1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io))) begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) & (or_cond1_reg_1041 == 1'd0))) begin
        ap_phi_mux_computedScore1_phi_fu_391_p4 = {{tmp_37_fu_758_p2[31:18]}};
    end else begin
        ap_phi_mux_computedScore1_phi_fu_391_p4 = computedScore1_reg_387;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io) & (or_cond_reg_948 == 1'd1) & (tmp_13_fu_784_p2 == 1'd1))) begin
        best_threshold_ap_vld = 1'b1;
    end else begin
        best_threshold_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_645_p2 == 1'd1) & (or_cond1_fu_668_p2 == 1'd0))) begin
        grp_fu_674_ap_start = 1'b1;
    end else begin
        grp_fu_674_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_645_p2 == 1'd1) & (or_cond1_fu_668_p2 == 1'd0))) begin
        grp_fu_680_ap_start = 1'b1;
    end else begin
        grp_fu_680_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        scores_address0 = tmp_17_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        scores_address0 = tmp_38_fu_773_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        scores_address0 = tmp_4_fu_510_p1;
    end else begin
        scores_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state55) | ((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io)))) begin
        scores_ce0 = 1'b1;
    end else begin
        scores_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        scores_d0 = ap_phi_mux_computedScore1_phi_fu_391_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        scores_d0 = 14'd0;
    end else begin
        scores_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0)))) begin
        scores_we0 = 1'b1;
    end else begin
        scores_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (or_cond_reg_948 == 1'd1) & (tmp_13_fu_784_p2 == 1'd1))) begin
        updateThreshold_V = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (or_cond_fu_537_p2 == 1'd0))) begin
        updateThreshold_V = 1'd0;
    end else begin
        updateThreshold_V = updateThreshold_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        values_address0 = tmp_27_fu_651_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        values_address0 = tmp_20_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        values_address0 = tmp_10_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        values_address0 = values_addr_1_reg_943;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((tmp_3_fu_498_p2 == 1'd1) | (tmp_2_reg_931 == 1'd0)))) begin
        values_address0 = tmp_6_fu_516_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0))) begin
        values_address0 = tmp_4_fu_510_p1;
    end else begin
        values_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & ((tmp_3_fu_498_p2 == 1'd1) | (tmp_2_reg_931 == 1'd0))) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0)))) begin
        values_ce0 = 1'b1;
    end else begin
        values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        values_d0 = tmp_7_fu_520_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0))) begin
        values_d0 = 32'd0;
    end else begin
        values_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_reg_931 == 1'd1) & (tmp_3_fu_498_p2 == 1'd0)))) begin
        values_we0 = 1'b1;
    end else begin
        values_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((tmp_3_fu_498_p2 == 1'd1) | (tmp_2_reg_931 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (or_cond_fu_537_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_543_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_593_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_15_fu_603_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (or_cond1_fu_668_p2 == 1'd1) & (exitcond1_fu_645_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_645_p2 == 1'd1) & (or_cond1_fu_668_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io) & ((tmp_13_fu_784_p2 == 1'd1) | (or_cond_reg_948 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_block_state56_io) & (or_cond_reg_948 == 1'd1) & (tmp_13_fu_784_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state58 : begin
            if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_load_A = (~INPUT_STREAM_V_data_V_0_sel_wr & INPUT_STREAM_V_data_V_0_state_cmp_full);

assign INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_state_cmp_full & INPUT_STREAM_V_data_V_0_sel_wr);

assign INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd;

assign INPUT_STREAM_V_data_V_0_state_cmp_full = ((INPUT_STREAM_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state[1'd0];

assign INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_dest_V_0_load_A = (~INPUT_STREAM_V_dest_V_0_sel_wr & INPUT_STREAM_V_dest_V_0_state_cmp_full);

assign INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_state_cmp_full & INPUT_STREAM_V_dest_V_0_sel_wr);

assign INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd;

assign INPUT_STREAM_V_dest_V_0_state_cmp_full = ((INPUT_STREAM_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state[1'd0];

assign INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state[1'd1];

assign INPUT_STREAM_V_id_V_0_load_A = (~INPUT_STREAM_V_id_V_0_sel_wr & INPUT_STREAM_V_id_V_0_state_cmp_full);

assign INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_state_cmp_full & INPUT_STREAM_V_id_V_0_sel_wr);

assign INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd;

assign INPUT_STREAM_V_id_V_0_state_cmp_full = ((INPUT_STREAM_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state[1'd0];

assign INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state[1'd1];

assign INPUT_STREAM_V_keep_V_0_load_A = (~INPUT_STREAM_V_keep_V_0_sel_wr & INPUT_STREAM_V_keep_V_0_state_cmp_full);

assign INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_state_cmp_full & INPUT_STREAM_V_keep_V_0_sel_wr);

assign INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd;

assign INPUT_STREAM_V_keep_V_0_state_cmp_full = ((INPUT_STREAM_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state[1'd0];

assign INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state[1'd1];

assign INPUT_STREAM_V_last_V_0_load_A = (~INPUT_STREAM_V_last_V_0_sel_wr & INPUT_STREAM_V_last_V_0_state_cmp_full);

assign INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_state_cmp_full & INPUT_STREAM_V_last_V_0_sel_wr);

assign INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd;

assign INPUT_STREAM_V_last_V_0_state_cmp_full = ((INPUT_STREAM_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state[1'd0];

assign INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state[1'd1];

assign INPUT_STREAM_V_strb_V_0_load_A = (~INPUT_STREAM_V_strb_V_0_sel_wr & INPUT_STREAM_V_strb_V_0_state_cmp_full);

assign INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_state_cmp_full & INPUT_STREAM_V_strb_V_0_sel_wr);

assign INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd;

assign INPUT_STREAM_V_strb_V_0_state_cmp_full = ((INPUT_STREAM_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state[1'd0];

assign INPUT_STREAM_V_user_V_0_ack_in = INPUT_STREAM_V_user_V_0_state[1'd1];

assign INPUT_STREAM_V_user_V_0_load_A = (~INPUT_STREAM_V_user_V_0_sel_wr & INPUT_STREAM_V_user_V_0_state_cmp_full);

assign INPUT_STREAM_V_user_V_0_load_B = (INPUT_STREAM_V_user_V_0_state_cmp_full & INPUT_STREAM_V_user_V_0_sel_wr);

assign INPUT_STREAM_V_user_V_0_sel = INPUT_STREAM_V_user_V_0_sel_rd;

assign INPUT_STREAM_V_user_V_0_state_cmp_full = ((INPUT_STREAM_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_user_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_user_V_0_vld_out = INPUT_STREAM_V_user_V_0_state[1'd0];

assign OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state[1'd1];

assign OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_data_V_1_load_A = (~OUTPUT_STREAM_V_data_V_1_sel_wr & OUTPUT_STREAM_V_data_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_state_cmp_full & OUTPUT_STREAM_V_data_V_1_sel_wr);

assign OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd;

assign OUTPUT_STREAM_V_data_V_1_state_cmp_full = ((OUTPUT_STREAM_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state[1'd0];

assign OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state[1'd1];

assign OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_dest_V_1_load_A = (~OUTPUT_STREAM_V_dest_V_1_sel_wr & OUTPUT_STREAM_V_dest_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full & OUTPUT_STREAM_V_dest_V_1_sel_wr);

assign OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd;

assign OUTPUT_STREAM_V_dest_V_1_state_cmp_full = ((OUTPUT_STREAM_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state[1'd1];

assign OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_id_V_1_load_A = (~OUTPUT_STREAM_V_id_V_1_sel_wr & OUTPUT_STREAM_V_id_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_state_cmp_full & OUTPUT_STREAM_V_id_V_1_sel_wr);

assign OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd;

assign OUTPUT_STREAM_V_id_V_1_state_cmp_full = ((OUTPUT_STREAM_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state[1'd0];

assign OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state[1'd1];

assign OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_keep_V_1_load_A = (~OUTPUT_STREAM_V_keep_V_1_sel_wr & OUTPUT_STREAM_V_keep_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full & OUTPUT_STREAM_V_keep_V_1_sel_wr);

assign OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd;

assign OUTPUT_STREAM_V_keep_V_1_state_cmp_full = ((OUTPUT_STREAM_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state[1'd0];

assign OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state[1'd1];

assign OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_last_V_1_load_A = (~OUTPUT_STREAM_V_last_V_1_sel_wr & OUTPUT_STREAM_V_last_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_state_cmp_full & OUTPUT_STREAM_V_last_V_1_sel_wr);

assign OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd;

assign OUTPUT_STREAM_V_last_V_1_state_cmp_full = ((OUTPUT_STREAM_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state[1'd0];

assign OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state[1'd1];

assign OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_strb_V_1_load_A = (~OUTPUT_STREAM_V_strb_V_1_sel_wr & OUTPUT_STREAM_V_strb_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full & OUTPUT_STREAM_V_strb_V_1_sel_wr);

assign OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd;

assign OUTPUT_STREAM_V_strb_V_1_state_cmp_full = ((OUTPUT_STREAM_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state[1'd0];

assign OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state[1'd1];

assign OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_user_V_1_load_A = (~OUTPUT_STREAM_V_user_V_1_sel_wr & OUTPUT_STREAM_V_user_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_state_cmp_full & OUTPUT_STREAM_V_user_V_1_sel_wr);

assign OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd;

assign OUTPUT_STREAM_V_user_V_1_state_cmp_full = ((OUTPUT_STREAM_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state56_io = ((ap_predicate_op300_write_state56 == 1'b1) & (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state58 = ((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_condition_1232 = (((tmp_23_fu_811_p2 == 1'd1) & (or_cond_reg_948 == 1'd0)) | ((tmp_13_fu_784_p2 == 1'd1) & (tmp_23_fu_811_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_1237 = (((or_cond_reg_948 == 1'd0) & (tmp_23_fu_811_p2 == 1'd0)) | ((tmp_13_fu_784_p2 == 1'd1) & (tmp_23_fu_811_p2 == 1'd0)));
end

always @ (*) begin
    ap_predicate_op300_write_state56 = ((tmp_13_fu_784_p2 == 1'd1) | (or_cond_reg_948 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign best_threshold = record_id_reg_399[7:0];

assign count_1_fu_504_p2 = (count_reg_272 + 9'd1);

assign count_2_fu_790_p2 = (count1_reg_423 + 9'd1);

assign count_pixels_over_th_fu_695_p0 = reg_446;

assign count_pixels_over_th_fu_695_p2 = ($signed(count_pixels_over_th_fu_695_p0) + $signed(probability_over_thr_reg_375));

assign count_pixels_under_t_fu_628_p0 = reg_446;

assign count_pixels_under_t_fu_628_p2 = ($signed(count_pixels_under_t_fu_628_p0) + $signed(probability_under_th_reg_342));

assign exitcond1_fu_645_p2 = ((scoreIter_2_in_reg_354 == 16'd255) ? 1'b1 : 1'b0);

assign exitcond_fu_593_p2 = ((threshold_1_reg_307 == 8'd255) ? 1'b1 : 1'b0);

assign meanOverThreshold_fu_710_p1 = grp_fu_680_p2[15:0];

assign meanUnderThreshold_fu_706_p1 = grp_fu_674_p2[15:0];

assign or_cond1_fu_668_p2 = (tmp_30_fu_662_p2 | tmp_26_fu_656_p2);

assign or_cond_fu_537_p2 = (tmp_9_fu_532_p2 & tmp_8_fu_527_p2);

assign p_s_fu_828_p3 = ((tmp_25_fu_822_p2[0:0] === 1'b1) ? 32'd0 : tmp_24_fu_817_p2);

assign record_1_fu_842_p1 = scores_q0;

assign record_2_record_fu_864_p3 = ((tmp_18_fu_846_p2[0:0] === 1'b1) ? record_1_fu_842_p1 : record_reg_411);

assign record_id_1_fu_852_p1 = count1_reg_423;

assign record_id_2_record_i_fu_856_p3 = ((tmp_18_fu_846_p2[0:0] === 1'b1) ? record_id_1_fu_852_p1 : record_id_reg_399);

assign scoreIter_2_fu_639_p2 = (scoreIter_2_in_reg_354 + 16'd1);

assign scoreIter_3_fu_549_p2 = (scoreIter_reg_295 + 9'd1);

assign scoreIter_4_fu_608_p2 = (scoreIter_1_reg_319 + 9'd1);

assign sum_1_fu_584_p2 = (tmp_12_reg_971 + sum_reg_283);

assign sum_over_threshold_1_fu_701_p2 = (tmp_29_reg_1045 + sum_over_threshold_reg_363);

assign sum_under_threshold_1_fu_634_p2 = (tmp_21_reg_1012 + sum_under_threshold_reg_330);

assign threshold_1_cast4_ca_fu_589_p1 = threshold_1_reg_307;

assign tmp1_fu_735_p0 = tmp_33_reg_1060;

assign tmp1_fu_735_p2 = ($signed(tmp1_fu_735_p0) * $signed(probability_under_th_reg_342));

assign tmp2_fu_744_p0 = tmp_35_reg_1065;

assign tmp2_fu_744_p2 = ($signed(tmp2_fu_744_p0) * $signed(probability_over_thr_reg_375));

assign tmp_10_cast_fu_570_p1 = tmp_5_fu_560_p4;

assign tmp_10_fu_555_p1 = scoreIter_reg_295;

assign tmp_12_fu_578_p0 = reg_446;

assign tmp_12_fu_578_p1 = tmp_12_fu_578_p10;

assign tmp_12_fu_578_p10 = scoreIter_reg_295;

assign tmp_12_fu_578_p2 = ($signed(tmp_12_fu_578_p0) * $signed({{1'b0}, {tmp_12_fu_578_p1}}));

assign tmp_13_fu_784_p2 = ((count1_reg_423 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_14_fu_599_p1 = scoreIter_1_reg_319;

assign tmp_15_fu_603_p2 = ((scoreIter_1_reg_319 > threshold_1_cast4_ca_reg_981) ? 1'b1 : 1'b0);

assign tmp_17_fu_796_p1 = count1_reg_423;

assign tmp_18_fu_846_p2 = ((record_1_fu_842_p1 > record_reg_411) ? 1'b1 : 1'b0);

assign tmp_19_fu_619_p1 = threshold_1_reg_307;

assign tmp_1_fu_486_p2 = (width_count | height_count);

assign tmp_20_fu_614_p1 = scoreIter_1_reg_319;

assign tmp_21_fu_623_p0 = reg_446;

assign tmp_21_fu_623_p1 = tmp_14_reg_989;

assign tmp_21_fu_623_p2 = ($signed(tmp_21_fu_623_p0) * $signed({{1'b0}, {tmp_21_fu_623_p1}}));

assign tmp_22_fu_806_p2 = (width_count_load_reg_919 + 32'd1);

assign tmp_23_fu_811_p2 = ((tmp_22_fu_806_p2 == 32'd512) ? 1'b1 : 1'b0);

assign tmp_24_fu_817_p2 = (height_count_load_reg_925 + 32'd1);

assign tmp_25_fu_822_p2 = ((tmp_24_fu_817_p2 == 32'd512) ? 1'b1 : 1'b0);

assign tmp_26_fu_656_p2 = ((probability_over_thr_reg_375 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_27_fu_651_p1 = scoreIter_2_fu_639_p2;

assign tmp_29_fu_689_p0 = reg_446;

assign tmp_29_fu_689_p1 = tmp_29_fu_689_p10;

assign tmp_29_fu_689_p10 = scoreIter_2_reg_1027;

assign tmp_29_fu_689_p2 = ($signed(tmp_29_fu_689_p0) * $signed({{1'b0}, {tmp_29_fu_689_p1}}));

assign tmp_2_fu_492_p2 = ((tmp_1_fu_486_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_30_fu_662_p2 = ((probability_under_th_reg_342 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_33_fu_718_p2 = (tmp_35_cast_fu_714_p1 - tmp_10_cast_reg_965);

assign tmp_34_fu_750_p0 = tmp_36_cast_reg_1070;

assign tmp_34_fu_750_p2 = ($signed(tmp_34_fu_750_p0) * $signed(tmp1_reg_1075));

assign tmp_35_cast_fu_714_p1 = meanUnderThreshold_fu_706_p1;

assign tmp_35_fu_727_p2 = (tmp_39_cast_fu_723_p1 - tmp_10_cast_reg_965);

assign tmp_36_cast_fu_732_p1 = $signed(tmp_33_reg_1060);

assign tmp_36_fu_754_p0 = tmp_40_cast_reg_1080;

assign tmp_36_fu_754_p2 = ($signed(tmp_36_fu_754_p0) * $signed(tmp2_reg_1085));

assign tmp_37_fu_758_p2 = (tmp_34_reg_1090 + tmp_36_reg_1095);

assign tmp_38_fu_773_p1 = threshold_1_reg_307;

assign tmp_39_cast_fu_723_p1 = meanOverThreshold_fu_710_p1;

assign tmp_39_fu_778_p2 = (threshold_1_reg_307 + 8'd1);

assign tmp_3_fu_498_p2 = ((count_reg_272 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_40_cast_fu_741_p1 = $signed(tmp_35_reg_1065);

assign tmp_4_fu_510_p1 = count_reg_272;

assign tmp_5_fu_560_p4 = {{sum_reg_283[31:18]}};

assign tmp_6_fu_516_p1 = tmp_data_V_reg_883;

assign tmp_7_fu_520_p2 = (reg_446 + 32'd1);

assign tmp_8_fu_527_p2 = ((width_count_load_reg_919 == 32'd511) ? 1'b1 : 1'b0);

assign tmp_9_fu_532_p2 = ((height_count_load_reg_925 == 32'd511) ? 1'b1 : 1'b0);

assign tmp_s_fu_543_p2 = ((scoreIter_reg_295 == 9'd256) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_10_cast_reg_965[16:14] <= 3'b000;
    threshold_1_cast4_ca_reg_981[8] <= 1'b0;
    tmp_14_reg_989[31:9] <= 23'b00000000000000000000000;
end

endmodule //otsu
