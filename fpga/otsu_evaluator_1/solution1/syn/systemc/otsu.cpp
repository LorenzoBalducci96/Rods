// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "otsu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic otsu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic otsu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<58> otsu::ap_ST_fsm_state1 = "1";
const sc_lv<58> otsu::ap_ST_fsm_state2 = "10";
const sc_lv<58> otsu::ap_ST_fsm_state3 = "100";
const sc_lv<58> otsu::ap_ST_fsm_state4 = "1000";
const sc_lv<58> otsu::ap_ST_fsm_state5 = "10000";
const sc_lv<58> otsu::ap_ST_fsm_state6 = "100000";
const sc_lv<58> otsu::ap_ST_fsm_state7 = "1000000";
const sc_lv<58> otsu::ap_ST_fsm_state8 = "10000000";
const sc_lv<58> otsu::ap_ST_fsm_state9 = "100000000";
const sc_lv<58> otsu::ap_ST_fsm_state10 = "1000000000";
const sc_lv<58> otsu::ap_ST_fsm_state11 = "10000000000";
const sc_lv<58> otsu::ap_ST_fsm_state12 = "100000000000";
const sc_lv<58> otsu::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<58> otsu::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> otsu::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool otsu::ap_const_boolean_1 = true;
const sc_lv<1> otsu::ap_const_lv1_0 = "0";
const sc_lv<1> otsu::ap_const_lv1_1 = "1";
const sc_lv<2> otsu::ap_const_lv2_0 = "00";
const sc_lv<2> otsu::ap_const_lv2_2 = "10";
const sc_lv<2> otsu::ap_const_lv2_3 = "11";
const sc_lv<2> otsu::ap_const_lv2_1 = "1";
const sc_lv<32> otsu::ap_const_lv32_37 = "110111";
const sc_lv<32> otsu::ap_const_lv32_39 = "111001";
const sc_lv<32> otsu::ap_const_lv32_2 = "10";
const sc_lv<32> otsu::ap_const_lv32_5 = "101";
const sc_lv<32> otsu::ap_const_lv32_A = "1010";
const sc_lv<32> otsu::ap_const_lv32_E = "1110";
const sc_lv<32> otsu::ap_const_lv32_1 = "1";
const sc_lv<32> otsu::ap_const_lv32_3 = "11";
const sc_lv<32> otsu::ap_const_lv32_4 = "100";
const sc_lv<32> otsu::ap_const_lv32_6 = "110";
const sc_lv<32> otsu::ap_const_lv32_7 = "111";
const sc_lv<32> otsu::ap_const_lv32_8 = "1000";
const sc_lv<32> otsu::ap_const_lv32_9 = "1001";
const sc_lv<32> otsu::ap_const_lv32_B = "1011";
const sc_lv<32> otsu::ap_const_lv32_C = "1100";
const sc_lv<32> otsu::ap_const_lv32_D = "1101";
const sc_lv<32> otsu::ap_const_lv32_F = "1111";
const sc_lv<32> otsu::ap_const_lv32_10 = "10000";
const sc_lv<32> otsu::ap_const_lv32_33 = "110011";
const sc_lv<32> otsu::ap_const_lv32_34 = "110100";
const sc_lv<32> otsu::ap_const_lv32_35 = "110101";
const sc_lv<32> otsu::ap_const_lv32_36 = "110110";
const bool otsu::ap_const_boolean_0 = false;
const sc_lv<32> otsu::ap_const_lv32_38 = "111000";
const sc_lv<9> otsu::ap_const_lv9_0 = "000000000";
const sc_lv<8> otsu::ap_const_lv8_1 = "1";
const sc_lv<14> otsu::ap_const_lv14_0 = "00000000000000";
const sc_lv<9> otsu::ap_const_lv9_100 = "100000000";
const sc_lv<9> otsu::ap_const_lv9_1 = "1";
const sc_lv<32> otsu::ap_const_lv32_1FF = "111111111";
const sc_lv<32> otsu::ap_const_lv32_12 = "10010";
const sc_lv<32> otsu::ap_const_lv32_1F = "11111";
const sc_lv<8> otsu::ap_const_lv8_FF = "11111111";
const sc_lv<16> otsu::ap_const_lv16_1 = "1";
const sc_lv<16> otsu::ap_const_lv16_FF = "11111111";
const sc_lv<32> otsu::ap_const_lv32_200 = "1000000000";

otsu::otsu(sc_module_name name) : sc_module(name), mVcdFile(0) {
    values_U = new otsu_values("values_U");
    values_U->clk(ap_clk);
    values_U->reset(ap_rst_n_inv);
    values_U->address0(values_address0);
    values_U->ce0(values_ce0);
    values_U->we0(values_we0);
    values_U->d0(values_d0);
    values_U->q0(values_q0);
    scores_U = new otsu_scores("scores_U");
    scores_U->clk(ap_clk);
    scores_U->reset(ap_rst_n_inv);
    scores_U->address0(scores_address0);
    scores_U->ce0(scores_ce0);
    scores_U->we0(scores_we0);
    scores_U->d0(scores_d0);
    scores_U->q0(scores_q0);
    otsu_udiv_32ns_32bkb_U1 = new otsu_udiv_32ns_32bkb<1,36,32,32,16>("otsu_udiv_32ns_32bkb_U1");
    otsu_udiv_32ns_32bkb_U1->clk(ap_clk);
    otsu_udiv_32ns_32bkb_U1->reset(ap_rst_n_inv);
    otsu_udiv_32ns_32bkb_U1->start(grp_fu_674_ap_start);
    otsu_udiv_32ns_32bkb_U1->done(grp_fu_674_ap_done);
    otsu_udiv_32ns_32bkb_U1->din0(sum_under_threshold_reg_330);
    otsu_udiv_32ns_32bkb_U1->din1(probability_under_th_reg_342);
    otsu_udiv_32ns_32bkb_U1->ce(ap_var_for_const0);
    otsu_udiv_32ns_32bkb_U1->dout(grp_fu_674_p2);
    otsu_udiv_32ns_32bkb_U2 = new otsu_udiv_32ns_32bkb<1,36,32,32,16>("otsu_udiv_32ns_32bkb_U2");
    otsu_udiv_32ns_32bkb_U2->clk(ap_clk);
    otsu_udiv_32ns_32bkb_U2->reset(ap_rst_n_inv);
    otsu_udiv_32ns_32bkb_U2->start(grp_fu_680_ap_start);
    otsu_udiv_32ns_32bkb_U2->done(grp_fu_680_ap_done);
    otsu_udiv_32ns_32bkb_U2->din0(sum_over_threshold_reg_363);
    otsu_udiv_32ns_32bkb_U2->din1(probability_over_thr_reg_375);
    otsu_udiv_32ns_32bkb_U2->ce(ap_var_for_const0);
    otsu_udiv_32ns_32bkb_U2->dout(grp_fu_680_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_STREAM_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_data_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_sel);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_sel);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_id_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_sel);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_sel);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_last_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_sel);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_sel);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_user_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_user_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_user_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_sel);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA_blk_n);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_OUTPUT_STREAM_TDEST);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TID);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TKEEP);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TLAST);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TSTRB);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TUSER);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TVALID);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_predicate_op300_write_state56 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state56_io);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op300_write_state56 );

    SC_METHOD(thread_ap_block_state58);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_1232);
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( tmp_23_fu_811_p2 );

    SC_METHOD(thread_ap_condition_1237);
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( tmp_23_fu_811_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_computedScore1_phi_fu_391_p4);
    sensitive << ( or_cond1_reg_1041 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( computedScore1_reg_387 );
    sensitive << ( tmp_37_fu_758_p2 );

    SC_METHOD(thread_ap_predicate_op300_write_state56);
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_best_threshold);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( record_id_reg_399 );

    SC_METHOD(thread_best_threshold_ap_vld);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_count_1_fu_504_p2);
    sensitive << ( count_reg_272 );

    SC_METHOD(thread_count_2_fu_790_p2);
    sensitive << ( count1_reg_423 );

    SC_METHOD(thread_count_pixels_over_th_fu_695_p0);
    sensitive << ( reg_446 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_count_pixels_over_th_fu_695_p2);
    sensitive << ( probability_over_thr_reg_375 );
    sensitive << ( count_pixels_over_th_fu_695_p0 );

    SC_METHOD(thread_count_pixels_under_t_fu_628_p0);
    sensitive << ( reg_446 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_count_pixels_under_t_fu_628_p2);
    sensitive << ( probability_under_th_reg_342 );
    sensitive << ( count_pixels_under_t_fu_628_p0 );

    SC_METHOD(thread_exitcond1_fu_645_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( scoreIter_2_in_reg_354 );

    SC_METHOD(thread_exitcond_fu_593_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( threshold_1_reg_307 );

    SC_METHOD(thread_grp_fu_674_ap_start);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond1_fu_645_p2 );
    sensitive << ( or_cond1_fu_668_p2 );

    SC_METHOD(thread_grp_fu_680_ap_start);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond1_fu_645_p2 );
    sensitive << ( or_cond1_fu_668_p2 );

    SC_METHOD(thread_meanOverThreshold_fu_710_p1);
    sensitive << ( grp_fu_680_p2 );

    SC_METHOD(thread_meanUnderThreshold_fu_706_p1);
    sensitive << ( grp_fu_674_p2 );

    SC_METHOD(thread_or_cond1_fu_668_p2);
    sensitive << ( tmp_26_fu_656_p2 );
    sensitive << ( tmp_30_fu_662_p2 );

    SC_METHOD(thread_or_cond_fu_537_p2);
    sensitive << ( tmp_8_fu_527_p2 );
    sensitive << ( tmp_9_fu_532_p2 );

    SC_METHOD(thread_p_s_fu_828_p3);
    sensitive << ( tmp_24_fu_817_p2 );
    sensitive << ( tmp_25_fu_822_p2 );

    SC_METHOD(thread_record_1_fu_842_p1);
    sensitive << ( scores_q0 );

    SC_METHOD(thread_record_2_record_fu_864_p3);
    sensitive << ( record_reg_411 );
    sensitive << ( record_1_fu_842_p1 );
    sensitive << ( tmp_18_fu_846_p2 );

    SC_METHOD(thread_record_id_1_fu_852_p1);
    sensitive << ( count1_reg_423 );

    SC_METHOD(thread_record_id_2_record_i_fu_856_p3);
    sensitive << ( record_id_reg_399 );
    sensitive << ( tmp_18_fu_846_p2 );
    sensitive << ( record_id_1_fu_852_p1 );

    SC_METHOD(thread_scoreIter_2_fu_639_p2);
    sensitive << ( scoreIter_2_in_reg_354 );

    SC_METHOD(thread_scoreIter_3_fu_549_p2);
    sensitive << ( scoreIter_reg_295 );

    SC_METHOD(thread_scoreIter_4_fu_608_p2);
    sensitive << ( scoreIter_1_reg_319 );

    SC_METHOD(thread_scores_address0);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( tmp_4_fu_510_p1 );
    sensitive << ( tmp_38_fu_773_p1 );
    sensitive << ( tmp_17_fu_796_p1 );

    SC_METHOD(thread_scores_ce0);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_block_state56_io );

    SC_METHOD(thread_scores_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_phi_mux_computedScore1_phi_fu_391_p4 );

    SC_METHOD(thread_scores_we0);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( ap_CS_fsm_state55 );

    SC_METHOD(thread_sum_1_fu_584_p2);
    sensitive << ( tmp_12_reg_971 );
    sensitive << ( sum_reg_283 );

    SC_METHOD(thread_sum_over_threshold_1_fu_701_p2);
    sensitive << ( tmp_29_reg_1045 );
    sensitive << ( sum_over_threshold_reg_363 );

    SC_METHOD(thread_sum_under_threshold_1_fu_634_p2);
    sensitive << ( tmp_21_reg_1012 );
    sensitive << ( sum_under_threshold_reg_330 );

    SC_METHOD(thread_threshold_1_cast4_ca_fu_589_p1);
    sensitive << ( threshold_1_reg_307 );

    SC_METHOD(thread_tmp1_fu_735_p0);
    sensitive << ( tmp_33_reg_1060 );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_tmp1_fu_735_p2);
    sensitive << ( probability_under_th_reg_342 );
    sensitive << ( tmp1_fu_735_p0 );

    SC_METHOD(thread_tmp2_fu_744_p0);
    sensitive << ( tmp_35_reg_1065 );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_tmp2_fu_744_p2);
    sensitive << ( probability_over_thr_reg_375 );
    sensitive << ( tmp2_fu_744_p0 );

    SC_METHOD(thread_tmp_10_cast_fu_570_p1);
    sensitive << ( tmp_5_fu_560_p4 );

    SC_METHOD(thread_tmp_10_fu_555_p1);
    sensitive << ( scoreIter_reg_295 );

    SC_METHOD(thread_tmp_12_fu_578_p0);
    sensitive << ( reg_446 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_12_fu_578_p1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_12_fu_578_p10 );

    SC_METHOD(thread_tmp_12_fu_578_p10);
    sensitive << ( scoreIter_reg_295 );

    SC_METHOD(thread_tmp_12_fu_578_p2);
    sensitive << ( tmp_12_fu_578_p0 );
    sensitive << ( tmp_12_fu_578_p1 );

    SC_METHOD(thread_tmp_13_fu_784_p2);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_block_state56_io );
    sensitive << ( count1_reg_423 );

    SC_METHOD(thread_tmp_14_fu_599_p1);
    sensitive << ( scoreIter_1_reg_319 );

    SC_METHOD(thread_tmp_15_fu_603_p2);
    sensitive << ( threshold_1_cast4_ca_reg_981 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( scoreIter_1_reg_319 );

    SC_METHOD(thread_tmp_17_fu_796_p1);
    sensitive << ( count1_reg_423 );

    SC_METHOD(thread_tmp_18_fu_846_p2);
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( record_reg_411 );
    sensitive << ( record_1_fu_842_p1 );

    SC_METHOD(thread_tmp_19_fu_619_p1);
    sensitive << ( threshold_1_reg_307 );

    SC_METHOD(thread_tmp_1_fu_486_p2);
    sensitive << ( width_count );
    sensitive << ( height_count );

    SC_METHOD(thread_tmp_20_fu_614_p1);
    sensitive << ( scoreIter_1_reg_319 );

    SC_METHOD(thread_tmp_21_fu_623_p0);
    sensitive << ( reg_446 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_tmp_21_fu_623_p1);
    sensitive << ( tmp_14_reg_989 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_tmp_21_fu_623_p2);
    sensitive << ( tmp_21_fu_623_p0 );
    sensitive << ( tmp_21_fu_623_p1 );

    SC_METHOD(thread_tmp_22_fu_806_p2);
    sensitive << ( width_count_load_reg_919 );

    SC_METHOD(thread_tmp_23_fu_811_p2);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_block_state56_io );
    sensitive << ( tmp_22_fu_806_p2 );

    SC_METHOD(thread_tmp_24_fu_817_p2);
    sensitive << ( height_count_load_reg_925 );

    SC_METHOD(thread_tmp_25_fu_822_p2);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_block_state56_io );
    sensitive << ( tmp_23_fu_811_p2 );
    sensitive << ( tmp_24_fu_817_p2 );

    SC_METHOD(thread_tmp_26_fu_656_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond1_fu_645_p2 );
    sensitive << ( probability_over_thr_reg_375 );

    SC_METHOD(thread_tmp_27_fu_651_p1);
    sensitive << ( scoreIter_2_fu_639_p2 );

    SC_METHOD(thread_tmp_29_fu_689_p0);
    sensitive << ( reg_446 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_tmp_29_fu_689_p1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_29_fu_689_p10 );

    SC_METHOD(thread_tmp_29_fu_689_p10);
    sensitive << ( scoreIter_2_reg_1027 );

    SC_METHOD(thread_tmp_29_fu_689_p2);
    sensitive << ( tmp_29_fu_689_p0 );
    sensitive << ( tmp_29_fu_689_p1 );

    SC_METHOD(thread_tmp_2_fu_492_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( tmp_1_fu_486_p2 );

    SC_METHOD(thread_tmp_30_fu_662_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond1_fu_645_p2 );
    sensitive << ( probability_under_th_reg_342 );

    SC_METHOD(thread_tmp_33_fu_718_p2);
    sensitive << ( tmp_10_cast_reg_965 );
    sensitive << ( tmp_35_cast_fu_714_p1 );

    SC_METHOD(thread_tmp_34_fu_750_p0);
    sensitive << ( tmp_36_cast_reg_1070 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_tmp_34_fu_750_p2);
    sensitive << ( tmp1_reg_1075 );
    sensitive << ( tmp_34_fu_750_p0 );

    SC_METHOD(thread_tmp_35_cast_fu_714_p1);
    sensitive << ( meanUnderThreshold_fu_706_p1 );

    SC_METHOD(thread_tmp_35_fu_727_p2);
    sensitive << ( tmp_10_cast_reg_965 );
    sensitive << ( tmp_39_cast_fu_723_p1 );

    SC_METHOD(thread_tmp_36_cast_fu_732_p1);
    sensitive << ( tmp_33_reg_1060 );

    SC_METHOD(thread_tmp_36_fu_754_p0);
    sensitive << ( tmp_40_cast_reg_1080 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_tmp_36_fu_754_p2);
    sensitive << ( tmp2_reg_1085 );
    sensitive << ( tmp_36_fu_754_p0 );

    SC_METHOD(thread_tmp_37_fu_758_p2);
    sensitive << ( tmp_34_reg_1090 );
    sensitive << ( tmp_36_reg_1095 );

    SC_METHOD(thread_tmp_38_fu_773_p1);
    sensitive << ( threshold_1_reg_307 );

    SC_METHOD(thread_tmp_39_cast_fu_723_p1);
    sensitive << ( meanOverThreshold_fu_710_p1 );

    SC_METHOD(thread_tmp_39_fu_778_p2);
    sensitive << ( threshold_1_reg_307 );

    SC_METHOD(thread_tmp_3_fu_498_p2);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( count_reg_272 );

    SC_METHOD(thread_tmp_40_cast_fu_741_p1);
    sensitive << ( tmp_35_reg_1065 );

    SC_METHOD(thread_tmp_4_fu_510_p1);
    sensitive << ( count_reg_272 );

    SC_METHOD(thread_tmp_5_fu_560_p4);
    sensitive << ( sum_reg_283 );

    SC_METHOD(thread_tmp_6_fu_516_p1);
    sensitive << ( tmp_data_V_reg_883 );

    SC_METHOD(thread_tmp_7_fu_520_p2);
    sensitive << ( reg_446 );

    SC_METHOD(thread_tmp_8_fu_527_p2);
    sensitive << ( width_count_load_reg_919 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_9_fu_532_p2);
    sensitive << ( height_count_load_reg_925 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_s_fu_543_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( scoreIter_reg_295 );

    SC_METHOD(thread_updateThreshold_V);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( or_cond_fu_537_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( updateThreshold_V_preg );

    SC_METHOD(thread_values_address0);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( values_addr_1_reg_943 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_4_fu_510_p1 );
    sensitive << ( tmp_6_fu_516_p1 );
    sensitive << ( tmp_10_fu_555_p1 );
    sensitive << ( tmp_20_fu_614_p1 );
    sensitive << ( tmp_27_fu_651_p1 );

    SC_METHOD(thread_values_ce0);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_values_d0);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_520_p2 );

    SC_METHOD(thread_values_we0);
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( tmp_13_fu_784_p2 );
    sensitive << ( or_cond_reg_948 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( tmp_2_reg_931 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_498_p2 );
    sensitive << ( or_cond_fu_537_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_s_fu_543_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_15_fu_603_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond1_fu_645_p2 );
    sensitive << ( or_cond1_fu_668_p2 );
    sensitive << ( ap_block_state56_io );
    sensitive << ( exitcond_fu_593_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000001";
    INPUT_STREAM_V_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_state = "00";
    INPUT_STREAM_V_keep_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_state = "00";
    INPUT_STREAM_V_strb_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_state = "00";
    INPUT_STREAM_V_user_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_user_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_user_V_0_state = "00";
    INPUT_STREAM_V_last_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_state = "00";
    INPUT_STREAM_V_id_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_state = "00";
    INPUT_STREAM_V_dest_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_state = "00";
    OUTPUT_STREAM_V_data_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_state = "00";
    OUTPUT_STREAM_V_keep_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_state = "00";
    OUTPUT_STREAM_V_strb_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_state = "00";
    OUTPUT_STREAM_V_user_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_state = "00";
    OUTPUT_STREAM_V_last_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_state = "00";
    OUTPUT_STREAM_V_id_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_state = "00";
    OUTPUT_STREAM_V_dest_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_state = "00";
    width_count = "00000000000000000000000000000000";
    height_count = "00000000000000000000000000000000";
    updateThreshold_V_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "otsu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA, "(port)OUTPUT_STREAM_TDATA");
    sc_trace(mVcdFile, OUTPUT_STREAM_TVALID, "(port)OUTPUT_STREAM_TVALID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TREADY, "(port)OUTPUT_STREAM_TREADY");
    sc_trace(mVcdFile, OUTPUT_STREAM_TKEEP, "(port)OUTPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, OUTPUT_STREAM_TSTRB, "(port)OUTPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, OUTPUT_STREAM_TUSER, "(port)OUTPUT_STREAM_TUSER");
    sc_trace(mVcdFile, OUTPUT_STREAM_TLAST, "(port)OUTPUT_STREAM_TLAST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TID, "(port)OUTPUT_STREAM_TID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDEST, "(port)OUTPUT_STREAM_TDEST");
    sc_trace(mVcdFile, best_threshold, "(port)best_threshold");
    sc_trace(mVcdFile, best_threshold_ap_vld, "(port)best_threshold_ap_vld");
    sc_trace(mVcdFile, updateThreshold_V, "(port)updateThreshold_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_data_out, "INPUT_STREAM_V_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_in, "INPUT_STREAM_V_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_out, "INPUT_STREAM_V_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_in, "INPUT_STREAM_V_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_out, "INPUT_STREAM_V_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_A, "INPUT_STREAM_V_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_B, "INPUT_STREAM_V_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_rd, "INPUT_STREAM_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_wr, "INPUT_STREAM_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel, "INPUT_STREAM_V_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_A, "INPUT_STREAM_V_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_B, "INPUT_STREAM_V_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state, "INPUT_STREAM_V_data_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state_cmp_full, "INPUT_STREAM_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_data_out, "INPUT_STREAM_V_keep_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_in, "INPUT_STREAM_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_out, "INPUT_STREAM_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_in, "INPUT_STREAM_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_out, "INPUT_STREAM_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_A, "INPUT_STREAM_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_B, "INPUT_STREAM_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_rd, "INPUT_STREAM_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_wr, "INPUT_STREAM_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel, "INPUT_STREAM_V_keep_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_A, "INPUT_STREAM_V_keep_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_B, "INPUT_STREAM_V_keep_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state, "INPUT_STREAM_V_keep_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state_cmp_full, "INPUT_STREAM_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_data_out, "INPUT_STREAM_V_strb_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_in, "INPUT_STREAM_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_out, "INPUT_STREAM_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_in, "INPUT_STREAM_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_out, "INPUT_STREAM_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_A, "INPUT_STREAM_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_B, "INPUT_STREAM_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_rd, "INPUT_STREAM_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_wr, "INPUT_STREAM_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel, "INPUT_STREAM_V_strb_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_A, "INPUT_STREAM_V_strb_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_B, "INPUT_STREAM_V_strb_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state, "INPUT_STREAM_V_strb_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state_cmp_full, "INPUT_STREAM_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_data_out, "INPUT_STREAM_V_user_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_vld_in, "INPUT_STREAM_V_user_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_vld_out, "INPUT_STREAM_V_user_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_ack_in, "INPUT_STREAM_V_user_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_ack_out, "INPUT_STREAM_V_user_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_payload_A, "INPUT_STREAM_V_user_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_payload_B, "INPUT_STREAM_V_user_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel_rd, "INPUT_STREAM_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel_wr, "INPUT_STREAM_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel, "INPUT_STREAM_V_user_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_load_A, "INPUT_STREAM_V_user_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_load_B, "INPUT_STREAM_V_user_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_state, "INPUT_STREAM_V_user_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_state_cmp_full, "INPUT_STREAM_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_data_out, "INPUT_STREAM_V_last_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_in, "INPUT_STREAM_V_last_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_out, "INPUT_STREAM_V_last_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_in, "INPUT_STREAM_V_last_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_out, "INPUT_STREAM_V_last_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_A, "INPUT_STREAM_V_last_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_B, "INPUT_STREAM_V_last_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_rd, "INPUT_STREAM_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_wr, "INPUT_STREAM_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel, "INPUT_STREAM_V_last_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_A, "INPUT_STREAM_V_last_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_B, "INPUT_STREAM_V_last_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state, "INPUT_STREAM_V_last_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state_cmp_full, "INPUT_STREAM_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_data_out, "INPUT_STREAM_V_id_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_in, "INPUT_STREAM_V_id_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_out, "INPUT_STREAM_V_id_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_in, "INPUT_STREAM_V_id_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_out, "INPUT_STREAM_V_id_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_A, "INPUT_STREAM_V_id_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_B, "INPUT_STREAM_V_id_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_rd, "INPUT_STREAM_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_wr, "INPUT_STREAM_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel, "INPUT_STREAM_V_id_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_A, "INPUT_STREAM_V_id_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_B, "INPUT_STREAM_V_id_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state, "INPUT_STREAM_V_id_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state_cmp_full, "INPUT_STREAM_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_data_out, "INPUT_STREAM_V_dest_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_in, "INPUT_STREAM_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_out, "INPUT_STREAM_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_in, "INPUT_STREAM_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_out, "INPUT_STREAM_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_A, "INPUT_STREAM_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_B, "INPUT_STREAM_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_rd, "INPUT_STREAM_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_wr, "INPUT_STREAM_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel, "INPUT_STREAM_V_dest_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_A, "INPUT_STREAM_V_dest_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_B, "INPUT_STREAM_V_dest_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state, "INPUT_STREAM_V_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state_cmp_full, "INPUT_STREAM_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_data_out, "OUTPUT_STREAM_V_data_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_in, "OUTPUT_STREAM_V_data_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_out, "OUTPUT_STREAM_V_data_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_in, "OUTPUT_STREAM_V_data_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_out, "OUTPUT_STREAM_V_data_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_A, "OUTPUT_STREAM_V_data_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_B, "OUTPUT_STREAM_V_data_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_rd, "OUTPUT_STREAM_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_wr, "OUTPUT_STREAM_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel, "OUTPUT_STREAM_V_data_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_A, "OUTPUT_STREAM_V_data_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_B, "OUTPUT_STREAM_V_data_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state, "OUTPUT_STREAM_V_data_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state_cmp_full, "OUTPUT_STREAM_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_data_out, "OUTPUT_STREAM_V_keep_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_in, "OUTPUT_STREAM_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_out, "OUTPUT_STREAM_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_in, "OUTPUT_STREAM_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_out, "OUTPUT_STREAM_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_A, "OUTPUT_STREAM_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_B, "OUTPUT_STREAM_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_rd, "OUTPUT_STREAM_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_wr, "OUTPUT_STREAM_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel, "OUTPUT_STREAM_V_keep_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_A, "OUTPUT_STREAM_V_keep_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_B, "OUTPUT_STREAM_V_keep_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state, "OUTPUT_STREAM_V_keep_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state_cmp_full, "OUTPUT_STREAM_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_data_out, "OUTPUT_STREAM_V_strb_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_in, "OUTPUT_STREAM_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_out, "OUTPUT_STREAM_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_in, "OUTPUT_STREAM_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_out, "OUTPUT_STREAM_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_A, "OUTPUT_STREAM_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_B, "OUTPUT_STREAM_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_rd, "OUTPUT_STREAM_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_wr, "OUTPUT_STREAM_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel, "OUTPUT_STREAM_V_strb_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_A, "OUTPUT_STREAM_V_strb_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_B, "OUTPUT_STREAM_V_strb_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state, "OUTPUT_STREAM_V_strb_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state_cmp_full, "OUTPUT_STREAM_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_data_out, "OUTPUT_STREAM_V_user_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_in, "OUTPUT_STREAM_V_user_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_out, "OUTPUT_STREAM_V_user_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_in, "OUTPUT_STREAM_V_user_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_out, "OUTPUT_STREAM_V_user_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_A, "OUTPUT_STREAM_V_user_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_B, "OUTPUT_STREAM_V_user_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_rd, "OUTPUT_STREAM_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_wr, "OUTPUT_STREAM_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel, "OUTPUT_STREAM_V_user_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_A, "OUTPUT_STREAM_V_user_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_B, "OUTPUT_STREAM_V_user_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state, "OUTPUT_STREAM_V_user_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state_cmp_full, "OUTPUT_STREAM_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_data_out, "OUTPUT_STREAM_V_last_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_in, "OUTPUT_STREAM_V_last_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_out, "OUTPUT_STREAM_V_last_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_in, "OUTPUT_STREAM_V_last_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_out, "OUTPUT_STREAM_V_last_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_A, "OUTPUT_STREAM_V_last_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_B, "OUTPUT_STREAM_V_last_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_rd, "OUTPUT_STREAM_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_wr, "OUTPUT_STREAM_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel, "OUTPUT_STREAM_V_last_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_A, "OUTPUT_STREAM_V_last_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_B, "OUTPUT_STREAM_V_last_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state, "OUTPUT_STREAM_V_last_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state_cmp_full, "OUTPUT_STREAM_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_data_out, "OUTPUT_STREAM_V_id_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_in, "OUTPUT_STREAM_V_id_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_out, "OUTPUT_STREAM_V_id_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_in, "OUTPUT_STREAM_V_id_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_out, "OUTPUT_STREAM_V_id_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_A, "OUTPUT_STREAM_V_id_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_B, "OUTPUT_STREAM_V_id_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_rd, "OUTPUT_STREAM_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_wr, "OUTPUT_STREAM_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel, "OUTPUT_STREAM_V_id_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_A, "OUTPUT_STREAM_V_id_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_B, "OUTPUT_STREAM_V_id_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state, "OUTPUT_STREAM_V_id_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state_cmp_full, "OUTPUT_STREAM_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_data_out, "OUTPUT_STREAM_V_dest_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_in, "OUTPUT_STREAM_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_out, "OUTPUT_STREAM_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_in, "OUTPUT_STREAM_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_out, "OUTPUT_STREAM_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_A, "OUTPUT_STREAM_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_B, "OUTPUT_STREAM_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_rd, "OUTPUT_STREAM_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_wr, "OUTPUT_STREAM_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel, "OUTPUT_STREAM_V_dest_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_A, "OUTPUT_STREAM_V_dest_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_B, "OUTPUT_STREAM_V_dest_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state, "OUTPUT_STREAM_V_dest_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state_cmp_full, "OUTPUT_STREAM_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, width_count, "width_count");
    sc_trace(mVcdFile, height_count, "height_count");
    sc_trace(mVcdFile, values_address0, "values_address0");
    sc_trace(mVcdFile, values_ce0, "values_ce0");
    sc_trace(mVcdFile, values_we0, "values_we0");
    sc_trace(mVcdFile, values_d0, "values_d0");
    sc_trace(mVcdFile, values_q0, "values_q0");
    sc_trace(mVcdFile, scores_address0, "scores_address0");
    sc_trace(mVcdFile, scores_ce0, "scores_ce0");
    sc_trace(mVcdFile, scores_we0, "scores_we0");
    sc_trace(mVcdFile, scores_d0, "scores_d0");
    sc_trace(mVcdFile, scores_q0, "scores_q0");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA_blk_n, "INPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA_blk_n, "OUTPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, tmp_13_fu_784_p2, "tmp_13_fu_784_p2");
    sc_trace(mVcdFile, or_cond_reg_948, "or_cond_reg_948");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, reg_446, "reg_446");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_data_V_reg_883, "tmp_data_V_reg_883");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_keep_V_reg_889, "tmp_keep_V_reg_889");
    sc_trace(mVcdFile, tmp_strb_V_reg_894, "tmp_strb_V_reg_894");
    sc_trace(mVcdFile, tmp_user_V_reg_899, "tmp_user_V_reg_899");
    sc_trace(mVcdFile, tmp_last_V_reg_904, "tmp_last_V_reg_904");
    sc_trace(mVcdFile, tmp_id_V_reg_909, "tmp_id_V_reg_909");
    sc_trace(mVcdFile, tmp_dest_V_reg_914, "tmp_dest_V_reg_914");
    sc_trace(mVcdFile, width_count_load_reg_919, "width_count_load_reg_919");
    sc_trace(mVcdFile, height_count_load_reg_925, "height_count_load_reg_925");
    sc_trace(mVcdFile, tmp_2_fu_492_p2, "tmp_2_fu_492_p2");
    sc_trace(mVcdFile, tmp_2_reg_931, "tmp_2_reg_931");
    sc_trace(mVcdFile, count_1_fu_504_p2, "count_1_fu_504_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, values_addr_1_reg_943, "values_addr_1_reg_943");
    sc_trace(mVcdFile, tmp_3_fu_498_p2, "tmp_3_fu_498_p2");
    sc_trace(mVcdFile, or_cond_fu_537_p2, "or_cond_fu_537_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, scoreIter_3_fu_549_p2, "scoreIter_3_fu_549_p2");
    sc_trace(mVcdFile, scoreIter_3_reg_955, "scoreIter_3_reg_955");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_s_fu_543_p2, "tmp_s_fu_543_p2");
    sc_trace(mVcdFile, tmp_10_cast_fu_570_p1, "tmp_10_cast_fu_570_p1");
    sc_trace(mVcdFile, tmp_10_cast_reg_965, "tmp_10_cast_reg_965");
    sc_trace(mVcdFile, tmp_12_fu_578_p2, "tmp_12_fu_578_p2");
    sc_trace(mVcdFile, tmp_12_reg_971, "tmp_12_reg_971");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sum_1_fu_584_p2, "sum_1_fu_584_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, threshold_1_cast4_ca_fu_589_p1, "threshold_1_cast4_ca_fu_589_p1");
    sc_trace(mVcdFile, threshold_1_cast4_ca_reg_981, "threshold_1_cast4_ca_reg_981");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_14_fu_599_p1, "tmp_14_fu_599_p1");
    sc_trace(mVcdFile, tmp_14_reg_989, "tmp_14_reg_989");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, scoreIter_4_fu_608_p2, "scoreIter_4_fu_608_p2");
    sc_trace(mVcdFile, scoreIter_4_reg_997, "scoreIter_4_reg_997");
    sc_trace(mVcdFile, tmp_15_fu_603_p2, "tmp_15_fu_603_p2");
    sc_trace(mVcdFile, tmp_19_fu_619_p1, "tmp_19_fu_619_p1");
    sc_trace(mVcdFile, tmp_21_fu_623_p2, "tmp_21_fu_623_p2");
    sc_trace(mVcdFile, tmp_21_reg_1012, "tmp_21_reg_1012");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, count_pixels_under_t_fu_628_p2, "count_pixels_under_t_fu_628_p2");
    sc_trace(mVcdFile, count_pixels_under_t_reg_1017, "count_pixels_under_t_reg_1017");
    sc_trace(mVcdFile, sum_under_threshold_1_fu_634_p2, "sum_under_threshold_1_fu_634_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, scoreIter_2_fu_639_p2, "scoreIter_2_fu_639_p2");
    sc_trace(mVcdFile, scoreIter_2_reg_1027, "scoreIter_2_reg_1027");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, exitcond1_fu_645_p2, "exitcond1_fu_645_p2");
    sc_trace(mVcdFile, or_cond1_fu_668_p2, "or_cond1_fu_668_p2");
    sc_trace(mVcdFile, or_cond1_reg_1041, "or_cond1_reg_1041");
    sc_trace(mVcdFile, tmp_29_fu_689_p2, "tmp_29_fu_689_p2");
    sc_trace(mVcdFile, tmp_29_reg_1045, "tmp_29_reg_1045");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, count_pixels_over_th_fu_695_p2, "count_pixels_over_th_fu_695_p2");
    sc_trace(mVcdFile, count_pixels_over_th_reg_1050, "count_pixels_over_th_reg_1050");
    sc_trace(mVcdFile, sum_over_threshold_1_fu_701_p2, "sum_over_threshold_1_fu_701_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_33_fu_718_p2, "tmp_33_fu_718_p2");
    sc_trace(mVcdFile, tmp_33_reg_1060, "tmp_33_reg_1060");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, tmp_35_fu_727_p2, "tmp_35_fu_727_p2");
    sc_trace(mVcdFile, tmp_35_reg_1065, "tmp_35_reg_1065");
    sc_trace(mVcdFile, tmp_36_cast_fu_732_p1, "tmp_36_cast_fu_732_p1");
    sc_trace(mVcdFile, tmp_36_cast_reg_1070, "tmp_36_cast_reg_1070");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, tmp1_fu_735_p2, "tmp1_fu_735_p2");
    sc_trace(mVcdFile, tmp1_reg_1075, "tmp1_reg_1075");
    sc_trace(mVcdFile, tmp_40_cast_fu_741_p1, "tmp_40_cast_fu_741_p1");
    sc_trace(mVcdFile, tmp_40_cast_reg_1080, "tmp_40_cast_reg_1080");
    sc_trace(mVcdFile, tmp2_fu_744_p2, "tmp2_fu_744_p2");
    sc_trace(mVcdFile, tmp2_reg_1085, "tmp2_reg_1085");
    sc_trace(mVcdFile, tmp_34_fu_750_p2, "tmp_34_fu_750_p2");
    sc_trace(mVcdFile, tmp_34_reg_1090, "tmp_34_reg_1090");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, tmp_36_fu_754_p2, "tmp_36_fu_754_p2");
    sc_trace(mVcdFile, tmp_36_reg_1095, "tmp_36_reg_1095");
    sc_trace(mVcdFile, tmp_39_fu_778_p2, "tmp_39_fu_778_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, count_2_fu_790_p2, "count_2_fu_790_p2");
    sc_trace(mVcdFile, count_2_reg_1108, "count_2_reg_1108");
    sc_trace(mVcdFile, ap_predicate_op300_write_state56, "ap_predicate_op300_write_state56");
    sc_trace(mVcdFile, ap_block_state56_io, "ap_block_state56_io");
    sc_trace(mVcdFile, tmp_22_fu_806_p2, "tmp_22_fu_806_p2");
    sc_trace(mVcdFile, record_id_2_record_i_fu_856_p3, "record_id_2_record_i_fu_856_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, record_2_record_fu_864_p3, "record_2_record_fu_864_p3");
    sc_trace(mVcdFile, count_reg_272, "count_reg_272");
    sc_trace(mVcdFile, sum_reg_283, "sum_reg_283");
    sc_trace(mVcdFile, scoreIter_reg_295, "scoreIter_reg_295");
    sc_trace(mVcdFile, threshold_1_reg_307, "threshold_1_reg_307");
    sc_trace(mVcdFile, scoreIter_1_reg_319, "scoreIter_1_reg_319");
    sc_trace(mVcdFile, exitcond_fu_593_p2, "exitcond_fu_593_p2");
    sc_trace(mVcdFile, sum_under_threshold_reg_330, "sum_under_threshold_reg_330");
    sc_trace(mVcdFile, probability_under_th_reg_342, "probability_under_th_reg_342");
    sc_trace(mVcdFile, scoreIter_2_in_reg_354, "scoreIter_2_in_reg_354");
    sc_trace(mVcdFile, sum_over_threshold_reg_363, "sum_over_threshold_reg_363");
    sc_trace(mVcdFile, probability_over_thr_reg_375, "probability_over_thr_reg_375");
    sc_trace(mVcdFile, ap_phi_mux_computedScore1_phi_fu_391_p4, "ap_phi_mux_computedScore1_phi_fu_391_p4");
    sc_trace(mVcdFile, computedScore1_reg_387, "computedScore1_reg_387");
    sc_trace(mVcdFile, record_id_reg_399, "record_id_reg_399");
    sc_trace(mVcdFile, record_reg_411, "record_reg_411");
    sc_trace(mVcdFile, count1_reg_423, "count1_reg_423");
    sc_trace(mVcdFile, width_count_new_reg_435, "width_count_new_reg_435");
    sc_trace(mVcdFile, tmp_23_fu_811_p2, "tmp_23_fu_811_p2");
    sc_trace(mVcdFile, tmp_4_fu_510_p1, "tmp_4_fu_510_p1");
    sc_trace(mVcdFile, tmp_6_fu_516_p1, "tmp_6_fu_516_p1");
    sc_trace(mVcdFile, tmp_10_fu_555_p1, "tmp_10_fu_555_p1");
    sc_trace(mVcdFile, tmp_20_fu_614_p1, "tmp_20_fu_614_p1");
    sc_trace(mVcdFile, tmp_27_fu_651_p1, "tmp_27_fu_651_p1");
    sc_trace(mVcdFile, tmp_38_fu_773_p1, "tmp_38_fu_773_p1");
    sc_trace(mVcdFile, tmp_17_fu_796_p1, "tmp_17_fu_796_p1");
    sc_trace(mVcdFile, ap_block_state58, "ap_block_state58");
    sc_trace(mVcdFile, p_s_fu_828_p3, "p_s_fu_828_p3");
    sc_trace(mVcdFile, updateThreshold_V_preg, "updateThreshold_V_preg");
    sc_trace(mVcdFile, tmp_7_fu_520_p2, "tmp_7_fu_520_p2");
    sc_trace(mVcdFile, tmp_1_fu_486_p2, "tmp_1_fu_486_p2");
    sc_trace(mVcdFile, tmp_8_fu_527_p2, "tmp_8_fu_527_p2");
    sc_trace(mVcdFile, tmp_9_fu_532_p2, "tmp_9_fu_532_p2");
    sc_trace(mVcdFile, tmp_5_fu_560_p4, "tmp_5_fu_560_p4");
    sc_trace(mVcdFile, tmp_12_fu_578_p0, "tmp_12_fu_578_p0");
    sc_trace(mVcdFile, tmp_12_fu_578_p1, "tmp_12_fu_578_p1");
    sc_trace(mVcdFile, tmp_21_fu_623_p0, "tmp_21_fu_623_p0");
    sc_trace(mVcdFile, tmp_21_fu_623_p1, "tmp_21_fu_623_p1");
    sc_trace(mVcdFile, count_pixels_under_t_fu_628_p0, "count_pixels_under_t_fu_628_p0");
    sc_trace(mVcdFile, tmp_26_fu_656_p2, "tmp_26_fu_656_p2");
    sc_trace(mVcdFile, tmp_30_fu_662_p2, "tmp_30_fu_662_p2");
    sc_trace(mVcdFile, tmp_29_fu_689_p0, "tmp_29_fu_689_p0");
    sc_trace(mVcdFile, tmp_29_fu_689_p1, "tmp_29_fu_689_p1");
    sc_trace(mVcdFile, count_pixels_over_th_fu_695_p0, "count_pixels_over_th_fu_695_p0");
    sc_trace(mVcdFile, grp_fu_674_p2, "grp_fu_674_p2");
    sc_trace(mVcdFile, grp_fu_680_p2, "grp_fu_680_p2");
    sc_trace(mVcdFile, meanUnderThreshold_fu_706_p1, "meanUnderThreshold_fu_706_p1");
    sc_trace(mVcdFile, tmp_35_cast_fu_714_p1, "tmp_35_cast_fu_714_p1");
    sc_trace(mVcdFile, meanOverThreshold_fu_710_p1, "meanOverThreshold_fu_710_p1");
    sc_trace(mVcdFile, tmp_39_cast_fu_723_p1, "tmp_39_cast_fu_723_p1");
    sc_trace(mVcdFile, tmp1_fu_735_p0, "tmp1_fu_735_p0");
    sc_trace(mVcdFile, tmp2_fu_744_p0, "tmp2_fu_744_p0");
    sc_trace(mVcdFile, tmp_34_fu_750_p0, "tmp_34_fu_750_p0");
    sc_trace(mVcdFile, tmp_36_fu_754_p0, "tmp_36_fu_754_p0");
    sc_trace(mVcdFile, tmp_37_fu_758_p2, "tmp_37_fu_758_p2");
    sc_trace(mVcdFile, tmp_24_fu_817_p2, "tmp_24_fu_817_p2");
    sc_trace(mVcdFile, tmp_25_fu_822_p2, "tmp_25_fu_822_p2");
    sc_trace(mVcdFile, record_1_fu_842_p1, "record_1_fu_842_p1");
    sc_trace(mVcdFile, tmp_18_fu_846_p2, "tmp_18_fu_846_p2");
    sc_trace(mVcdFile, record_id_1_fu_852_p1, "record_id_1_fu_852_p1");
    sc_trace(mVcdFile, grp_fu_674_ap_start, "grp_fu_674_ap_start");
    sc_trace(mVcdFile, grp_fu_674_ap_done, "grp_fu_674_ap_done");
    sc_trace(mVcdFile, grp_fu_680_ap_start, "grp_fu_680_ap_start");
    sc_trace(mVcdFile, grp_fu_680_ap_done, "grp_fu_680_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp_12_fu_578_p10, "tmp_12_fu_578_p10");
    sc_trace(mVcdFile, tmp_29_fu_689_p10, "tmp_29_fu_689_p10");
    sc_trace(mVcdFile, ap_condition_1232, "ap_condition_1232");
    sc_trace(mVcdFile, ap_condition_1237, "ap_condition_1237");
#endif

    }
    mHdltvinHandle.open("otsu.hdltvin.dat");
    mHdltvoutHandle.open("otsu.hdltvout.dat");
}

otsu::~otsu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete values_U;
    delete scores_U;
    delete otsu_udiv_32ns_32bkb_U1;
    delete otsu_udiv_32ns_32bkb_U2;
}

void otsu::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void otsu::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_out.read()))) {
            INPUT_STREAM_V_data_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_in.read()))) {
            INPUT_STREAM_V_data_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_out.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_in.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_out.read()))) {
            INPUT_STREAM_V_id_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_in.read()))) {
            INPUT_STREAM_V_id_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_out.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_in.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_out.read()))) {
            INPUT_STREAM_V_last_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_in.read()))) {
            INPUT_STREAM_V_last_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_out.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_in.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_out.read()))) {
            INPUT_STREAM_V_user_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_in.read()))) {
            INPUT_STREAM_V_user_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_user_V_0_state.read())))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_user_V_0_state.read())))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_fu_668_p2.read()))) {
        computedScore1_reg_387 = ap_const_lv14_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_reg_1041.read()))) {
        computedScore1_reg_387 = tmp_37_fu_758_p2.read().range(31, 18);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_593_p2.read()))) {
        count1_reg_423 = ap_const_lv9_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
        count1_reg_423 = count_2_reg_1108.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_492_p2.read()))) {
        count_reg_272 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read()))) {
        count_reg_272 = count_1_fu_504_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        probability_over_thr_reg_375 = count_pixels_over_th_reg_1050.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_fu_603_p2.read()))) {
        probability_over_thr_reg_375 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_593_p2.read()))) {
        probability_under_th_reg_342 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        probability_under_th_reg_342 = count_pixels_under_t_reg_1017.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_593_p2.read()))) {
        record_id_reg_399 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
        record_id_reg_399 = record_id_2_record_i_fu_856_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_593_p2.read()))) {
        record_reg_411 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
        record_reg_411 = record_2_record_fu_864_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_593_p2.read()))) {
        scoreIter_1_reg_319 = ap_const_lv9_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        scoreIter_1_reg_319 = scoreIter_4_reg_997.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        scoreIter_2_in_reg_354 = scoreIter_2_reg_1027.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_fu_603_p2.read()))) {
        scoreIter_2_in_reg_354 = tmp_19_fu_619_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        scoreIter_reg_295 = scoreIter_3_reg_955.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_537_p2.read()))) {
        scoreIter_reg_295 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        sum_over_threshold_reg_363 = sum_over_threshold_1_fu_701_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_fu_603_p2.read()))) {
        sum_over_threshold_reg_363 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_reg_283 = sum_1_fu_584_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_537_p2.read()))) {
        sum_reg_283 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_593_p2.read()))) {
        sum_under_threshold_reg_330 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_under_threshold_reg_330 = sum_under_threshold_1_fu_634_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read())) {
        threshold_1_reg_307 = tmp_39_fu_778_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_543_p2.read()))) {
        threshold_1_reg_307 = ap_const_lv8_1;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        updateThreshold_V_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_948.read()))) {
            updateThreshold_V_preg = ap_const_lv1_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_537_p2.read()))) {
            updateThreshold_V_preg = ap_const_lv1_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_condition_1237.read(), ap_const_boolean_1)) {
            width_count_new_reg_435 = tmp_22_fu_806_p2.read();
        } else if (esl_seteq<1,1,1>(ap_condition_1232.read(), ap_const_boolean_1)) {
            width_count_new_reg_435 = ap_const_lv32_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_A.read())) {
        INPUT_STREAM_V_data_V_0_payload_A = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_B.read())) {
        INPUT_STREAM_V_data_V_0_payload_B = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_A.read())) {
        INPUT_STREAM_V_dest_V_0_payload_A = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_B.read())) {
        INPUT_STREAM_V_dest_V_0_payload_B = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_A.read())) {
        INPUT_STREAM_V_id_V_0_payload_A = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_B.read())) {
        INPUT_STREAM_V_id_V_0_payload_B = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_A.read())) {
        INPUT_STREAM_V_keep_V_0_payload_A = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_B.read())) {
        INPUT_STREAM_V_keep_V_0_payload_B = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_A.read())) {
        INPUT_STREAM_V_last_V_0_payload_A = INPUT_STREAM_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_B.read())) {
        INPUT_STREAM_V_last_V_0_payload_B = INPUT_STREAM_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_A.read())) {
        INPUT_STREAM_V_strb_V_0_payload_A = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_B.read())) {
        INPUT_STREAM_V_strb_V_0_payload_B = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_load_A.read())) {
        INPUT_STREAM_V_user_V_0_payload_A = INPUT_STREAM_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_load_B.read())) {
        INPUT_STREAM_V_user_V_0_payload_B = INPUT_STREAM_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_A.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_A = tmp_data_V_reg_883.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_B.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_B = tmp_data_V_reg_883.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_A.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_A = tmp_dest_V_reg_914.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_B.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_B = tmp_dest_V_reg_914.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_A.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_A = tmp_id_V_reg_909.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_B.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_B = tmp_id_V_reg_909.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_A.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_A = tmp_keep_V_reg_889.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_B.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_B = tmp_keep_V_reg_889.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_A.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_A = tmp_last_V_reg_904.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_B.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_B = tmp_last_V_reg_904.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_A.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_A = tmp_strb_V_reg_894.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_B.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_B = tmp_strb_V_reg_894.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_A.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_A = tmp_user_V_reg_899.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_B.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_B = tmp_user_V_reg_899.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_948.read()))) {
        count_2_reg_1108 = count_2_fu_790_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        count_pixels_over_th_reg_1050 = count_pixels_over_th_fu_695_p2.read();
        tmp_29_reg_1045 = tmp_29_fu_689_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        count_pixels_under_t_reg_1017 = count_pixels_under_t_fu_628_p2.read();
        tmp_21_reg_1012 = tmp_21_fu_623_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0) && ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, tmp_23_fu_811_p2.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, tmp_23_fu_811_p2.read()))))) {
        height_count = p_s_fu_828_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        height_count_load_reg_925 = height_count.read();
        tmp_2_reg_931 = tmp_2_fu_492_p2.read();
        tmp_data_V_reg_883 = INPUT_STREAM_V_data_V_0_data_out.read();
        tmp_dest_V_reg_914 = INPUT_STREAM_V_dest_V_0_data_out.read();
        tmp_id_V_reg_909 = INPUT_STREAM_V_id_V_0_data_out.read();
        tmp_keep_V_reg_889 = INPUT_STREAM_V_keep_V_0_data_out.read();
        tmp_last_V_reg_904 = INPUT_STREAM_V_last_V_0_data_out.read();
        tmp_strb_V_reg_894 = INPUT_STREAM_V_strb_V_0_data_out.read();
        tmp_user_V_reg_899 = INPUT_STREAM_V_user_V_0_data_out.read();
        width_count_load_reg_919 = width_count.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()))) {
        or_cond1_reg_1041 = or_cond1_fu_668_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        or_cond_reg_948 = or_cond_fu_537_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_446 = values_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        scoreIter_2_reg_1027 = scoreIter_2_fu_639_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        scoreIter_3_reg_955 = scoreIter_3_fu_549_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        scoreIter_4_reg_997 = scoreIter_4_fu_608_p2.read();
        tmp_14_reg_989 = tmp_14_fu_599_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        threshold_1_cast4_ca_reg_981 = threshold_1_cast4_ca_fu_589_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        tmp1_reg_1075 = tmp1_fu_735_p2.read();
        tmp2_reg_1085 = tmp2_fu_744_p2.read();
        tmp_36_cast_reg_1070 = tmp_36_cast_fu_732_p1.read();
        tmp_40_cast_reg_1080 = tmp_40_cast_fu_741_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_543_p2.read()))) {
        tmp_10_cast_reg_965 = tmp_10_cast_fu_570_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_12_reg_971 = tmp_12_fu_578_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        tmp_33_reg_1060 = tmp_33_fu_718_p2.read();
        tmp_35_reg_1065 = tmp_35_fu_727_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        tmp_34_reg_1090 = tmp_34_fu_750_p2.read();
        tmp_36_reg_1095 = tmp_36_fu_754_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_498_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_931.read())))) {
        values_addr_1_reg_943 =  (sc_lv<8>) (tmp_6_fu_516_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())))) {
        width_count = width_count_new_reg_435.read();
    }
}

void otsu::thread_INPUT_STREAM_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state.read()[0];
    } else {
        INPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void otsu::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_data_V_0_ack_in() {
    INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_sel.read())) {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_data_V_0_load_A() {
    INPUT_STREAM_V_data_V_0_load_A = (INPUT_STREAM_V_data_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_data_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_data_V_0_load_B() {
    INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_sel_wr.read() & INPUT_STREAM_V_data_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_data_V_0_sel() {
    INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_data_V_0_state_cmp_full() {
    INPUT_STREAM_V_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_data_V_0_vld_in() {
    INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_data_V_0_vld_out() {
    INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_ack_in() {
    INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_sel.read())) {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_load_A() {
    INPUT_STREAM_V_dest_V_0_load_A = (INPUT_STREAM_V_dest_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_dest_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_load_B() {
    INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_sel_wr.read() & INPUT_STREAM_V_dest_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_sel() {
    INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_state_cmp_full() {
    INPUT_STREAM_V_dest_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_vld_in() {
    INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_dest_V_0_vld_out() {
    INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_id_V_0_ack_in() {
    INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_sel.read())) {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_id_V_0_load_A() {
    INPUT_STREAM_V_id_V_0_load_A = (INPUT_STREAM_V_id_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_id_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_id_V_0_load_B() {
    INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_sel_wr.read() & INPUT_STREAM_V_id_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_id_V_0_sel() {
    INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_id_V_0_state_cmp_full() {
    INPUT_STREAM_V_id_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_id_V_0_vld_in() {
    INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_id_V_0_vld_out() {
    INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_ack_in() {
    INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_sel.read())) {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_load_A() {
    INPUT_STREAM_V_keep_V_0_load_A = (INPUT_STREAM_V_keep_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_keep_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_load_B() {
    INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_sel_wr.read() & INPUT_STREAM_V_keep_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_sel() {
    INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_state_cmp_full() {
    INPUT_STREAM_V_keep_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_vld_in() {
    INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_keep_V_0_vld_out() {
    INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_last_V_0_ack_in() {
    INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_sel.read())) {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_last_V_0_load_A() {
    INPUT_STREAM_V_last_V_0_load_A = (INPUT_STREAM_V_last_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_last_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_last_V_0_load_B() {
    INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_sel_wr.read() & INPUT_STREAM_V_last_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_last_V_0_sel() {
    INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_last_V_0_state_cmp_full() {
    INPUT_STREAM_V_last_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_last_V_0_vld_in() {
    INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_last_V_0_vld_out() {
    INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_ack_in() {
    INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_sel.read())) {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_load_A() {
    INPUT_STREAM_V_strb_V_0_load_A = (INPUT_STREAM_V_strb_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_strb_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_load_B() {
    INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_sel_wr.read() & INPUT_STREAM_V_strb_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_sel() {
    INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_state_cmp_full() {
    INPUT_STREAM_V_strb_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_vld_in() {
    INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_strb_V_0_vld_out() {
    INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state.read()[0];
}

void otsu::thread_INPUT_STREAM_V_user_V_0_ack_in() {
    INPUT_STREAM_V_user_V_0_ack_in = INPUT_STREAM_V_user_V_0_state.read()[1];
}

void otsu::thread_INPUT_STREAM_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
        INPUT_STREAM_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void otsu::thread_INPUT_STREAM_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_sel.read())) {
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_A.read();
    }
}

void otsu::thread_INPUT_STREAM_V_user_V_0_load_A() {
    INPUT_STREAM_V_user_V_0_load_A = (INPUT_STREAM_V_user_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_user_V_0_sel_wr.read());
}

void otsu::thread_INPUT_STREAM_V_user_V_0_load_B() {
    INPUT_STREAM_V_user_V_0_load_B = (INPUT_STREAM_V_user_V_0_sel_wr.read() & INPUT_STREAM_V_user_V_0_state_cmp_full.read());
}

void otsu::thread_INPUT_STREAM_V_user_V_0_sel() {
    INPUT_STREAM_V_user_V_0_sel = INPUT_STREAM_V_user_V_0_sel_rd.read();
}

void otsu::thread_INPUT_STREAM_V_user_V_0_state_cmp_full() {
    INPUT_STREAM_V_user_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_INPUT_STREAM_V_user_V_0_vld_in() {
    INPUT_STREAM_V_user_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void otsu::thread_INPUT_STREAM_V_user_V_0_vld_out() {
    INPUT_STREAM_V_user_V_0_vld_out = INPUT_STREAM_V_user_V_0_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_TDATA() {
    OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()))) {
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state.read()[1];
    } else {
        OUTPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void otsu::thread_OUTPUT_STREAM_TDEST() {
    OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TID() {
    OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TKEEP() {
    OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TLAST() {
    OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TSTRB() {
    OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TUSER() {
    OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out.read();
}

void otsu::thread_OUTPUT_STREAM_TVALID() {
    OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_ack_in() {
    OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_ack_out() {
    OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_sel.read())) {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_load_A() {
    OUTPUT_STREAM_V_data_V_1_load_A = (OUTPUT_STREAM_V_data_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_load_B() {
    OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_sel_wr.read() & OUTPUT_STREAM_V_data_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_sel() {
    OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_data_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_data_V_1_vld_out() {
    OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_ack_in() {
    OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_ack_out() {
    OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_sel.read())) {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_load_A() {
    OUTPUT_STREAM_V_dest_V_1_load_A = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_load_B() {
    OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_sel_wr.read() & OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_sel() {
    OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_dest_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_dest_V_1_vld_out() {
    OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_ack_in() {
    OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_ack_out() {
    OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_sel.read())) {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_load_A() {
    OUTPUT_STREAM_V_id_V_1_load_A = (OUTPUT_STREAM_V_id_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_load_B() {
    OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_sel_wr.read() & OUTPUT_STREAM_V_id_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_sel() {
    OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_id_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_id_V_1_vld_out() {
    OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_ack_in() {
    OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_ack_out() {
    OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_sel.read())) {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_load_A() {
    OUTPUT_STREAM_V_keep_V_1_load_A = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_load_B() {
    OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_sel_wr.read() & OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_sel() {
    OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_keep_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_keep_V_1_vld_out() {
    OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_ack_in() {
    OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_ack_out() {
    OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_sel.read())) {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_load_A() {
    OUTPUT_STREAM_V_last_V_1_load_A = (OUTPUT_STREAM_V_last_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_load_B() {
    OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_sel_wr.read() & OUTPUT_STREAM_V_last_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_sel() {
    OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_last_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_last_V_1_vld_out() {
    OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_ack_in() {
    OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_ack_out() {
    OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_sel.read())) {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_load_A() {
    OUTPUT_STREAM_V_strb_V_1_load_A = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_load_B() {
    OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_sel_wr.read() & OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_sel() {
    OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_strb_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_strb_V_1_vld_out() {
    OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state.read()[0];
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_ack_in() {
    OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state.read()[1];
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_ack_out() {
    OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_sel.read())) {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A.read();
    }
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_load_A() {
    OUTPUT_STREAM_V_user_V_1_load_A = (OUTPUT_STREAM_V_user_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_load_B() {
    OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_sel_wr.read() & OUTPUT_STREAM_V_user_V_1_state_cmp_full.read());
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_sel() {
    OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd.read();
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_user_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void otsu::thread_OUTPUT_STREAM_V_user_V_1_vld_out() {
    OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state.read()[0];
}

void otsu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void otsu::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void otsu::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void otsu::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void otsu::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void otsu::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void otsu::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void otsu::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void otsu::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void otsu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void otsu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void otsu::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void otsu::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void otsu::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void otsu::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void otsu::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void otsu::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void otsu::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void otsu::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void otsu::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void otsu::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void otsu::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void otsu::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void otsu::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void otsu::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()));
}

void otsu::thread_ap_block_state56_io() {
    ap_block_state56_io = (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op300_write_state56.read()));
}

void otsu::thread_ap_block_state58() {
    ap_block_state58 = (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()));
}

void otsu::thread_ap_condition_1232() {
    ap_condition_1232 = ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_23_fu_811_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_23_fu_811_p2.read())));
}

void otsu::thread_ap_condition_1237() {
    ap_condition_1237 = ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_fu_811_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_fu_811_p2.read())));
}

void otsu::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void otsu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void otsu::thread_ap_phi_mux_computedScore1_phi_fu_391_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_reg_1041.read()))) {
        ap_phi_mux_computedScore1_phi_fu_391_p4 = tmp_37_fu_758_p2.read().range(31, 18);
    } else {
        ap_phi_mux_computedScore1_phi_fu_391_p4 = computedScore1_reg_387.read();
    }
}

void otsu::thread_ap_predicate_op300_write_state56() {
    ap_predicate_op300_write_state56 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) || esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read()));
}

void otsu::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void otsu::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void otsu::thread_best_threshold() {
    best_threshold = record_id_reg_399.read().range(8-1, 0);
}

void otsu::thread_best_threshold_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_948.read()))) {
        best_threshold_ap_vld = ap_const_logic_1;
    } else {
        best_threshold_ap_vld = ap_const_logic_0;
    }
}

void otsu::thread_count_1_fu_504_p2() {
    count_1_fu_504_p2 = (!count_reg_272.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(count_reg_272.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void otsu::thread_count_2_fu_790_p2() {
    count_2_fu_790_p2 = (!count1_reg_423.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(count1_reg_423.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void otsu::thread_count_pixels_over_th_fu_695_p0() {
    count_pixels_over_th_fu_695_p0 = reg_446.read();
}

void otsu::thread_count_pixels_over_th_fu_695_p2() {
    count_pixels_over_th_fu_695_p2 = (!count_pixels_over_th_fu_695_p0.read().is_01() || !probability_over_thr_reg_375.read().is_01())? sc_lv<32>(): (sc_bigint<32>(count_pixels_over_th_fu_695_p0.read()) + sc_bigint<32>(probability_over_thr_reg_375.read()));
}

void otsu::thread_count_pixels_under_t_fu_628_p0() {
    count_pixels_under_t_fu_628_p0 = reg_446.read();
}

void otsu::thread_count_pixels_under_t_fu_628_p2() {
    count_pixels_under_t_fu_628_p2 = (!count_pixels_under_t_fu_628_p0.read().is_01() || !probability_under_th_reg_342.read().is_01())? sc_lv<32>(): (sc_bigint<32>(count_pixels_under_t_fu_628_p0.read()) + sc_bigint<32>(probability_under_th_reg_342.read()));
}

void otsu::thread_exitcond1_fu_645_p2() {
    exitcond1_fu_645_p2 = (!scoreIter_2_in_reg_354.read().is_01() || !ap_const_lv16_FF.is_01())? sc_lv<1>(): sc_lv<1>(scoreIter_2_in_reg_354.read() == ap_const_lv16_FF);
}

void otsu::thread_exitcond_fu_593_p2() {
    exitcond_fu_593_p2 = (!threshold_1_reg_307.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(threshold_1_reg_307.read() == ap_const_lv8_FF);
}

void otsu::thread_grp_fu_674_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_fu_668_p2.read()))) {
        grp_fu_674_ap_start = ap_const_logic_1;
    } else {
        grp_fu_674_ap_start = ap_const_logic_0;
    }
}

void otsu::thread_grp_fu_680_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_fu_668_p2.read()))) {
        grp_fu_680_ap_start = ap_const_logic_1;
    } else {
        grp_fu_680_ap_start = ap_const_logic_0;
    }
}

void otsu::thread_meanOverThreshold_fu_710_p1() {
    meanOverThreshold_fu_710_p1 = grp_fu_680_p2.read().range(16-1, 0);
}

void otsu::thread_meanUnderThreshold_fu_706_p1() {
    meanUnderThreshold_fu_706_p1 = grp_fu_674_p2.read().range(16-1, 0);
}

void otsu::thread_or_cond1_fu_668_p2() {
    or_cond1_fu_668_p2 = (tmp_26_fu_656_p2.read() | tmp_30_fu_662_p2.read());
}

void otsu::thread_or_cond_fu_537_p2() {
    or_cond_fu_537_p2 = (tmp_8_fu_527_p2.read() & tmp_9_fu_532_p2.read());
}

void otsu::thread_p_s_fu_828_p3() {
    p_s_fu_828_p3 = (!tmp_25_fu_822_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_25_fu_822_p2.read()[0].to_bool())? ap_const_lv32_0: tmp_24_fu_817_p2.read());
}

void otsu::thread_record_1_fu_842_p1() {
    record_1_fu_842_p1 = esl_zext<32,14>(scores_q0.read());
}

void otsu::thread_record_2_record_fu_864_p3() {
    record_2_record_fu_864_p3 = (!tmp_18_fu_846_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_18_fu_846_p2.read()[0].to_bool())? record_1_fu_842_p1.read(): record_reg_411.read());
}

void otsu::thread_record_id_1_fu_852_p1() {
    record_id_1_fu_852_p1 = esl_zext<32,9>(count1_reg_423.read());
}

void otsu::thread_record_id_2_record_i_fu_856_p3() {
    record_id_2_record_i_fu_856_p3 = (!tmp_18_fu_846_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_18_fu_846_p2.read()[0].to_bool())? record_id_1_fu_852_p1.read(): record_id_reg_399.read());
}

void otsu::thread_scoreIter_2_fu_639_p2() {
    scoreIter_2_fu_639_p2 = (!scoreIter_2_in_reg_354.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(scoreIter_2_in_reg_354.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void otsu::thread_scoreIter_3_fu_549_p2() {
    scoreIter_3_fu_549_p2 = (!scoreIter_reg_295.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(scoreIter_reg_295.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void otsu::thread_scoreIter_4_fu_608_p2() {
    scoreIter_4_fu_608_p2 = (!scoreIter_1_reg_319.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(scoreIter_1_reg_319.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void otsu::thread_scores_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read())) {
        scores_address0 =  (sc_lv<8>) (tmp_17_fu_796_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read())) {
        scores_address0 =  (sc_lv<8>) (tmp_38_fu_773_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        scores_address0 =  (sc_lv<8>) (tmp_4_fu_510_p1.read());
    } else {
        scores_address0 = "XXXXXXXX";
    }
}

void otsu::thread_scores_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0)))) {
        scores_ce0 = ap_const_logic_1;
    } else {
        scores_ce0 = ap_const_logic_0;
    }
}

void otsu::thread_scores_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read())) {
        scores_d0 = ap_phi_mux_computedScore1_phi_fu_391_p4.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        scores_d0 = ap_const_lv14_0;
    } else {
        scores_d0 =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
    }
}

void otsu::thread_scores_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read())))) {
        scores_we0 = ap_const_logic_1;
    } else {
        scores_we0 = ap_const_logic_0;
    }
}

void otsu::thread_sum_1_fu_584_p2() {
    sum_1_fu_584_p2 = (!tmp_12_reg_971.read().is_01() || !sum_reg_283.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_12_reg_971.read()) + sc_biguint<32>(sum_reg_283.read()));
}

void otsu::thread_sum_over_threshold_1_fu_701_p2() {
    sum_over_threshold_1_fu_701_p2 = (!tmp_29_reg_1045.read().is_01() || !sum_over_threshold_reg_363.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_29_reg_1045.read()) + sc_biguint<32>(sum_over_threshold_reg_363.read()));
}

void otsu::thread_sum_under_threshold_1_fu_634_p2() {
    sum_under_threshold_1_fu_634_p2 = (!tmp_21_reg_1012.read().is_01() || !sum_under_threshold_reg_330.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_21_reg_1012.read()) + sc_biguint<32>(sum_under_threshold_reg_330.read()));
}

void otsu::thread_threshold_1_cast4_ca_fu_589_p1() {
    threshold_1_cast4_ca_fu_589_p1 = esl_zext<9,8>(threshold_1_reg_307.read());
}

void otsu::thread_tmp1_fu_735_p0() {
    tmp1_fu_735_p0 = tmp_33_reg_1060.read();
}

void otsu::thread_tmp1_fu_735_p2() {
    tmp1_fu_735_p2 = (!tmp1_fu_735_p0.read().is_01() || !probability_under_th_reg_342.read().is_01())? sc_lv<32>(): sc_bigint<17>(tmp1_fu_735_p0.read()) * sc_bigint<32>(probability_under_th_reg_342.read());
}

void otsu::thread_tmp2_fu_744_p0() {
    tmp2_fu_744_p0 = tmp_35_reg_1065.read();
}

void otsu::thread_tmp2_fu_744_p2() {
    tmp2_fu_744_p2 = (!tmp2_fu_744_p0.read().is_01() || !probability_over_thr_reg_375.read().is_01())? sc_lv<32>(): sc_bigint<17>(tmp2_fu_744_p0.read()) * sc_bigint<32>(probability_over_thr_reg_375.read());
}

void otsu::thread_tmp_10_cast_fu_570_p1() {
    tmp_10_cast_fu_570_p1 = esl_zext<17,14>(tmp_5_fu_560_p4.read());
}

void otsu::thread_tmp_10_fu_555_p1() {
    tmp_10_fu_555_p1 = esl_zext<64,9>(scoreIter_reg_295.read());
}

void otsu::thread_tmp_12_fu_578_p0() {
    tmp_12_fu_578_p0 = reg_446.read();
}

void otsu::thread_tmp_12_fu_578_p1() {
    tmp_12_fu_578_p1 =  (sc_lv<9>) (tmp_12_fu_578_p10.read());
}

void otsu::thread_tmp_12_fu_578_p10() {
    tmp_12_fu_578_p10 = esl_zext<32,9>(scoreIter_reg_295.read());
}

void otsu::thread_tmp_12_fu_578_p2() {
    tmp_12_fu_578_p2 = (!tmp_12_fu_578_p0.read().is_01() || !tmp_12_fu_578_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_12_fu_578_p0.read()) * sc_biguint<9>(tmp_12_fu_578_p1.read());
}

void otsu::thread_tmp_13_fu_784_p2() {
    tmp_13_fu_784_p2 = (!count1_reg_423.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(count1_reg_423.read() == ap_const_lv9_100);
}

void otsu::thread_tmp_14_fu_599_p1() {
    tmp_14_fu_599_p1 = esl_zext<32,9>(scoreIter_1_reg_319.read());
}

void otsu::thread_tmp_15_fu_603_p2() {
    tmp_15_fu_603_p2 = (!scoreIter_1_reg_319.read().is_01() || !threshold_1_cast4_ca_reg_981.read().is_01())? sc_lv<1>(): (sc_biguint<9>(scoreIter_1_reg_319.read()) > sc_biguint<9>(threshold_1_cast4_ca_reg_981.read()));
}

void otsu::thread_tmp_17_fu_796_p1() {
    tmp_17_fu_796_p1 = esl_zext<64,9>(count1_reg_423.read());
}

void otsu::thread_tmp_18_fu_846_p2() {
    tmp_18_fu_846_p2 = (!record_1_fu_842_p1.read().is_01() || !record_reg_411.read().is_01())? sc_lv<1>(): (sc_biguint<32>(record_1_fu_842_p1.read()) > sc_biguint<32>(record_reg_411.read()));
}

void otsu::thread_tmp_19_fu_619_p1() {
    tmp_19_fu_619_p1 = esl_zext<16,8>(threshold_1_reg_307.read());
}

void otsu::thread_tmp_1_fu_486_p2() {
    tmp_1_fu_486_p2 = (height_count.read() | width_count.read());
}

void otsu::thread_tmp_20_fu_614_p1() {
    tmp_20_fu_614_p1 = esl_zext<64,9>(scoreIter_1_reg_319.read());
}

void otsu::thread_tmp_21_fu_623_p0() {
    tmp_21_fu_623_p0 = reg_446.read();
}

void otsu::thread_tmp_21_fu_623_p1() {
    tmp_21_fu_623_p1 =  (sc_lv<9>) (tmp_14_reg_989.read());
}

void otsu::thread_tmp_21_fu_623_p2() {
    tmp_21_fu_623_p2 = (!tmp_21_fu_623_p0.read().is_01() || !tmp_21_fu_623_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_21_fu_623_p0.read()) * sc_biguint<9>(tmp_21_fu_623_p1.read());
}

void otsu::thread_tmp_22_fu_806_p2() {
    tmp_22_fu_806_p2 = (!width_count_load_reg_919.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(width_count_load_reg_919.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void otsu::thread_tmp_23_fu_811_p2() {
    tmp_23_fu_811_p2 = (!tmp_22_fu_806_p2.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<1>(): sc_lv<1>(tmp_22_fu_806_p2.read() == ap_const_lv32_200);
}

void otsu::thread_tmp_24_fu_817_p2() {
    tmp_24_fu_817_p2 = (!height_count_load_reg_925.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(height_count_load_reg_925.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void otsu::thread_tmp_25_fu_822_p2() {
    tmp_25_fu_822_p2 = (!tmp_24_fu_817_p2.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<1>(): sc_lv<1>(tmp_24_fu_817_p2.read() == ap_const_lv32_200);
}

void otsu::thread_tmp_26_fu_656_p2() {
    tmp_26_fu_656_p2 = (!probability_over_thr_reg_375.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(probability_over_thr_reg_375.read() == ap_const_lv32_0);
}

void otsu::thread_tmp_27_fu_651_p1() {
    tmp_27_fu_651_p1 = esl_zext<64,16>(scoreIter_2_fu_639_p2.read());
}

void otsu::thread_tmp_29_fu_689_p0() {
    tmp_29_fu_689_p0 = reg_446.read();
}

void otsu::thread_tmp_29_fu_689_p1() {
    tmp_29_fu_689_p1 =  (sc_lv<16>) (tmp_29_fu_689_p10.read());
}

void otsu::thread_tmp_29_fu_689_p10() {
    tmp_29_fu_689_p10 = esl_zext<32,16>(scoreIter_2_reg_1027.read());
}

void otsu::thread_tmp_29_fu_689_p2() {
    tmp_29_fu_689_p2 = (!tmp_29_fu_689_p0.read().is_01() || !tmp_29_fu_689_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_29_fu_689_p0.read()) * sc_biguint<16>(tmp_29_fu_689_p1.read());
}

void otsu::thread_tmp_2_fu_492_p2() {
    tmp_2_fu_492_p2 = (!tmp_1_fu_486_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_486_p2.read() == ap_const_lv32_0);
}

void otsu::thread_tmp_30_fu_662_p2() {
    tmp_30_fu_662_p2 = (!probability_under_th_reg_342.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(probability_under_th_reg_342.read() == ap_const_lv32_0);
}

void otsu::thread_tmp_33_fu_718_p2() {
    tmp_33_fu_718_p2 = (!tmp_35_cast_fu_714_p1.read().is_01() || !tmp_10_cast_reg_965.read().is_01())? sc_lv<17>(): (sc_biguint<17>(tmp_35_cast_fu_714_p1.read()) - sc_biguint<17>(tmp_10_cast_reg_965.read()));
}

void otsu::thread_tmp_34_fu_750_p0() {
    tmp_34_fu_750_p0 =  (sc_lv<17>) (tmp_36_cast_reg_1070.read());
}

void otsu::thread_tmp_34_fu_750_p2() {
    tmp_34_fu_750_p2 = (!tmp_34_fu_750_p0.read().is_01() || !tmp1_reg_1075.read().is_01())? sc_lv<32>(): sc_bigint<17>(tmp_34_fu_750_p0.read()) * sc_bigint<32>(tmp1_reg_1075.read());
}

void otsu::thread_tmp_35_cast_fu_714_p1() {
    tmp_35_cast_fu_714_p1 = esl_zext<17,16>(meanUnderThreshold_fu_706_p1.read());
}

void otsu::thread_tmp_35_fu_727_p2() {
    tmp_35_fu_727_p2 = (!tmp_39_cast_fu_723_p1.read().is_01() || !tmp_10_cast_reg_965.read().is_01())? sc_lv<17>(): (sc_biguint<17>(tmp_39_cast_fu_723_p1.read()) - sc_biguint<17>(tmp_10_cast_reg_965.read()));
}

void otsu::thread_tmp_36_cast_fu_732_p1() {
    tmp_36_cast_fu_732_p1 = esl_sext<32,17>(tmp_33_reg_1060.read());
}

void otsu::thread_tmp_36_fu_754_p0() {
    tmp_36_fu_754_p0 =  (sc_lv<17>) (tmp_40_cast_reg_1080.read());
}

void otsu::thread_tmp_36_fu_754_p2() {
    tmp_36_fu_754_p2 = (!tmp_36_fu_754_p0.read().is_01() || !tmp2_reg_1085.read().is_01())? sc_lv<32>(): sc_bigint<17>(tmp_36_fu_754_p0.read()) * sc_bigint<32>(tmp2_reg_1085.read());
}

void otsu::thread_tmp_37_fu_758_p2() {
    tmp_37_fu_758_p2 = (!tmp_34_reg_1090.read().is_01() || !tmp_36_reg_1095.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_34_reg_1090.read()) + sc_biguint<32>(tmp_36_reg_1095.read()));
}

void otsu::thread_tmp_38_fu_773_p1() {
    tmp_38_fu_773_p1 = esl_zext<64,8>(threshold_1_reg_307.read());
}

void otsu::thread_tmp_39_cast_fu_723_p1() {
    tmp_39_cast_fu_723_p1 = esl_zext<17,16>(meanOverThreshold_fu_710_p1.read());
}

void otsu::thread_tmp_39_fu_778_p2() {
    tmp_39_fu_778_p2 = (!threshold_1_reg_307.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(threshold_1_reg_307.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void otsu::thread_tmp_3_fu_498_p2() {
    tmp_3_fu_498_p2 = (!count_reg_272.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(count_reg_272.read() == ap_const_lv9_100);
}

void otsu::thread_tmp_40_cast_fu_741_p1() {
    tmp_40_cast_fu_741_p1 = esl_sext<32,17>(tmp_35_reg_1065.read());
}

void otsu::thread_tmp_4_fu_510_p1() {
    tmp_4_fu_510_p1 = esl_zext<64,9>(count_reg_272.read());
}

void otsu::thread_tmp_5_fu_560_p4() {
    tmp_5_fu_560_p4 = sum_reg_283.read().range(31, 18);
}

void otsu::thread_tmp_6_fu_516_p1() {
    tmp_6_fu_516_p1 = esl_zext<64,8>(tmp_data_V_reg_883.read());
}

void otsu::thread_tmp_7_fu_520_p2() {
    tmp_7_fu_520_p2 = (!reg_446.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(reg_446.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void otsu::thread_tmp_8_fu_527_p2() {
    tmp_8_fu_527_p2 = (!width_count_load_reg_919.read().is_01() || !ap_const_lv32_1FF.is_01())? sc_lv<1>(): sc_lv<1>(width_count_load_reg_919.read() == ap_const_lv32_1FF);
}

void otsu::thread_tmp_9_fu_532_p2() {
    tmp_9_fu_532_p2 = (!height_count_load_reg_925.read().is_01() || !ap_const_lv32_1FF.is_01())? sc_lv<1>(): sc_lv<1>(height_count_load_reg_925.read() == ap_const_lv32_1FF);
}

void otsu::thread_tmp_s_fu_543_p2() {
    tmp_s_fu_543_p2 = (!scoreIter_reg_295.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(scoreIter_reg_295.read() == ap_const_lv9_100);
}

void otsu::thread_updateThreshold_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_948.read()))) {
        updateThreshold_V = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_537_p2.read()))) {
        updateThreshold_V = ap_const_lv1_0;
    } else {
        updateThreshold_V = updateThreshold_V_preg.read();
    }
}

void otsu::thread_values_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        values_address0 =  (sc_lv<8>) (tmp_27_fu_651_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        values_address0 =  (sc_lv<8>) (tmp_20_fu_614_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        values_address0 =  (sc_lv<8>) (tmp_10_fu_555_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        values_address0 = values_addr_1_reg_943.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_498_p2.read()) || 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_931.read())))) {
        values_address0 =  (sc_lv<8>) (tmp_6_fu_516_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read()))) {
        values_address0 =  (sc_lv<8>) (tmp_4_fu_510_p1.read());
    } else {
        values_address0 = "XXXXXXXX";
    }
}

void otsu::thread_values_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_498_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_931.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read())))) {
        values_ce0 = ap_const_logic_1;
    } else {
        values_ce0 = ap_const_logic_0;
    }
}

void otsu::thread_values_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        values_d0 = tmp_7_fu_520_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read()))) {
        values_d0 = ap_const_lv32_0;
    } else {
        values_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void otsu::thread_values_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_931.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_498_p2.read())))) {
        values_we0 = ap_const_logic_1;
    } else {
        values_we0 = ap_const_logic_0;
    }
}

void otsu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_498_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_931.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_537_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state56;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_543_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_593_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state56;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_fu_603_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond1_fu_668_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state55;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_645_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond1_fu_668_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 36028797018963968 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_fu_784_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_948.read())) && esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state58;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && esl_seteq<1,1,1>(ap_block_state56_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_948.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_13_fu_784_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state57;
            } else {
                ap_NS_fsm = ap_ST_fsm_state56;
            }
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 144115188075855872 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state58;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<58>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void otsu::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDATA\" :  \"" << OUTPUT_STREAM_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TVALID\" :  \"" << OUTPUT_STREAM_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUTPUT_STREAM_TREADY\" :  \"" << OUTPUT_STREAM_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TKEEP\" :  \"" << OUTPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TSTRB\" :  \"" << OUTPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TUSER\" :  \"" << OUTPUT_STREAM_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TLAST\" :  \"" << OUTPUT_STREAM_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TID\" :  \"" << OUTPUT_STREAM_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDEST\" :  \"" << OUTPUT_STREAM_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"best_threshold\" :  \"" << best_threshold.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"best_threshold_ap_vld\" :  \"" << best_threshold_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"updateThreshold_V\" :  \"" << updateThreshold_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

