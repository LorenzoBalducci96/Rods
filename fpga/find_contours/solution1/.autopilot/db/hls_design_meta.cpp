#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("INPUT_STREAM_TDATA", 8, hls_in, 0, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TVALID", 1, hls_in, 6, "axis", "in_vld", 1),
	Port_Property("INPUT_STREAM_TREADY", 1, hls_out, 6, "axis", "in_acc", 1),
	Port_Property("INPUT_STREAM_TKEEP", 1, hls_in, 1, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TSTRB", 1, hls_in, 2, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TUSER", 1, hls_in, 3, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TLAST", 1, hls_in, 4, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TID", 1, hls_in, 5, "axis", "in_data", 1),
	Port_Property("INPUT_STREAM_TDEST", 1, hls_in, 6, "axis", "in_data", 1),
	Port_Property("OUTPUT_STREAM_TDATA", 8, hls_out, 7, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TVALID", 1, hls_out, 13, "axis", "out_vld", 1),
	Port_Property("OUTPUT_STREAM_TREADY", 1, hls_in, 7, "axis", "out_acc", 1),
	Port_Property("OUTPUT_STREAM_TKEEP", 1, hls_out, 8, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TSTRB", 1, hls_out, 9, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TUSER", 1, hls_out, 10, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TLAST", 1, hls_out, 11, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TID", 1, hls_out, 12, "axis", "out_data", 1),
	Port_Property("OUTPUT_STREAM_TDEST", 1, hls_out, 13, "axis", "out_data", 1),
	Port_Property("male_match_V_data_V_din", 8, hls_out, 14, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_data_V_full_n", 1, hls_in, 14, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_data_V_write", 1, hls_out, 14, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_keep_V_din", 1, hls_out, 15, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_keep_V_full_n", 1, hls_in, 15, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_keep_V_write", 1, hls_out, 15, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_strb_V_din", 1, hls_out, 16, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_strb_V_full_n", 1, hls_in, 16, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_strb_V_write", 1, hls_out, 16, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_user_V_din", 1, hls_out, 17, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_user_V_full_n", 1, hls_in, 17, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_user_V_write", 1, hls_out, 17, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_last_V_din", 1, hls_out, 18, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_last_V_full_n", 1, hls_in, 18, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_last_V_write", 1, hls_out, 18, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_id_V_din", 1, hls_out, 19, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_id_V_full_n", 1, hls_in, 19, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_id_V_write", 1, hls_out, 19, "ap_fifo", "fifo_update", 3),
	Port_Property("male_match_V_dest_V_din", 1, hls_out, 20, "ap_fifo", "fifo_data", 3),
	Port_Property("male_match_V_dest_V_full_n", 1, hls_in, 20, "ap_fifo", "fifo_status", 3),
	Port_Property("male_match_V_dest_V_write", 1, hls_out, 20, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_data_V_din", 8, hls_out, 21, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_data_V_full_n", 1, hls_in, 21, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_data_V_write", 1, hls_out, 21, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_keep_V_din", 1, hls_out, 22, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_keep_V_full_n", 1, hls_in, 22, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_keep_V_write", 1, hls_out, 22, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_strb_V_din", 1, hls_out, 23, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_strb_V_full_n", 1, hls_in, 23, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_strb_V_write", 1, hls_out, 23, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_user_V_din", 1, hls_out, 24, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_user_V_full_n", 1, hls_in, 24, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_user_V_write", 1, hls_out, 24, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_last_V_din", 1, hls_out, 25, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_last_V_full_n", 1, hls_in, 25, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_last_V_write", 1, hls_out, 25, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_id_V_din", 1, hls_out, 26, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_id_V_full_n", 1, hls_in, 26, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_id_V_write", 1, hls_out, 26, "ap_fifo", "fifo_update", 3),
	Port_Property("female_match_V_dest_V_din", 1, hls_out, 27, "ap_fifo", "fifo_data", 3),
	Port_Property("female_match_V_dest_V_full_n", 1, hls_in, 27, "ap_fifo", "fifo_status", 3),
	Port_Property("female_match_V_dest_V_write", 1, hls_out, 27, "ap_fifo", "fifo_update", 3),
	Port_Property("counter_area_out_address0", 8, hls_out, 28, "ap_memory", "mem_address", 1),
	Port_Property("counter_area_out_ce0", 1, hls_out, 28, "ap_memory", "mem_ce", 1),
	Port_Property("counter_area_out_we0", 1, hls_out, 28, "ap_memory", "mem_we", 1),
	Port_Property("counter_area_out_d0", 32, hls_out, 28, "ap_memory", "mem_din", 1),
	Port_Property("mean_x_position_address0", 8, hls_out, 29, "ap_memory", "mem_address", 1),
	Port_Property("mean_x_position_ce0", 1, hls_out, 29, "ap_memory", "mem_ce", 1),
	Port_Property("mean_x_position_we0", 1, hls_out, 29, "ap_memory", "mem_we", 1),
	Port_Property("mean_x_position_d0", 32, hls_out, 29, "ap_memory", "mem_din", 1),
	Port_Property("mean_y_position_address0", 8, hls_out, 30, "ap_memory", "mem_address", 1),
	Port_Property("mean_y_position_ce0", 1, hls_out, 30, "ap_memory", "mem_ce", 1),
	Port_Property("mean_y_position_we0", 1, hls_out, 30, "ap_memory", "mem_we", 1),
	Port_Property("mean_y_position_d0", 32, hls_out, 30, "ap_memory", "mem_din", 1),
};
const char* HLS_Design_Meta::dut_name = "contours_finder";
