// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axis_to_axiVideoStream.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_to_axiVideoStream::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_to_axiVideoStream::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> axis_to_axiVideoStream::ap_ST_fsm_state1 = "1";
const sc_lv<2> axis_to_axiVideoStream::ap_ST_fsm_state2 = "10";
const sc_lv<32> axis_to_axiVideoStream::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> axis_to_axiVideoStream::ap_const_lv1_0 = "0";
const sc_lv<1> axis_to_axiVideoStream::ap_const_lv1_1 = "1";
const sc_lv<2> axis_to_axiVideoStream::ap_const_lv2_0 = "00";
const sc_lv<2> axis_to_axiVideoStream::ap_const_lv2_2 = "10";
const sc_lv<2> axis_to_axiVideoStream::ap_const_lv2_3 = "11";
const sc_lv<2> axis_to_axiVideoStream::ap_const_lv2_1 = "1";
const sc_lv<32> axis_to_axiVideoStream::ap_const_lv32_1 = "1";
const sc_lv<32> axis_to_axiVideoStream::ap_const_lv32_13F = "100111111";
const sc_lv<32> axis_to_axiVideoStream::ap_const_lv32_140 = "101000000";
const sc_lv<32> axis_to_axiVideoStream::ap_const_lv32_F0 = "11110000";
const bool axis_to_axiVideoStream::ap_const_boolean_1 = true;

axis_to_axiVideoStream::axis_to_axiVideoStream(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_STREAM_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_data_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_sel);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_sel);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_id_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_sel);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_sel);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_sel);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_OUTPUT_STREAM_TDEST);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TID);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TKEEP);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TLAST);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TSTRB);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TUSER);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TVALID);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_853);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_not_tmp_2_fu_172_p2);
    sensitive << ( tmp_user_V_fu_159_p2 );

    SC_METHOD(thread_p_s_fu_209_p3);
    sensitive << ( tmp_8_fu_197_p2 );
    sensitive << ( tmp_9_fu_203_p2 );

    SC_METHOD(thread_tmp_1_fu_153_p2);
    sensitive << ( width_count );
    sensitive << ( height_count );

    SC_METHOD(thread_tmp_3_fu_166_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( width_count );

    SC_METHOD(thread_tmp_6_fu_185_p2);
    sensitive << ( width_count );

    SC_METHOD(thread_tmp_7_fu_191_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( tmp_6_fu_185_p2 );

    SC_METHOD(thread_tmp_8_fu_197_p2);
    sensitive << ( height_count );

    SC_METHOD(thread_tmp_9_fu_203_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( tmp_7_fu_191_p2 );
    sensitive << ( tmp_8_fu_197_p2 );

    SC_METHOD(thread_tmp_last_V_fu_178_p2);
    sensitive << ( tmp_3_fu_166_p2 );
    sensitive << ( not_tmp_2_fu_172_p2 );

    SC_METHOD(thread_tmp_user_V_fu_159_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( tmp_1_fu_153_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    INPUT_STREAM_V_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_state = "00";
    INPUT_STREAM_V_keep_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_state = "00";
    INPUT_STREAM_V_strb_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_state = "00";
    INPUT_STREAM_V_id_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_state = "00";
    INPUT_STREAM_V_dest_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_state = "00";
    OUTPUT_STREAM_V_data_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_state = "00";
    OUTPUT_STREAM_V_keep_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_state = "00";
    OUTPUT_STREAM_V_strb_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_state = "00";
    OUTPUT_STREAM_V_user_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_state = "00";
    OUTPUT_STREAM_V_last_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_state = "00";
    OUTPUT_STREAM_V_id_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_state = "00";
    OUTPUT_STREAM_V_dest_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_state = "00";
    width_count = "00000000000000000000000000000000";
    height_count = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_to_axiVideoStream_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA, "(port)OUTPUT_STREAM_TDATA");
    sc_trace(mVcdFile, OUTPUT_STREAM_TVALID, "(port)OUTPUT_STREAM_TVALID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TREADY, "(port)OUTPUT_STREAM_TREADY");
    sc_trace(mVcdFile, OUTPUT_STREAM_TKEEP, "(port)OUTPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, OUTPUT_STREAM_TSTRB, "(port)OUTPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, OUTPUT_STREAM_TUSER, "(port)OUTPUT_STREAM_TUSER");
    sc_trace(mVcdFile, OUTPUT_STREAM_TLAST, "(port)OUTPUT_STREAM_TLAST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TID, "(port)OUTPUT_STREAM_TID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDEST, "(port)OUTPUT_STREAM_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_data_out, "INPUT_STREAM_V_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_in, "INPUT_STREAM_V_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_out, "INPUT_STREAM_V_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_in, "INPUT_STREAM_V_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_out, "INPUT_STREAM_V_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_A, "INPUT_STREAM_V_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_B, "INPUT_STREAM_V_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_rd, "INPUT_STREAM_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_wr, "INPUT_STREAM_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel, "INPUT_STREAM_V_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_A, "INPUT_STREAM_V_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_B, "INPUT_STREAM_V_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state, "INPUT_STREAM_V_data_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state_cmp_full, "INPUT_STREAM_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_data_out, "INPUT_STREAM_V_keep_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_in, "INPUT_STREAM_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_out, "INPUT_STREAM_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_in, "INPUT_STREAM_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_out, "INPUT_STREAM_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_A, "INPUT_STREAM_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_B, "INPUT_STREAM_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_rd, "INPUT_STREAM_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_wr, "INPUT_STREAM_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel, "INPUT_STREAM_V_keep_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_A, "INPUT_STREAM_V_keep_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_B, "INPUT_STREAM_V_keep_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state, "INPUT_STREAM_V_keep_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state_cmp_full, "INPUT_STREAM_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_data_out, "INPUT_STREAM_V_strb_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_in, "INPUT_STREAM_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_out, "INPUT_STREAM_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_in, "INPUT_STREAM_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_out, "INPUT_STREAM_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_A, "INPUT_STREAM_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_B, "INPUT_STREAM_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_rd, "INPUT_STREAM_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_wr, "INPUT_STREAM_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel, "INPUT_STREAM_V_strb_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_A, "INPUT_STREAM_V_strb_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_B, "INPUT_STREAM_V_strb_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state, "INPUT_STREAM_V_strb_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state_cmp_full, "INPUT_STREAM_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_data_out, "INPUT_STREAM_V_id_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_in, "INPUT_STREAM_V_id_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_out, "INPUT_STREAM_V_id_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_in, "INPUT_STREAM_V_id_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_out, "INPUT_STREAM_V_id_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_A, "INPUT_STREAM_V_id_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_B, "INPUT_STREAM_V_id_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_rd, "INPUT_STREAM_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_wr, "INPUT_STREAM_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel, "INPUT_STREAM_V_id_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_A, "INPUT_STREAM_V_id_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_B, "INPUT_STREAM_V_id_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state, "INPUT_STREAM_V_id_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state_cmp_full, "INPUT_STREAM_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_data_out, "INPUT_STREAM_V_dest_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_in, "INPUT_STREAM_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_out, "INPUT_STREAM_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_in, "INPUT_STREAM_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_out, "INPUT_STREAM_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_A, "INPUT_STREAM_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_B, "INPUT_STREAM_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_rd, "INPUT_STREAM_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_wr, "INPUT_STREAM_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel, "INPUT_STREAM_V_dest_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_A, "INPUT_STREAM_V_dest_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_B, "INPUT_STREAM_V_dest_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state, "INPUT_STREAM_V_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state_cmp_full, "INPUT_STREAM_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_data_out, "OUTPUT_STREAM_V_data_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_in, "OUTPUT_STREAM_V_data_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_out, "OUTPUT_STREAM_V_data_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_in, "OUTPUT_STREAM_V_data_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_out, "OUTPUT_STREAM_V_data_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_A, "OUTPUT_STREAM_V_data_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_B, "OUTPUT_STREAM_V_data_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_rd, "OUTPUT_STREAM_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_wr, "OUTPUT_STREAM_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel, "OUTPUT_STREAM_V_data_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_A, "OUTPUT_STREAM_V_data_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_B, "OUTPUT_STREAM_V_data_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state, "OUTPUT_STREAM_V_data_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state_cmp_full, "OUTPUT_STREAM_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_data_out, "OUTPUT_STREAM_V_keep_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_in, "OUTPUT_STREAM_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_out, "OUTPUT_STREAM_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_in, "OUTPUT_STREAM_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_out, "OUTPUT_STREAM_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_A, "OUTPUT_STREAM_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_B, "OUTPUT_STREAM_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_rd, "OUTPUT_STREAM_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_wr, "OUTPUT_STREAM_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel, "OUTPUT_STREAM_V_keep_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_A, "OUTPUT_STREAM_V_keep_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_B, "OUTPUT_STREAM_V_keep_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state, "OUTPUT_STREAM_V_keep_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state_cmp_full, "OUTPUT_STREAM_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_data_out, "OUTPUT_STREAM_V_strb_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_in, "OUTPUT_STREAM_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_out, "OUTPUT_STREAM_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_in, "OUTPUT_STREAM_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_out, "OUTPUT_STREAM_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_A, "OUTPUT_STREAM_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_B, "OUTPUT_STREAM_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_rd, "OUTPUT_STREAM_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_wr, "OUTPUT_STREAM_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel, "OUTPUT_STREAM_V_strb_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_A, "OUTPUT_STREAM_V_strb_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_B, "OUTPUT_STREAM_V_strb_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state, "OUTPUT_STREAM_V_strb_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state_cmp_full, "OUTPUT_STREAM_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_data_out, "OUTPUT_STREAM_V_user_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_in, "OUTPUT_STREAM_V_user_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_out, "OUTPUT_STREAM_V_user_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_in, "OUTPUT_STREAM_V_user_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_out, "OUTPUT_STREAM_V_user_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_A, "OUTPUT_STREAM_V_user_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_B, "OUTPUT_STREAM_V_user_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_rd, "OUTPUT_STREAM_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_wr, "OUTPUT_STREAM_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel, "OUTPUT_STREAM_V_user_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_A, "OUTPUT_STREAM_V_user_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_B, "OUTPUT_STREAM_V_user_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state, "OUTPUT_STREAM_V_user_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state_cmp_full, "OUTPUT_STREAM_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_data_out, "OUTPUT_STREAM_V_last_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_in, "OUTPUT_STREAM_V_last_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_out, "OUTPUT_STREAM_V_last_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_in, "OUTPUT_STREAM_V_last_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_out, "OUTPUT_STREAM_V_last_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_A, "OUTPUT_STREAM_V_last_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_B, "OUTPUT_STREAM_V_last_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_rd, "OUTPUT_STREAM_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_wr, "OUTPUT_STREAM_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel, "OUTPUT_STREAM_V_last_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_A, "OUTPUT_STREAM_V_last_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_B, "OUTPUT_STREAM_V_last_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state, "OUTPUT_STREAM_V_last_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state_cmp_full, "OUTPUT_STREAM_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_data_out, "OUTPUT_STREAM_V_id_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_in, "OUTPUT_STREAM_V_id_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_out, "OUTPUT_STREAM_V_id_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_in, "OUTPUT_STREAM_V_id_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_out, "OUTPUT_STREAM_V_id_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_A, "OUTPUT_STREAM_V_id_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_B, "OUTPUT_STREAM_V_id_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_rd, "OUTPUT_STREAM_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_wr, "OUTPUT_STREAM_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel, "OUTPUT_STREAM_V_id_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_A, "OUTPUT_STREAM_V_id_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_B, "OUTPUT_STREAM_V_id_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state, "OUTPUT_STREAM_V_id_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state_cmp_full, "OUTPUT_STREAM_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_data_out, "OUTPUT_STREAM_V_dest_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_in, "OUTPUT_STREAM_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_out, "OUTPUT_STREAM_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_in, "OUTPUT_STREAM_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_out, "OUTPUT_STREAM_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_A, "OUTPUT_STREAM_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_B, "OUTPUT_STREAM_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_rd, "OUTPUT_STREAM_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_wr, "OUTPUT_STREAM_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel, "OUTPUT_STREAM_V_dest_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_A, "OUTPUT_STREAM_V_dest_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_B, "OUTPUT_STREAM_V_dest_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state, "OUTPUT_STREAM_V_dest_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state_cmp_full, "OUTPUT_STREAM_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, width_count, "width_count");
    sc_trace(mVcdFile, height_count, "height_count");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA_blk_n, "INPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA_blk_n, "OUTPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_user_V_fu_159_p2, "tmp_user_V_fu_159_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_178_p2, "tmp_last_V_fu_178_p2");
    sc_trace(mVcdFile, tmp_6_fu_185_p2, "tmp_6_fu_185_p2");
    sc_trace(mVcdFile, width_count_new_reg_109, "width_count_new_reg_109");
    sc_trace(mVcdFile, tmp_7_fu_191_p2, "tmp_7_fu_191_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, p_s_fu_209_p3, "p_s_fu_209_p3");
    sc_trace(mVcdFile, tmp_1_fu_153_p2, "tmp_1_fu_153_p2");
    sc_trace(mVcdFile, tmp_3_fu_166_p2, "tmp_3_fu_166_p2");
    sc_trace(mVcdFile, not_tmp_2_fu_172_p2, "not_tmp_2_fu_172_p2");
    sc_trace(mVcdFile, tmp_8_fu_197_p2, "tmp_8_fu_197_p2");
    sc_trace(mVcdFile, tmp_9_fu_203_p2, "tmp_9_fu_203_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_853, "ap_condition_853");
#endif

    }
    mHdltvinHandle.open("axis_to_axiVideoStream.hdltvin.dat");
    mHdltvoutHandle.open("axis_to_axiVideoStream.hdltvout.dat");
}

axis_to_axiVideoStream::~axis_to_axiVideoStream() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void axis_to_axiVideoStream::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_out.read()))) {
            INPUT_STREAM_V_data_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_in.read()))) {
            INPUT_STREAM_V_data_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_out.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_in.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_out.read()))) {
            INPUT_STREAM_V_id_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_in.read()))) {
            INPUT_STREAM_V_id_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_out.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_in.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_out.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_in.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_condition_853.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_191_p2.read())) {
            width_count_new_reg_109 = tmp_6_fu_185_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_191_p2.read())) {
            width_count_new_reg_109 = ap_const_lv32_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_A.read())) {
        INPUT_STREAM_V_data_V_0_payload_A = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_B.read())) {
        INPUT_STREAM_V_data_V_0_payload_B = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_A.read())) {
        INPUT_STREAM_V_dest_V_0_payload_A = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_B.read())) {
        INPUT_STREAM_V_dest_V_0_payload_B = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_A.read())) {
        INPUT_STREAM_V_id_V_0_payload_A = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_B.read())) {
        INPUT_STREAM_V_id_V_0_payload_B = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_A.read())) {
        INPUT_STREAM_V_keep_V_0_payload_A = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_B.read())) {
        INPUT_STREAM_V_keep_V_0_payload_B = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_A.read())) {
        INPUT_STREAM_V_strb_V_0_payload_A = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_B.read())) {
        INPUT_STREAM_V_strb_V_0_payload_B = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_A.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_A = INPUT_STREAM_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_B.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_B = INPUT_STREAM_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_A.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_A = INPUT_STREAM_V_dest_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_B.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_B = INPUT_STREAM_V_dest_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_A.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_A = INPUT_STREAM_V_id_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_B.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_B = INPUT_STREAM_V_id_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_A.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_A = INPUT_STREAM_V_keep_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_B.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_B = INPUT_STREAM_V_keep_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_A.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_A = tmp_last_V_fu_178_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_B.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_B = tmp_last_V_fu_178_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_A.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_A = INPUT_STREAM_V_strb_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_B.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_B = INPUT_STREAM_V_strb_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_A.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_A = tmp_user_V_fu_159_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_B.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_B = tmp_user_V_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_191_p2.read()))) {
        height_count = p_s_fu_209_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())))) {
        width_count = width_count_new_reg_109.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state.read()[0];
    } else {
        INPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_ack_in() {
    INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_sel.read())) {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_load_A() {
    INPUT_STREAM_V_data_V_0_load_A = (INPUT_STREAM_V_data_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_data_V_0_sel_wr.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_load_B() {
    INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_sel_wr.read() & INPUT_STREAM_V_data_V_0_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_sel() {
    INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_state_cmp_full() {
    INPUT_STREAM_V_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_vld_in() {
    INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_data_V_0_vld_out() {
    INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state.read()[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_ack_in() {
    INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_sel.read())) {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_load_A() {
    INPUT_STREAM_V_dest_V_0_load_A = (INPUT_STREAM_V_dest_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_dest_V_0_sel_wr.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_load_B() {
    INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_sel_wr.read() & INPUT_STREAM_V_dest_V_0_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_sel() {
    INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_state_cmp_full() {
    INPUT_STREAM_V_dest_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_vld_in() {
    INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_dest_V_0_vld_out() {
    INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state.read()[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_ack_in() {
    INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_sel.read())) {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_load_A() {
    INPUT_STREAM_V_id_V_0_load_A = (INPUT_STREAM_V_id_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_id_V_0_sel_wr.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_load_B() {
    INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_sel_wr.read() & INPUT_STREAM_V_id_V_0_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_sel() {
    INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_state_cmp_full() {
    INPUT_STREAM_V_id_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_vld_in() {
    INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_id_V_0_vld_out() {
    INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state.read()[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_ack_in() {
    INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_sel.read())) {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_load_A() {
    INPUT_STREAM_V_keep_V_0_load_A = (INPUT_STREAM_V_keep_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_keep_V_0_sel_wr.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_load_B() {
    INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_sel_wr.read() & INPUT_STREAM_V_keep_V_0_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_sel() {
    INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_state_cmp_full() {
    INPUT_STREAM_V_keep_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_vld_in() {
    INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_keep_V_0_vld_out() {
    INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state.read()[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_ack_in() {
    INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state.read()[1];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_sel.read())) {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_load_A() {
    INPUT_STREAM_V_strb_V_0_load_A = (INPUT_STREAM_V_strb_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_strb_V_0_sel_wr.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_load_B() {
    INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_sel_wr.read() & INPUT_STREAM_V_strb_V_0_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_sel() {
    INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_state_cmp_full() {
    INPUT_STREAM_V_strb_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_vld_in() {
    INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void axis_to_axiVideoStream::thread_INPUT_STREAM_V_strb_V_0_vld_out() {
    INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TDATA() {
    OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state.read()[1];
    } else {
        OUTPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TDEST() {
    OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TID() {
    OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TKEEP() {
    OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TLAST() {
    OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TSTRB() {
    OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TUSER() {
    OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_TVALID() {
    OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_ack_in() {
    OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_ack_out() {
    OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_sel.read())) {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_load_A() {
    OUTPUT_STREAM_V_data_V_1_load_A = (OUTPUT_STREAM_V_data_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_load_B() {
    OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_sel_wr.read() & OUTPUT_STREAM_V_data_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_sel() {
    OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_data_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_data_V_1_vld_out() {
    OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_ack_in() {
    OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_ack_out() {
    OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_sel.read())) {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_load_A() {
    OUTPUT_STREAM_V_dest_V_1_load_A = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_load_B() {
    OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_sel_wr.read() & OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_sel() {
    OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_dest_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_dest_V_1_vld_out() {
    OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_ack_in() {
    OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_ack_out() {
    OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_sel.read())) {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_load_A() {
    OUTPUT_STREAM_V_id_V_1_load_A = (OUTPUT_STREAM_V_id_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_load_B() {
    OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_sel_wr.read() & OUTPUT_STREAM_V_id_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_sel() {
    OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_id_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_id_V_1_vld_out() {
    OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_ack_in() {
    OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_ack_out() {
    OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_sel.read())) {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_load_A() {
    OUTPUT_STREAM_V_keep_V_1_load_A = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_load_B() {
    OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_sel_wr.read() & OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_sel() {
    OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_keep_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_keep_V_1_vld_out() {
    OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_ack_in() {
    OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_ack_out() {
    OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_sel.read())) {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_load_A() {
    OUTPUT_STREAM_V_last_V_1_load_A = (OUTPUT_STREAM_V_last_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_load_B() {
    OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_sel_wr.read() & OUTPUT_STREAM_V_last_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_sel() {
    OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_last_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_last_V_1_vld_out() {
    OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_ack_in() {
    OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_ack_out() {
    OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_sel.read())) {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_load_A() {
    OUTPUT_STREAM_V_strb_V_1_load_A = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_load_B() {
    OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_sel_wr.read() & OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_sel() {
    OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_strb_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_strb_V_1_vld_out() {
    OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_ack_in() {
    OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state.read()[1];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_ack_out() {
    OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_sel.read())) {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A.read();
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_load_A() {
    OUTPUT_STREAM_V_user_V_1_load_A = (OUTPUT_STREAM_V_user_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_load_B() {
    OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_sel_wr.read() & OUTPUT_STREAM_V_user_V_1_state_cmp_full.read());
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_sel() {
    OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd.read();
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_user_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_OUTPUT_STREAM_V_user_V_1_vld_out() {
    OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state.read()[0];
}

void axis_to_axiVideoStream::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axis_to_axiVideoStream::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axis_to_axiVideoStream::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()));
}

void axis_to_axiVideoStream::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()));
}

void axis_to_axiVideoStream::thread_ap_condition_853() {
    ap_condition_853 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())));
}

void axis_to_axiVideoStream::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axis_to_axiVideoStream::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_to_axiVideoStream::thread_not_tmp_2_fu_172_p2() {
    not_tmp_2_fu_172_p2 = (tmp_user_V_fu_159_p2.read() ^ ap_const_lv1_1);
}

void axis_to_axiVideoStream::thread_p_s_fu_209_p3() {
    p_s_fu_209_p3 = (!tmp_9_fu_203_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_9_fu_203_p2.read()[0].to_bool())? ap_const_lv32_0: tmp_8_fu_197_p2.read());
}

void axis_to_axiVideoStream::thread_tmp_1_fu_153_p2() {
    tmp_1_fu_153_p2 = (height_count.read() | width_count.read());
}

void axis_to_axiVideoStream::thread_tmp_3_fu_166_p2() {
    tmp_3_fu_166_p2 = (!width_count.read().is_01() || !ap_const_lv32_13F.is_01())? sc_lv<1>(): sc_lv<1>(width_count.read() == ap_const_lv32_13F);
}

void axis_to_axiVideoStream::thread_tmp_6_fu_185_p2() {
    tmp_6_fu_185_p2 = (!width_count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(width_count.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_axiVideoStream::thread_tmp_7_fu_191_p2() {
    tmp_7_fu_191_p2 = (!tmp_6_fu_185_p2.read().is_01() || !ap_const_lv32_140.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_185_p2.read() == ap_const_lv32_140);
}

void axis_to_axiVideoStream::thread_tmp_8_fu_197_p2() {
    tmp_8_fu_197_p2 = (!height_count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(height_count.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_axiVideoStream::thread_tmp_9_fu_203_p2() {
    tmp_9_fu_203_p2 = (!tmp_8_fu_197_p2.read().is_01() || !ap_const_lv32_F0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_fu_197_p2.read() == ap_const_lv32_F0);
}

void axis_to_axiVideoStream::thread_tmp_last_V_fu_178_p2() {
    tmp_last_V_fu_178_p2 = (tmp_3_fu_166_p2.read() & not_tmp_2_fu_172_p2.read());
}

void axis_to_axiVideoStream::thread_tmp_user_V_fu_159_p2() {
    tmp_user_V_fu_159_p2 = (!tmp_1_fu_153_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_153_p2.read() == ap_const_lv32_0);
}

void axis_to_axiVideoStream::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_state.read()[0]))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void axis_to_axiVideoStream::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDATA\" :  \"" << OUTPUT_STREAM_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TVALID\" :  \"" << OUTPUT_STREAM_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUTPUT_STREAM_TREADY\" :  \"" << OUTPUT_STREAM_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TKEEP\" :  \"" << OUTPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TSTRB\" :  \"" << OUTPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TUSER\" :  \"" << OUTPUT_STREAM_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TLAST\" :  \"" << OUTPUT_STREAM_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TID\" :  \"" << OUTPUT_STREAM_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDEST\" :  \"" << OUTPUT_STREAM_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

