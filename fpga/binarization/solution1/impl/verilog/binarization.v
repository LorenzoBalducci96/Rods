// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binarization,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.544000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=123,HLS_SYN_LUT=562,HLS_VERSION=2018_3}" *)

module binarization (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST,
        INPUT_STREAM_TID,
        INPUT_STREAM_TDEST,
        threshold,
        update_threshold_V,
        inverted_V,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] INPUT_STREAM_TDATA;
input   INPUT_STREAM_TVALID;
output   INPUT_STREAM_TREADY;
input  [0:0] INPUT_STREAM_TKEEP;
input  [0:0] INPUT_STREAM_TSTRB;
input  [0:0] INPUT_STREAM_TUSER;
input  [0:0] INPUT_STREAM_TLAST;
input  [0:0] INPUT_STREAM_TID;
input  [0:0] INPUT_STREAM_TDEST;
input  [7:0] threshold;
input  [0:0] update_threshold_V;
input  [0:0] inverted_V;
output  [7:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [0:0] OUTPUT_STREAM_TKEEP;
output  [0:0] OUTPUT_STREAM_TSTRB;
output  [0:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [0:0] OUTPUT_STREAM_TID;
output  [0:0] OUTPUT_STREAM_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] INPUT_STREAM_V_data_V_0_data_out;
wire    INPUT_STREAM_V_data_V_0_vld_in;
wire    INPUT_STREAM_V_data_V_0_vld_out;
wire    INPUT_STREAM_V_data_V_0_ack_in;
reg    INPUT_STREAM_V_data_V_0_ack_out;
reg   [7:0] INPUT_STREAM_V_data_V_0_payload_A;
reg   [7:0] INPUT_STREAM_V_data_V_0_payload_B;
reg    INPUT_STREAM_V_data_V_0_sel_rd;
reg    INPUT_STREAM_V_data_V_0_sel_wr;
wire    INPUT_STREAM_V_data_V_0_sel;
wire    INPUT_STREAM_V_data_V_0_load_A;
wire    INPUT_STREAM_V_data_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_data_V_0_state;
wire    INPUT_STREAM_V_data_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_keep_V_0_data_out;
wire    INPUT_STREAM_V_keep_V_0_vld_in;
wire    INPUT_STREAM_V_keep_V_0_vld_out;
wire    INPUT_STREAM_V_keep_V_0_ack_in;
reg    INPUT_STREAM_V_keep_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_keep_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_keep_V_0_payload_B;
reg    INPUT_STREAM_V_keep_V_0_sel_rd;
reg    INPUT_STREAM_V_keep_V_0_sel_wr;
wire    INPUT_STREAM_V_keep_V_0_sel;
wire    INPUT_STREAM_V_keep_V_0_load_A;
wire    INPUT_STREAM_V_keep_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_keep_V_0_state;
wire    INPUT_STREAM_V_keep_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_strb_V_0_data_out;
wire    INPUT_STREAM_V_strb_V_0_vld_in;
wire    INPUT_STREAM_V_strb_V_0_vld_out;
wire    INPUT_STREAM_V_strb_V_0_ack_in;
reg    INPUT_STREAM_V_strb_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_strb_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_strb_V_0_payload_B;
reg    INPUT_STREAM_V_strb_V_0_sel_rd;
reg    INPUT_STREAM_V_strb_V_0_sel_wr;
wire    INPUT_STREAM_V_strb_V_0_sel;
wire    INPUT_STREAM_V_strb_V_0_load_A;
wire    INPUT_STREAM_V_strb_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_strb_V_0_state;
wire    INPUT_STREAM_V_strb_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_user_V_0_data_out;
wire    INPUT_STREAM_V_user_V_0_vld_in;
wire    INPUT_STREAM_V_user_V_0_vld_out;
wire    INPUT_STREAM_V_user_V_0_ack_in;
reg    INPUT_STREAM_V_user_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_user_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_user_V_0_payload_B;
reg    INPUT_STREAM_V_user_V_0_sel_rd;
reg    INPUT_STREAM_V_user_V_0_sel_wr;
wire    INPUT_STREAM_V_user_V_0_sel;
wire    INPUT_STREAM_V_user_V_0_load_A;
wire    INPUT_STREAM_V_user_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_user_V_0_state;
wire    INPUT_STREAM_V_user_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_last_V_0_data_out;
wire    INPUT_STREAM_V_last_V_0_vld_in;
wire    INPUT_STREAM_V_last_V_0_vld_out;
wire    INPUT_STREAM_V_last_V_0_ack_in;
reg    INPUT_STREAM_V_last_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_B;
reg    INPUT_STREAM_V_last_V_0_sel_rd;
reg    INPUT_STREAM_V_last_V_0_sel_wr;
wire    INPUT_STREAM_V_last_V_0_sel;
wire    INPUT_STREAM_V_last_V_0_load_A;
wire    INPUT_STREAM_V_last_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_last_V_0_state;
wire    INPUT_STREAM_V_last_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_id_V_0_data_out;
wire    INPUT_STREAM_V_id_V_0_vld_in;
wire    INPUT_STREAM_V_id_V_0_vld_out;
wire    INPUT_STREAM_V_id_V_0_ack_in;
reg    INPUT_STREAM_V_id_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_id_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_id_V_0_payload_B;
reg    INPUT_STREAM_V_id_V_0_sel_rd;
reg    INPUT_STREAM_V_id_V_0_sel_wr;
wire    INPUT_STREAM_V_id_V_0_sel;
wire    INPUT_STREAM_V_id_V_0_load_A;
wire    INPUT_STREAM_V_id_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_id_V_0_state;
wire    INPUT_STREAM_V_id_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_dest_V_0_data_out;
wire    INPUT_STREAM_V_dest_V_0_vld_in;
wire    INPUT_STREAM_V_dest_V_0_vld_out;
wire    INPUT_STREAM_V_dest_V_0_ack_in;
reg    INPUT_STREAM_V_dest_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_dest_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_dest_V_0_payload_B;
reg    INPUT_STREAM_V_dest_V_0_sel_rd;
reg    INPUT_STREAM_V_dest_V_0_sel_wr;
wire    INPUT_STREAM_V_dest_V_0_sel;
wire    INPUT_STREAM_V_dest_V_0_load_A;
wire    INPUT_STREAM_V_dest_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_dest_V_0_state;
wire    INPUT_STREAM_V_dest_V_0_state_cmp_full;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_data_out;
reg    OUTPUT_STREAM_V_data_V_1_vld_in;
wire    OUTPUT_STREAM_V_data_V_1_vld_out;
wire    OUTPUT_STREAM_V_data_V_1_ack_in;
wire    OUTPUT_STREAM_V_data_V_1_ack_out;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_payload_A;
reg   [7:0] OUTPUT_STREAM_V_data_V_1_payload_B;
reg    OUTPUT_STREAM_V_data_V_1_sel_rd;
reg    OUTPUT_STREAM_V_data_V_1_sel_wr;
wire    OUTPUT_STREAM_V_data_V_1_sel;
wire    OUTPUT_STREAM_V_data_V_1_load_A;
wire    OUTPUT_STREAM_V_data_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_data_V_1_state;
wire    OUTPUT_STREAM_V_data_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_data_out;
reg    OUTPUT_STREAM_V_keep_V_1_vld_in;
wire    OUTPUT_STREAM_V_keep_V_1_vld_out;
wire    OUTPUT_STREAM_V_keep_V_1_ack_in;
wire    OUTPUT_STREAM_V_keep_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_keep_V_1_payload_B;
reg    OUTPUT_STREAM_V_keep_V_1_sel_rd;
reg    OUTPUT_STREAM_V_keep_V_1_sel_wr;
wire    OUTPUT_STREAM_V_keep_V_1_sel;
wire    OUTPUT_STREAM_V_keep_V_1_load_A;
wire    OUTPUT_STREAM_V_keep_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_keep_V_1_state;
wire    OUTPUT_STREAM_V_keep_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_data_out;
reg    OUTPUT_STREAM_V_strb_V_1_vld_in;
wire    OUTPUT_STREAM_V_strb_V_1_vld_out;
wire    OUTPUT_STREAM_V_strb_V_1_ack_in;
wire    OUTPUT_STREAM_V_strb_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_strb_V_1_payload_B;
reg    OUTPUT_STREAM_V_strb_V_1_sel_rd;
reg    OUTPUT_STREAM_V_strb_V_1_sel_wr;
wire    OUTPUT_STREAM_V_strb_V_1_sel;
wire    OUTPUT_STREAM_V_strb_V_1_load_A;
wire    OUTPUT_STREAM_V_strb_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_strb_V_1_state;
wire    OUTPUT_STREAM_V_strb_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_data_out;
reg    OUTPUT_STREAM_V_user_V_1_vld_in;
wire    OUTPUT_STREAM_V_user_V_1_vld_out;
wire    OUTPUT_STREAM_V_user_V_1_ack_in;
wire    OUTPUT_STREAM_V_user_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_B;
reg    OUTPUT_STREAM_V_user_V_1_sel_rd;
reg    OUTPUT_STREAM_V_user_V_1_sel_wr;
wire    OUTPUT_STREAM_V_user_V_1_sel;
wire    OUTPUT_STREAM_V_user_V_1_load_A;
wire    OUTPUT_STREAM_V_user_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_state;
wire    OUTPUT_STREAM_V_user_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_data_out;
reg    OUTPUT_STREAM_V_last_V_1_vld_in;
wire    OUTPUT_STREAM_V_last_V_1_vld_out;
wire    OUTPUT_STREAM_V_last_V_1_ack_in;
wire    OUTPUT_STREAM_V_last_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_B;
reg    OUTPUT_STREAM_V_last_V_1_sel_rd;
reg    OUTPUT_STREAM_V_last_V_1_sel_wr;
wire    OUTPUT_STREAM_V_last_V_1_sel;
wire    OUTPUT_STREAM_V_last_V_1_load_A;
wire    OUTPUT_STREAM_V_last_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_last_V_1_state;
wire    OUTPUT_STREAM_V_last_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_data_out;
reg    OUTPUT_STREAM_V_id_V_1_vld_in;
wire    OUTPUT_STREAM_V_id_V_1_vld_out;
wire    OUTPUT_STREAM_V_id_V_1_ack_in;
wire    OUTPUT_STREAM_V_id_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_B;
reg    OUTPUT_STREAM_V_id_V_1_sel_rd;
reg    OUTPUT_STREAM_V_id_V_1_sel_wr;
wire    OUTPUT_STREAM_V_id_V_1_sel;
wire    OUTPUT_STREAM_V_id_V_1_load_A;
wire    OUTPUT_STREAM_V_id_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_id_V_1_state;
wire    OUTPUT_STREAM_V_id_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_data_out;
reg    OUTPUT_STREAM_V_dest_V_1_vld_in;
wire    OUTPUT_STREAM_V_dest_V_1_vld_out;
wire    OUTPUT_STREAM_V_dest_V_1_ack_in;
wire    OUTPUT_STREAM_V_dest_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_B;
reg    OUTPUT_STREAM_V_dest_V_1_sel_rd;
reg    OUTPUT_STREAM_V_dest_V_1_sel_wr;
wire    OUTPUT_STREAM_V_dest_V_1_sel;
wire    OUTPUT_STREAM_V_dest_V_1_load_A;
wire    OUTPUT_STREAM_V_dest_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_dest_V_1_state;
wire    OUTPUT_STREAM_V_dest_V_1_state_cmp_full;
reg   [7:0] threshold_memorized;
reg    INPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_data_V_1_fu_198_p3;
wire   [0:0] update_threshold_V_r_read_fu_80_p2;
wire   [0:0] tmp_2_fu_179_p2;
wire   [0:0] not_tmp_2_fu_185_p2;
wire   [0:0] tmp_data_V_2_fu_191_p3;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 INPUT_STREAM_V_data_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_data_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_data_V_0_state = 2'd0;
#0 INPUT_STREAM_V_keep_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_state = 2'd0;
#0 INPUT_STREAM_V_strb_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_state = 2'd0;
#0 INPUT_STREAM_V_user_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_user_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_user_V_0_state = 2'd0;
#0 INPUT_STREAM_V_last_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_last_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_last_V_0_state = 2'd0;
#0 INPUT_STREAM_V_id_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_id_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_id_V_0_state = 2'd0;
#0 INPUT_STREAM_V_dest_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_state = 2'd0;
#0 OUTPUT_STREAM_V_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_state = 2'd0;
#0 threshold_memorized = 8'd128;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_out))) begin
            INPUT_STREAM_V_data_V_0_sel_rd <= ~INPUT_STREAM_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in))) begin
            INPUT_STREAM_V_data_V_0_sel_wr <= ~INPUT_STREAM_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_data_V_0_state) & (1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_data_V_0_state)) | ((2'd1 == INPUT_STREAM_V_data_V_0_state) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_data_V_0_state) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_out))) begin
            INPUT_STREAM_V_dest_V_0_sel_rd <= ~INPUT_STREAM_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in))) begin
            INPUT_STREAM_V_dest_V_0_sel_wr <= ~INPUT_STREAM_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_dest_V_0_state) & (1'b0 == INPUT_STREAM_V_dest_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_dest_V_0_state) & (1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_dest_V_0_state) & (1'b0 == INPUT_STREAM_V_dest_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_dest_V_0_state) & (1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)) | ((2'd1 == INPUT_STREAM_V_dest_V_0_state) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_dest_V_0_state) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_out))) begin
            INPUT_STREAM_V_id_V_0_sel_rd <= ~INPUT_STREAM_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in))) begin
            INPUT_STREAM_V_id_V_0_sel_wr <= ~INPUT_STREAM_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_id_V_0_state) & (1'b0 == INPUT_STREAM_V_id_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_id_V_0_state) & (1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_id_V_0_state) & (1'b0 == INPUT_STREAM_V_id_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_id_V_0_state) & (1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_id_V_0_state)) | ((2'd1 == INPUT_STREAM_V_id_V_0_state) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_id_V_0_state) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_out))) begin
            INPUT_STREAM_V_keep_V_0_sel_rd <= ~INPUT_STREAM_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in))) begin
            INPUT_STREAM_V_keep_V_0_sel_wr <= ~INPUT_STREAM_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_keep_V_0_state) & (1'b0 == INPUT_STREAM_V_keep_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_keep_V_0_state) & (1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_keep_V_0_state) & (1'b0 == INPUT_STREAM_V_keep_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_keep_V_0_state) & (1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)) | ((2'd1 == INPUT_STREAM_V_keep_V_0_state) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_keep_V_0_state) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_out))) begin
            INPUT_STREAM_V_last_V_0_sel_rd <= ~INPUT_STREAM_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in))) begin
            INPUT_STREAM_V_last_V_0_sel_wr <= ~INPUT_STREAM_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_last_V_0_state) & (1'b0 == INPUT_STREAM_V_last_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_last_V_0_state) & (1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_last_V_0_state) & (1'b0 == INPUT_STREAM_V_last_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_last_V_0_state) & (1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_last_V_0_state)) | ((2'd1 == INPUT_STREAM_V_last_V_0_state) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_last_V_0_state) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_out))) begin
            INPUT_STREAM_V_strb_V_0_sel_rd <= ~INPUT_STREAM_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in))) begin
            INPUT_STREAM_V_strb_V_0_sel_wr <= ~INPUT_STREAM_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_strb_V_0_state) & (1'b0 == INPUT_STREAM_V_strb_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_strb_V_0_state) & (1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_strb_V_0_state) & (1'b0 == INPUT_STREAM_V_strb_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_strb_V_0_state) & (1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)) | ((2'd1 == INPUT_STREAM_V_strb_V_0_state) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_strb_V_0_state) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_out))) begin
            INPUT_STREAM_V_user_V_0_sel_rd <= ~INPUT_STREAM_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in))) begin
            INPUT_STREAM_V_user_V_0_sel_wr <= ~INPUT_STREAM_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_STREAM_V_user_V_0_state) & (1'b0 == INPUT_STREAM_V_user_V_0_vld_in)) | ((2'd3 == INPUT_STREAM_V_user_V_0_state) & (1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_STREAM_V_user_V_0_state) & (1'b0 == INPUT_STREAM_V_user_V_0_ack_out)) | ((2'd3 == INPUT_STREAM_V_user_V_0_state) & (1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_user_V_0_state)) | ((2'd1 == INPUT_STREAM_V_user_V_0_state) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out)) | ((2'd2 == INPUT_STREAM_V_user_V_0_state) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_out))) begin
            OUTPUT_STREAM_V_data_V_1_sel_rd <= ~OUTPUT_STREAM_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in))) begin
            OUTPUT_STREAM_V_data_V_1_sel_wr <= ~OUTPUT_STREAM_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_data_V_1_state) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_data_V_1_state) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_out))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_rd <= ~OUTPUT_STREAM_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_wr <= ~OUTPUT_STREAM_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_out))) begin
            OUTPUT_STREAM_V_id_V_1_sel_rd <= ~OUTPUT_STREAM_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in))) begin
            OUTPUT_STREAM_V_id_V_1_sel_wr <= ~OUTPUT_STREAM_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_id_V_1_state) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_id_V_1_state) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_out))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_rd <= ~OUTPUT_STREAM_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_wr <= ~OUTPUT_STREAM_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_out))) begin
            OUTPUT_STREAM_V_last_V_1_sel_rd <= ~OUTPUT_STREAM_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in))) begin
            OUTPUT_STREAM_V_last_V_1_sel_wr <= ~OUTPUT_STREAM_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_last_V_1_state) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_last_V_1_state) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_out))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_rd <= ~OUTPUT_STREAM_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_wr <= ~OUTPUT_STREAM_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_out))) begin
            OUTPUT_STREAM_V_user_V_1_sel_rd <= ~OUTPUT_STREAM_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in))) begin
            OUTPUT_STREAM_V_user_V_1_sel_wr <= ~OUTPUT_STREAM_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_user_V_1_state) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_user_V_1_state) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_A)) begin
        INPUT_STREAM_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_B)) begin
        INPUT_STREAM_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_A)) begin
        INPUT_STREAM_V_dest_V_0_payload_A <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_B)) begin
        INPUT_STREAM_V_dest_V_0_payload_B <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_A)) begin
        INPUT_STREAM_V_id_V_0_payload_A <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_B)) begin
        INPUT_STREAM_V_id_V_0_payload_B <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_A)) begin
        INPUT_STREAM_V_keep_V_0_payload_A <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_B)) begin
        INPUT_STREAM_V_keep_V_0_payload_B <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_A)) begin
        INPUT_STREAM_V_last_V_0_payload_A <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_B)) begin
        INPUT_STREAM_V_last_V_0_payload_B <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_A)) begin
        INPUT_STREAM_V_strb_V_0_payload_A <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_B)) begin
        INPUT_STREAM_V_strb_V_0_payload_B <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_A)) begin
        INPUT_STREAM_V_user_V_0_payload_A <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_B)) begin
        INPUT_STREAM_V_user_V_0_payload_B <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_A)) begin
        OUTPUT_STREAM_V_data_V_1_payload_A <= tmp_data_V_1_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_B)) begin
        OUTPUT_STREAM_V_data_V_1_payload_B <= tmp_data_V_1_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_A)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_A <= INPUT_STREAM_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_B)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_B <= INPUT_STREAM_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_A)) begin
        OUTPUT_STREAM_V_id_V_1_payload_A <= INPUT_STREAM_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_B)) begin
        OUTPUT_STREAM_V_id_V_1_payload_B <= INPUT_STREAM_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_A)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_A <= INPUT_STREAM_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_B)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_B <= INPUT_STREAM_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_A)) begin
        OUTPUT_STREAM_V_last_V_1_payload_A <= INPUT_STREAM_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_B)) begin
        OUTPUT_STREAM_V_last_V_1_payload_B <= INPUT_STREAM_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_A)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_A <= INPUT_STREAM_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_B)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_B <= INPUT_STREAM_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_A)) begin
        OUTPUT_STREAM_V_user_V_1_payload_A <= INPUT_STREAM_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_B)) begin
        OUTPUT_STREAM_V_user_V_1_payload_B <= INPUT_STREAM_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((update_threshold_V_r_read_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        threshold_memorized <= threshold;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state[1'd0];
    end else begin
        INPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_sel)) begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_sel)) begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_sel)) begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_sel)) begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_sel)) begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_sel)) begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_sel)) begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state[1'd1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_sel)) begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_sel)) begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_sel)) begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_sel)) begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_sel)) begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_sel)) begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_sel)) begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == INPUT_STREAM_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (OUTPUT_STREAM_V_dest_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_id_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_last_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_user_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_strb_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_keep_V_1_state[1'd0] == 1'b0) & (OUTPUT_STREAM_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_load_A = (~INPUT_STREAM_V_data_V_0_sel_wr & INPUT_STREAM_V_data_V_0_state_cmp_full);

assign INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_state_cmp_full & INPUT_STREAM_V_data_V_0_sel_wr);

assign INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd;

assign INPUT_STREAM_V_data_V_0_state_cmp_full = ((INPUT_STREAM_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state[1'd0];

assign INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_dest_V_0_load_A = (~INPUT_STREAM_V_dest_V_0_sel_wr & INPUT_STREAM_V_dest_V_0_state_cmp_full);

assign INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_state_cmp_full & INPUT_STREAM_V_dest_V_0_sel_wr);

assign INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd;

assign INPUT_STREAM_V_dest_V_0_state_cmp_full = ((INPUT_STREAM_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state[1'd0];

assign INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state[1'd1];

assign INPUT_STREAM_V_id_V_0_load_A = (~INPUT_STREAM_V_id_V_0_sel_wr & INPUT_STREAM_V_id_V_0_state_cmp_full);

assign INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_state_cmp_full & INPUT_STREAM_V_id_V_0_sel_wr);

assign INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd;

assign INPUT_STREAM_V_id_V_0_state_cmp_full = ((INPUT_STREAM_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state[1'd0];

assign INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state[1'd1];

assign INPUT_STREAM_V_keep_V_0_load_A = (~INPUT_STREAM_V_keep_V_0_sel_wr & INPUT_STREAM_V_keep_V_0_state_cmp_full);

assign INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_state_cmp_full & INPUT_STREAM_V_keep_V_0_sel_wr);

assign INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd;

assign INPUT_STREAM_V_keep_V_0_state_cmp_full = ((INPUT_STREAM_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state[1'd0];

assign INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state[1'd1];

assign INPUT_STREAM_V_last_V_0_load_A = (~INPUT_STREAM_V_last_V_0_sel_wr & INPUT_STREAM_V_last_V_0_state_cmp_full);

assign INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_state_cmp_full & INPUT_STREAM_V_last_V_0_sel_wr);

assign INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd;

assign INPUT_STREAM_V_last_V_0_state_cmp_full = ((INPUT_STREAM_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state[1'd0];

assign INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state[1'd1];

assign INPUT_STREAM_V_strb_V_0_load_A = (~INPUT_STREAM_V_strb_V_0_sel_wr & INPUT_STREAM_V_strb_V_0_state_cmp_full);

assign INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_state_cmp_full & INPUT_STREAM_V_strb_V_0_sel_wr);

assign INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd;

assign INPUT_STREAM_V_strb_V_0_state_cmp_full = ((INPUT_STREAM_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state[1'd0];

assign INPUT_STREAM_V_user_V_0_ack_in = INPUT_STREAM_V_user_V_0_state[1'd1];

assign INPUT_STREAM_V_user_V_0_load_A = (~INPUT_STREAM_V_user_V_0_sel_wr & INPUT_STREAM_V_user_V_0_state_cmp_full);

assign INPUT_STREAM_V_user_V_0_load_B = (INPUT_STREAM_V_user_V_0_state_cmp_full & INPUT_STREAM_V_user_V_0_sel_wr);

assign INPUT_STREAM_V_user_V_0_sel = INPUT_STREAM_V_user_V_0_sel_rd;

assign INPUT_STREAM_V_user_V_0_state_cmp_full = ((INPUT_STREAM_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_user_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_user_V_0_vld_out = INPUT_STREAM_V_user_V_0_state[1'd0];

assign OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state[1'd1];

assign OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_data_V_1_load_A = (~OUTPUT_STREAM_V_data_V_1_sel_wr & OUTPUT_STREAM_V_data_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_state_cmp_full & OUTPUT_STREAM_V_data_V_1_sel_wr);

assign OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd;

assign OUTPUT_STREAM_V_data_V_1_state_cmp_full = ((OUTPUT_STREAM_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state[1'd0];

assign OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state[1'd1];

assign OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_dest_V_1_load_A = (~OUTPUT_STREAM_V_dest_V_1_sel_wr & OUTPUT_STREAM_V_dest_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full & OUTPUT_STREAM_V_dest_V_1_sel_wr);

assign OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd;

assign OUTPUT_STREAM_V_dest_V_1_state_cmp_full = ((OUTPUT_STREAM_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state[1'd1];

assign OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_id_V_1_load_A = (~OUTPUT_STREAM_V_id_V_1_sel_wr & OUTPUT_STREAM_V_id_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_state_cmp_full & OUTPUT_STREAM_V_id_V_1_sel_wr);

assign OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd;

assign OUTPUT_STREAM_V_id_V_1_state_cmp_full = ((OUTPUT_STREAM_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state[1'd0];

assign OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state[1'd1];

assign OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_keep_V_1_load_A = (~OUTPUT_STREAM_V_keep_V_1_sel_wr & OUTPUT_STREAM_V_keep_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full & OUTPUT_STREAM_V_keep_V_1_sel_wr);

assign OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd;

assign OUTPUT_STREAM_V_keep_V_1_state_cmp_full = ((OUTPUT_STREAM_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state[1'd0];

assign OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state[1'd1];

assign OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_last_V_1_load_A = (~OUTPUT_STREAM_V_last_V_1_sel_wr & OUTPUT_STREAM_V_last_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_state_cmp_full & OUTPUT_STREAM_V_last_V_1_sel_wr);

assign OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd;

assign OUTPUT_STREAM_V_last_V_1_state_cmp_full = ((OUTPUT_STREAM_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state[1'd0];

assign OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state[1'd1];

assign OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_strb_V_1_load_A = (~OUTPUT_STREAM_V_strb_V_1_sel_wr & OUTPUT_STREAM_V_strb_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full & OUTPUT_STREAM_V_strb_V_1_sel_wr);

assign OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd;

assign OUTPUT_STREAM_V_strb_V_1_state_cmp_full = ((OUTPUT_STREAM_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state[1'd0];

assign OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state[1'd1];

assign OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_user_V_1_load_A = (~OUTPUT_STREAM_V_user_V_1_sel_wr & OUTPUT_STREAM_V_user_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_state_cmp_full & OUTPUT_STREAM_V_user_V_1_sel_wr);

assign OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd;

assign OUTPUT_STREAM_V_user_V_1_state_cmp_full = ((OUTPUT_STREAM_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign not_tmp_2_fu_185_p2 = (tmp_2_fu_179_p2 ^ 1'd1);

assign tmp_2_fu_179_p2 = ((INPUT_STREAM_V_data_V_0_data_out > threshold_memorized) ? 1'b1 : 1'b0);

assign tmp_data_V_1_fu_198_p3 = ((tmp_data_V_2_fu_191_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp_data_V_2_fu_191_p3 = ((inverted_V[0:0] === 1'b1) ? not_tmp_2_fu_185_p2 : tmp_2_fu_179_p2);

assign update_threshold_V_r_read_fu_80_p2 = update_threshold_V;

endmodule //binarization
