// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Mat2AXIvideo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Mat2AXIvideo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Mat2AXIvideo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state1 = "1";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state2 = "10";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state5 = "1000";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Mat2AXIvideo::ap_const_boolean_1 = true;
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_2 = "10";
const bool Mat2AXIvideo::ap_const_boolean_0 = false;
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_0 = "0";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_1 = "1";
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_1 = "1";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_0 = "0000000000";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_3 = "11";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_200 = "1000000000";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_1 = "1";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_1FF = "111111111";

Mat2AXIvideo::Mat2AXIvideo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_AXI_video_strm_V_data_V_blk_n);
    sensitive << ( AXI_video_strm_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_data_V_din);
    sensitive << ( img_data_stream_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_data_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_dest_V_blk_n);
    sensitive << ( AXI_video_strm_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_dest_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_dest_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_id_V1_status);
    sensitive << ( AXI_video_strm_V_data_V_full_n );
    sensitive << ( AXI_video_strm_V_keep_V_full_n );
    sensitive << ( AXI_video_strm_V_strb_V_full_n );
    sensitive << ( AXI_video_strm_V_user_V_full_n );
    sensitive << ( AXI_video_strm_V_last_V_full_n );
    sensitive << ( AXI_video_strm_V_id_V_full_n );
    sensitive << ( AXI_video_strm_V_dest_V_full_n );

    SC_METHOD(thread_AXI_video_strm_V_id_V1_update);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_AXI_video_strm_V_id_V_blk_n);
    sensitive << ( AXI_video_strm_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_id_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_id_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_keep_V_blk_n);
    sensitive << ( AXI_video_strm_V_keep_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_keep_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_keep_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_last_V_blk_n);
    sensitive << ( AXI_video_strm_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_last_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( axi_last_V_reg_209 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_last_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_strb_V_blk_n);
    sensitive << ( AXI_video_strm_V_strb_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_strb_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_AXI_video_strm_V_strb_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_AXI_video_strm_V_user_V_blk_n);
    sensitive << ( AXI_video_strm_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_AXI_video_strm_V_user_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_user_V_fu_78 );

    SC_METHOD(thread_AXI_video_strm_V_user_V_write);
    sensitive << ( AXI_video_strm_V_id_V1_update );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( img_data_stream_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( AXI_video_strm_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( img_data_stream_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( AXI_video_strm_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( img_data_stream_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( AXI_video_strm_V_id_V1_status );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( img_data_stream_V_empty_n );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( AXI_video_strm_V_id_V1_status );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_fu_157_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( exitcond4_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond4_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_axi_last_V_fu_169_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_1_reg_129 );
    sensitive << ( exitcond_fu_157_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond4_fu_145_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_118 );

    SC_METHOD(thread_exitcond_fu_157_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_1_reg_129 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_V_fu_151_p2);
    sensitive << ( t_V_reg_118 );

    SC_METHOD(thread_img_data_stream_V_blk_n);
    sensitive << ( img_data_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_img_data_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_j_V_fu_163_p2);
    sensitive << ( t_V_1_reg_129 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond4_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_157_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Mat2AXIvideo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, img_data_stream_V_dout, "(port)img_data_stream_V_dout");
    sc_trace(mVcdFile, img_data_stream_V_empty_n, "(port)img_data_stream_V_empty_n");
    sc_trace(mVcdFile, img_data_stream_V_read, "(port)img_data_stream_V_read");
    sc_trace(mVcdFile, AXI_video_strm_V_data_V_din, "(port)AXI_video_strm_V_data_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_data_V_full_n, "(port)AXI_video_strm_V_data_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_data_V_write, "(port)AXI_video_strm_V_data_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_keep_V_din, "(port)AXI_video_strm_V_keep_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_keep_V_full_n, "(port)AXI_video_strm_V_keep_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_keep_V_write, "(port)AXI_video_strm_V_keep_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_strb_V_din, "(port)AXI_video_strm_V_strb_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_strb_V_full_n, "(port)AXI_video_strm_V_strb_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_strb_V_write, "(port)AXI_video_strm_V_strb_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_user_V_din, "(port)AXI_video_strm_V_user_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_user_V_full_n, "(port)AXI_video_strm_V_user_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_user_V_write, "(port)AXI_video_strm_V_user_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_last_V_din, "(port)AXI_video_strm_V_last_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_last_V_full_n, "(port)AXI_video_strm_V_last_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_last_V_write, "(port)AXI_video_strm_V_last_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V_din, "(port)AXI_video_strm_V_id_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V_full_n, "(port)AXI_video_strm_V_id_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V_write, "(port)AXI_video_strm_V_id_V_write");
    sc_trace(mVcdFile, AXI_video_strm_V_dest_V_din, "(port)AXI_video_strm_V_dest_V_din");
    sc_trace(mVcdFile, AXI_video_strm_V_dest_V_full_n, "(port)AXI_video_strm_V_dest_V_full_n");
    sc_trace(mVcdFile, AXI_video_strm_V_dest_V_write, "(port)AXI_video_strm_V_dest_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, img_data_stream_V_blk_n, "img_data_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_200, "exitcond_reg_200");
    sc_trace(mVcdFile, AXI_video_strm_V_data_V_blk_n, "AXI_video_strm_V_data_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_keep_V_blk_n, "AXI_video_strm_V_keep_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_strb_V_blk_n, "AXI_video_strm_V_strb_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_user_V_blk_n, "AXI_video_strm_V_user_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_last_V_blk_n, "AXI_video_strm_V_last_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V_blk_n, "AXI_video_strm_V_id_V_blk_n");
    sc_trace(mVcdFile, AXI_video_strm_V_dest_V_blk_n, "AXI_video_strm_V_dest_V_blk_n");
    sc_trace(mVcdFile, t_V_1_reg_129, "t_V_1_reg_129");
    sc_trace(mVcdFile, exitcond4_fu_145_p2, "exitcond4_fu_145_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_V_fu_151_p2, "i_V_fu_151_p2");
    sc_trace(mVcdFile, i_V_reg_195, "i_V_reg_195");
    sc_trace(mVcdFile, exitcond_fu_157_p2, "exitcond_fu_157_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V1_status, "AXI_video_strm_V_id_V1_status");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_V_fu_163_p2, "j_V_fu_163_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, axi_last_V_fu_169_p2, "axi_last_V_fu_169_p2");
    sc_trace(mVcdFile, axi_last_V_reg_209, "axi_last_V_reg_209");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, t_V_reg_118, "t_V_reg_118");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, AXI_video_strm_V_id_V1_update, "AXI_video_strm_V_id_V1_update");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_user_V_fu_78, "tmp_user_V_fu_78");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Mat2AXIvideo::~Mat2AXIvideo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Mat2AXIvideo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(exitcond4_fu_145_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_145_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_145_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_157_p2.read()))) {
        t_V_1_reg_129 = j_V_fu_163_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_145_p2.read()))) {
        t_V_1_reg_129 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_V_reg_118 = i_V_reg_195.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        t_V_reg_118 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_user_V_fu_78 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        tmp_user_V_fu_78 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_157_p2.read()))) {
        axi_last_V_reg_209 = axi_last_V_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_200 = exitcond_fu_157_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_V_reg_195 = i_V_fu_151_p2.read();
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_data_V_blk_n = AXI_video_strm_V_data_V_full_n.read();
    } else {
        AXI_video_strm_V_data_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_data_V_din() {
    AXI_video_strm_V_data_V_din = img_data_stream_V_dout.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_data_V_write() {
    AXI_video_strm_V_data_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_dest_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_dest_V_blk_n = AXI_video_strm_V_dest_V_full_n.read();
    } else {
        AXI_video_strm_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_dest_V_din() {
    AXI_video_strm_V_dest_V_din = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_AXI_video_strm_V_dest_V_write() {
    AXI_video_strm_V_dest_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_id_V1_status() {
    AXI_video_strm_V_id_V1_status = (AXI_video_strm_V_data_V_full_n.read() & AXI_video_strm_V_keep_V_full_n.read() & AXI_video_strm_V_strb_V_full_n.read() & AXI_video_strm_V_user_V_full_n.read() & AXI_video_strm_V_last_V_full_n.read() & AXI_video_strm_V_id_V_full_n.read() & AXI_video_strm_V_dest_V_full_n.read());
}

void Mat2AXIvideo::thread_AXI_video_strm_V_id_V1_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        AXI_video_strm_V_id_V1_update = ap_const_logic_1;
    } else {
        AXI_video_strm_V_id_V1_update = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_id_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_id_V_blk_n = AXI_video_strm_V_id_V_full_n.read();
    } else {
        AXI_video_strm_V_id_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_id_V_din() {
    AXI_video_strm_V_id_V_din = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_AXI_video_strm_V_id_V_write() {
    AXI_video_strm_V_id_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_keep_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_keep_V_blk_n = AXI_video_strm_V_keep_V_full_n.read();
    } else {
        AXI_video_strm_V_keep_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_keep_V_din() {
    AXI_video_strm_V_keep_V_din = ap_const_lv1_1;
}

void Mat2AXIvideo::thread_AXI_video_strm_V_keep_V_write() {
    AXI_video_strm_V_keep_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_last_V_blk_n = AXI_video_strm_V_last_V_full_n.read();
    } else {
        AXI_video_strm_V_last_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_last_V_din() {
    AXI_video_strm_V_last_V_din = axi_last_V_reg_209.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_last_V_write() {
    AXI_video_strm_V_last_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_strb_V_blk_n = AXI_video_strm_V_strb_V_full_n.read();
    } else {
        AXI_video_strm_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_strb_V_din() {
    AXI_video_strm_V_strb_V_din = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_AXI_video_strm_V_strb_V_write() {
    AXI_video_strm_V_strb_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_user_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        AXI_video_strm_V_user_V_blk_n = AXI_video_strm_V_user_V_full_n.read();
    } else {
        AXI_video_strm_V_user_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_AXI_video_strm_V_user_V_din() {
    AXI_video_strm_V_user_V_din = tmp_user_V_fu_78.read();
}

void Mat2AXIvideo::thread_AXI_video_strm_V_user_V_write() {
    AXI_video_strm_V_user_V_write = AXI_video_strm_V_id_V1_update.read();
}

void Mat2AXIvideo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, AXI_video_strm_V_id_V1_status.read()))));
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, AXI_video_strm_V_id_V1_status.read()))));
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, AXI_video_strm_V_id_V1_status.read()))));
}

void Mat2AXIvideo::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Mat2AXIvideo::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mat2AXIvideo::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, AXI_video_strm_V_id_V1_status.read())));
}

void Mat2AXIvideo::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_fu_157_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_145_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Mat2AXIvideo::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Mat2AXIvideo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_145_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_axi_last_V_fu_169_p2() {
    axi_last_V_fu_169_p2 = (!t_V_1_reg_129.read().is_01() || !ap_const_lv10_1FF.is_01())? sc_lv<1>(): sc_lv<1>(t_V_1_reg_129.read() == ap_const_lv10_1FF);
}

void Mat2AXIvideo::thread_exitcond4_fu_145_p2() {
    exitcond4_fu_145_p2 = (!t_V_reg_118.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_118.read() == ap_const_lv10_200);
}

void Mat2AXIvideo::thread_exitcond_fu_157_p2() {
    exitcond_fu_157_p2 = (!t_V_1_reg_129.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(t_V_1_reg_129.read() == ap_const_lv10_200);
}

void Mat2AXIvideo::thread_i_V_fu_151_p2() {
    i_V_fu_151_p2 = (!t_V_reg_118.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(t_V_reg_118.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Mat2AXIvideo::thread_img_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0))) {
        img_data_stream_V_blk_n = img_data_stream_V_empty_n.read();
    } else {
        img_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_img_data_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_200.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_data_stream_V_read = ap_const_logic_1;
    } else {
        img_data_stream_V_read = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_j_V_fu_163_p2() {
    j_V_fu_163_p2 = (!t_V_1_reg_129.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(t_V_1_reg_129.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Mat2AXIvideo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_145_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_157_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_157_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

