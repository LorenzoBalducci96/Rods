// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Mat2AXIvideo_HH_
#define _Mat2AXIvideo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Mat2AXIvideo : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > img_data_stream_V_dout;
    sc_in< sc_logic > img_data_stream_V_empty_n;
    sc_out< sc_logic > img_data_stream_V_read;
    sc_out< sc_lv<8> > AXI_video_strm_V_data_V_din;
    sc_in< sc_logic > AXI_video_strm_V_data_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_data_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_keep_V_din;
    sc_in< sc_logic > AXI_video_strm_V_keep_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_keep_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_strb_V_din;
    sc_in< sc_logic > AXI_video_strm_V_strb_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_strb_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_user_V_din;
    sc_in< sc_logic > AXI_video_strm_V_user_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_user_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_last_V_din;
    sc_in< sc_logic > AXI_video_strm_V_last_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_last_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_id_V_din;
    sc_in< sc_logic > AXI_video_strm_V_id_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_id_V_write;
    sc_out< sc_lv<1> > AXI_video_strm_V_dest_V_din;
    sc_in< sc_logic > AXI_video_strm_V_dest_V_full_n;
    sc_out< sc_logic > AXI_video_strm_V_dest_V_write;


    // Module declarations
    Mat2AXIvideo(sc_module_name name);
    SC_HAS_PROCESS(Mat2AXIvideo);

    ~Mat2AXIvideo();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > img_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_200;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_keep_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_strb_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_id_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_blk_n;
    sc_signal< sc_lv<10> > t_V_1_reg_129;
    sc_signal< sc_lv<1> > exitcond4_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_V_fu_151_p2;
    sc_signal< sc_lv<10> > i_V_reg_195;
    sc_signal< sc_lv<1> > exitcond_fu_157_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< sc_logic > AXI_video_strm_V_id_V1_status;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > j_V_fu_163_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > axi_last_V_fu_169_p2;
    sc_signal< sc_lv<1> > axi_last_V_reg_209;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<10> > t_V_reg_118;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > AXI_video_strm_V_id_V1_update;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_user_V_fu_78;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_1FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_data_V_blk_n();
    void thread_AXI_video_strm_V_data_V_din();
    void thread_AXI_video_strm_V_data_V_write();
    void thread_AXI_video_strm_V_dest_V_blk_n();
    void thread_AXI_video_strm_V_dest_V_din();
    void thread_AXI_video_strm_V_dest_V_write();
    void thread_AXI_video_strm_V_id_V1_status();
    void thread_AXI_video_strm_V_id_V1_update();
    void thread_AXI_video_strm_V_id_V_blk_n();
    void thread_AXI_video_strm_V_id_V_din();
    void thread_AXI_video_strm_V_id_V_write();
    void thread_AXI_video_strm_V_keep_V_blk_n();
    void thread_AXI_video_strm_V_keep_V_din();
    void thread_AXI_video_strm_V_keep_V_write();
    void thread_AXI_video_strm_V_last_V_blk_n();
    void thread_AXI_video_strm_V_last_V_din();
    void thread_AXI_video_strm_V_last_V_write();
    void thread_AXI_video_strm_V_strb_V_blk_n();
    void thread_AXI_video_strm_V_strb_V_din();
    void thread_AXI_video_strm_V_strb_V_write();
    void thread_AXI_video_strm_V_user_V_blk_n();
    void thread_AXI_video_strm_V_user_V_din();
    void thread_AXI_video_strm_V_user_V_write();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_axi_last_V_fu_169_p2();
    void thread_exitcond4_fu_145_p2();
    void thread_exitcond_fu_157_p2();
    void thread_i_V_fu_151_p2();
    void thread_img_data_stream_V_blk_n();
    void thread_img_data_stream_V_read();
    void thread_j_V_fu_163_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
